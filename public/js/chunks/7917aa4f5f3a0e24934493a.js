(self.webpackChunk=self.webpackChunk||[]).push([[791],{434:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(4082),s=function(){return{listeners:[],scriptId:o.uuid("tiny-script"),scriptLoaded:!1}},i=(r=s(),{load:function(e,t,n){r.scriptLoaded?n():(r.listeners.push(n),e.getElementById(r.scriptId)||function(e,t,n,r){var o=t.createElement("script");o.referrerPolicy="origin",o.type="application/javascript",o.id=e,o.src=n;var s=function(){o.removeEventListener("load",s),r()};o.addEventListener("load",s),t.head&&t.head.appendChild(o)}(r.scriptId,e,t,(function(){r.listeners.forEach((function(e){return e()})),r.scriptLoaded=!0})))},reinitialize:function(){r=s()}});t.ScriptLoader=i},8537:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getTinymce=function(){var e="undefined"!=typeof window?window:n.g;return e&&e.tinymce?e.tinymce:null}},4082:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onBeforePaste","onBlur","onChange","onClearUndos","onClick","onContextMenu","onCopy","onCut","onDblclick","onDeactivate","onDirty","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onExecCommand","onFocus","onFocusIn","onFocusOut","onGetContent","onHide","onInit","onKeyDown","onKeyPress","onKeyUp","onLoadContent","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onNodeChange","onObjectResizeStart","onObjectResized","onObjectSelected","onPaste","onPostProcess","onPostRender","onPreProcess","onProgressState","onRedo","onRemove","onReset","onSaveContent","onSelectionChange","onSetAttrib","onSetContent","onShow","onSubmit","onUndo","onVisualAid"],r=function(e){return-1!==n.map((function(e){return e.toLowerCase()})).indexOf(e.toLowerCase())};t.isValidKey=r;var o=function(e,t,n){Object.keys(t).filter(r).forEach((function(r){var o=t[r];"function"==typeof o&&("onInit"===r?o(e,n):n.on(r.substring(2),(function(e){return o(e,n)})))}))};t.bindHandlers=o;var s=function(e,t){var n=e.$props.modelEvents?e.$props.modelEvents:null,r=Array.isArray(n)?n.join(" "):n;t.on(r||"change input undo redo",(function(){e.$emit("input",t.getContent({format:e.$props.outputFormat}))}))};t.bindModelHandlers=s;t.initEditor=function(e,t,n){var r=t.$props.value?t.$props.value:"",i=t.$props.initialValue?t.$props.initialValue:"";n.setContent(r||(t.initialized?t.cache:i)),t.$watch("value",(function(e,r){n&&"string"==typeof e&&e!==r&&e!==n.getContent({format:t.$props.outputFormat})&&n.setContent(e)})),t.$listeners.input&&s(t,n),o(e,t.$listeners,n),t.initialized=!0};var i=0;t.uuid=function(e){var t=Date.now();return e+"_"+Math.floor(1e9*Math.random())+ ++i+String(t)};t.isTextarea=function(e){return null!==e&&"textarea"===e.tagName.toLowerCase()};var a=function(e){return void 0===e||""===e?[]:Array.isArray(e)?e:e.split(" ")};t.mergePlugins=function(e,t){return a(e).concat(a(t))};t.isNullOrUndefined=function(e){return null==e}},2282:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(434),s=n(8537),i=n(4082),a=n(7431),l=function(e){return function(){var t=r(r({},e.$props.init),{readonly:e.$props.disabled,selector:"#"+e.elementId,plugins:i.mergePlugins(e.$props.init&&e.$props.init.plugins,e.$props.plugins),toolbar:e.$props.toolbar||e.$props.init&&e.$props.init.toolbar,inline:e.inlineEditor,setup:function(t){e.editor=t,t.on("init",(function(n){return i.initEditor(n,e,t)})),e.$props.init&&"function"==typeof e.$props.init.setup&&e.$props.init.setup(t)}});i.isTextarea(e.element)&&(e.element.style.visibility="",e.element.style.display=""),s.getTinymce().init(t)}};t.Editor={props:a.editorProps,created:function(){this.elementId=this.$props.id||i.uuid("tiny-vue"),this.inlineEditor=this.$props.init&&this.$props.init.inline||this.$props.inline,this.initialized=!1},watch:{disabled:function(){this.editor.setMode(this.disabled?"readonly":"design")}},mounted:function(){if(this.element=this.$el,null!==s.getTinymce())l(this)();else if(this.element&&this.element.ownerDocument){var e=this.$props.cloudChannel?this.$props.cloudChannel:"5",t=this.$props.apiKey?this.$props.apiKey:"no-api-key",n=i.isNullOrUndefined(this.$props.tinymceScriptSrc)?"https://cdn.tiny.cloud/1/"+t+"/tinymce/"+e+"/tinymce.min.js":this.$props.tinymceScriptSrc;o.ScriptLoader.load(this.element.ownerDocument,n,l(this))}},beforeDestroy:function(){null!==s.getTinymce()&&s.getTinymce().remove(this.editor)},deactivated:function(){var e;this.inlineEditor||(this.cache=this.editor.getContent(),null===(e=s.getTinymce())||void 0===e||e.remove(this.editor))},activated:function(){!this.inlineEditor&&this.initialized&&l(this)()},render:function(e){return this.inlineEditor?function(e,t,n){return e(n||"div",{attrs:{id:t}})}(e,this.elementId,this.$props.tagName):function(e,t){return e("textarea",{attrs:{id:t},style:{visibility:"hidden"}})}(e,this.elementId)}}},7431:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.editorProps={apiKey:String,cloudChannel:String,id:String,init:Object,initialValue:String,inline:Boolean,modelEvents:[String,Array],plugins:[String,Array],tagName:String,toolbar:[String,Array],value:String,disabled:Boolean,tinymceScriptSrc:String,outputFormat:{type:String,validator:function(e){return"html"===e||"text"===e}}}},5846:(e,t,n)=>{"use strict";var r=n(2282);t.Z=r.Editor},4247:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(4015),o=n.n(r),s=n(3645),i=n.n(s)()(o());i.push([e.id,".photo-input[data-v-595d1e4d]{position:absolute;visibility:hidden}.user-photo[data-v-595d1e4d]{border-radius:200px;width:300px;height:auto;max-height:500px;border:1px solid #01aefe}.user-photo-module[data-v-595d1e4d]{display:flex;flex-direction:column;justify-content:center;align-items:center}","",{version:3,sources:["webpack://./resources/js/components/photo-loader.vue"],names:[],mappings:"AA2FA,8BACA,iBAAA,CACA,iBACA,CAEA,6BACA,mBAAA,CACA,WAAA,CACA,WAAA,CACA,gBAAA,CACA,wBACA,CAEA,oCACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBACA",sourcesContent:['<template>\r\n    <v-card class="d-flex flex-column" justify-center align-center elevation="0">\r\n        <input\r\n                type="file"\r\n                id="files"\r\n                @change="addPhoto"\r\n                class="photo-input"\r\n                placeholder="azaz"\r\n                accept="image/jpeg,image/png,image/jpg"\r\n        />\r\n\r\n        <v-btn class="btn my-2" @click="clickOnInput" v-if="!one || !carouselPhotos.length">Добавить фотографию</v-btn>\r\n        <div v-if="one && loadedPhotos.length" class="text-center">{{loadedPhotos[0].name}}</div>\r\n        <div v-if="!one && carouselPhotos.length" class="user-photo-module">\r\n            <v-carousel v-model="n">\r\n                <v-carousel-item\r\n                        v-for="(photo, i) in carouselPhotos"\r\n                        :key="i"\r\n                        :src="photo"\r\n                        contain\r\n                >\r\n                </v-carousel-item>\r\n            </v-carousel>\r\n        </div>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \'photo-loader\',\r\n        props: {\r\n            radius: {\r\n                type: Number,\r\n            },\r\n            one: {\r\n                type: Boolean,\r\n                default: false,\r\n            }\r\n        },\r\n        components: {},\r\n        data() {\r\n            return {\r\n                n: 0,\r\n                photo: \'\',\r\n                loadedPhotos: [],\r\n                carouselPhotos:[],\r\n                fileImg: null,\r\n            }\r\n        },\r\n        methods: {\r\n            getPhotos() {\r\n                return this.loadedPhotos;\r\n            },\r\n            getFirst() {\r\n                return this.loadedPhotos[0];\r\n            },\r\n            returnFormData(val) {\r\n                this.$emit(\'save-photo\', val)\r\n            },\r\n            updatePhoto(val) {\r\n                this.photo = val\r\n                this.showCropperDialog = false\r\n            },\r\n            clickOnInput() {\r\n                document.getElementById(\'files\').files = (new DataTransfer()).files;\r\n                document.getElementById(\'files\').click()\r\n\r\n            },\r\n            addPhoto(event) {\r\n                this.fileImg = event.target.files[0]\r\n                if (this.fileImg.size > 5024000) {\r\n                    this.$root.$children[0].snackbarText = \'Размер файла не может быть больше 5МБ\'\r\n                    this.$root.$children[0].snackbar = true\r\n                    return;\r\n                }\r\n                if(this.loadedPhotos.length > 10) {\r\n                    this.$root.$children[0].snackbarText = \'Вы не можете загрузить больше 10 фотографий\'\r\n                    this.$root.$children[0].snackbar = true\r\n                    return;\r\n                }\r\n                this.carouselPhotos.push(URL.createObjectURL(this.fileImg))\r\n                this.loadedPhotos.push(this.fileImg)\r\n                this.n = this.loadedPhotos.length-1\r\n                this.fileImg = null;\r\n            },\r\n        },\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .photo-input {\r\n        position: absolute;\r\n        visibility: hidden;\r\n    }\r\n\r\n    .user-photo {\r\n        border-radius: 200px;\r\n        width: 300px;\r\n        height: auto;\r\n        max-height: 500px;\r\n        border: 1px solid #01aefe;\r\n    }\r\n\r\n    .user-photo-module {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const a=i},4298:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n(4015),o=n.n(r),s=n(3645),i=n.n(s)()(o());i.push([e.id,".description.v-text-field>.v-input__control>.v-input__slot:after,.description.v-text-field>.v-input__control>.v-input__slot:before,.description .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/RequestEdit.vue"],names:[],mappings:"AA0GA,6KAEA,sBACA",sourcesContent:['<template>\r\n    <v-container\r\n            class="cover">\r\n        <v-toolbar-title align="center" justify="center" class="mb-2"\r\n        v-text="\'Новый запрос\' ">\r\n        </v-toolbar-title>\r\n        <v-combobox\r\n                v-if="!request.role"\r\n                v-model="request.role"\r\n                :erro-messages="messages.role"\r\n                :items="roles"\r\n                label="Куда"\r\n                dense\r\n        ></v-combobox>\r\n        <v-combobox\r\n                v-model="request.type"\r\n                :error-messages="messages.type"\r\n                :items="types"\r\n                label="Тип заявления"\r\n                dense\r\n        ></v-combobox>\r\n        <v-textarea\r\n            type="text"\r\n            name="title"\r\n            label="Текст заявления"\r\n            v-model="request.text"\r\n            :error-messages="messages.text"\r\n            >\r\n        </v-textarea>\r\n\r\n        <v-btn class="save-btn"\r\n               v-if="$route.params.id == 0"\r\n               color="success"\r\n               fab\r\n               @click="create"\r\n               :disabled="!(request.role && request.type && request.text)"\r\n               dark>\r\n            <v-icon>mdi-check-outline</v-icon>\r\n        </v-btn>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n    import Editor from \'@tinymce/tinymce-vue\';\r\n    import PhotoLoader from \'@/components/photo-loader\'\r\n    export default {\r\n        name: "RequestEdit",\r\n        components: {\r\n            Editor,\r\n            PhotoLoader\r\n        },\r\n        data: (vm) => {\r\n            return {\r\n                request: {\r\n                    id: vm.$route.params.id,\r\n                    type: null,\r\n                    role: { value:vm.$route.query.role},\r\n                    text: \'\',\r\n                },\r\n                roles: [\r\n                    {\r\n                        value: 128,\r\n                        text: \'В библиотеку\'\r\n                    },\r\n                    {\r\n                        value: 1024,\r\n                        text: \'В администрацию\'\r\n                    },\r\n                ],\r\n                types : vm.$store.state.types,\r\n                messages: {\r\n                    type: \'\',\r\n                    text: \'\',\r\n                    role: \'\',\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n        },\r\n        methods: {\r\n            create() {\r\n                if (!(this.request.id > 0))\r\n                    window.axios.post(\'/request\', {\r\n                        text: this.request.text,\r\n                        role: this.request.role?.value || null,\r\n                        type: this.request.type?.value || null,\r\n                    })\r\n                    .then((r) => {\r\n                        this.$router.push({name: "requests"});\r\n                    }).catch((e) => {\r\n                        if (e.response && e.response.status === 422) {\r\n                            let errors = e.response.data.errors\r\n                            Object.keys(this.messages).forEach((k)=> {\r\n                                this.messages[k] = errors[k]?.[0] || \'\';\r\n                            });\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .description .v-text-field__slot textarea {\r\n        display: none !important;\r\n    }\r\n    .description.v-text-field>.v-input__control>.v-input__slot:after ,\r\n    .description.v-text-field>.v-input__control>.v-input__slot:before{\r\n        display: none !important;\r\n    }\r\n</style>'],sourceRoot:""}]);const a=i},7136:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});const r={name:"photo-loader",props:{radius:{type:Number},one:{type:Boolean,default:!1}},components:{},data:function(){return{n:0,photo:"",loadedPhotos:[],carouselPhotos:[],fileImg:null}},methods:{getPhotos:function(){return this.loadedPhotos},getFirst:function(){return this.loadedPhotos[0]},returnFormData:function(e){this.$emit("save-photo",e)},updatePhoto:function(e){this.photo=e,this.showCropperDialog=!1},clickOnInput:function(){document.getElementById("files").files=(new DataTransfer).files,document.getElementById("files").click()},addPhoto:function(e){return this.fileImg=e.target.files[0],this.fileImg.size>5024e3?(this.$root.$children[0].snackbarText="Размер файла не может быть больше 5МБ",void(this.$root.$children[0].snackbar=!0)):this.loadedPhotos.length>10?(this.$root.$children[0].snackbarText="Вы не можете загрузить больше 10 фотографий",void(this.$root.$children[0].snackbar=!0)):(this.carouselPhotos.push(URL.createObjectURL(this.fileImg)),this.loadedPhotos.push(this.fileImg),this.n=this.loadedPhotos.length-1,void(this.fileImg=null))}}};n(8258);const o=(0,n(1900).Z)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-card",{staticClass:"d-flex flex-column",attrs:{"justify-center":"","align-center":"",elevation:"0"}},[n("input",{staticClass:"photo-input",attrs:{type:"file",id:"files",placeholder:"azaz",accept:"image/jpeg,image/png,image/jpg"},on:{change:e.addPhoto}}),e._v(" "),e.one&&e.carouselPhotos.length?e._e():n("v-btn",{staticClass:"btn my-2",on:{click:e.clickOnInput}},[e._v("Добавить фотографию")]),e._v(" "),e.one&&e.loadedPhotos.length?n("div",{staticClass:"text-center"},[e._v(e._s(e.loadedPhotos[0].name))]):e._e(),e._v(" "),!e.one&&e.carouselPhotos.length?n("div",{staticClass:"user-photo-module"},[n("v-carousel",{model:{value:e.n,callback:function(t){e.n=t},expression:"n"}},e._l(e.carouselPhotos,(function(e,t){return n("v-carousel-item",{key:t,attrs:{src:e,contain:""}})})),1)],1):e._e()],1)}),[],!1,null,"595d1e4d",null).exports},4791:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var r=n(5846),o=n(7136);const s={name:"RequestEdit",components:{Editor:r.Z,PhotoLoader:o.Z},data:function(e){return{request:{id:e.$route.params.id,type:null,role:{value:e.$route.query.role},text:""},roles:[{value:128,text:"В библиотеку"},{value:1024,text:"В администрацию"}],types:e.$store.state.types,messages:{type:"",text:"",role:""}}},mounted:function(){},methods:{create:function(){var e,t,n=this;this.request.id>0||window.axios.post("/request",{text:this.request.text,role:(null===(e=this.request.role)||void 0===e?void 0:e.value)||null,type:(null===(t=this.request.type)||void 0===t?void 0:t.value)||null}).then((function(e){n.$router.push({name:"requests"})})).catch((function(e){if(e.response&&422===e.response.status){var t=e.response.data.errors;Object.keys(n.messages).forEach((function(e){var r;n.messages[e]=(null===(r=t[e])||void 0===r?void 0:r[0])||""}))}}))}}};n(2633);const i=(0,n(1900).Z)(s,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s("Новый запрос")}}),e._v(" "),e.request.role?e._e():n("v-combobox",{attrs:{"erro-messages":e.messages.role,items:e.roles,label:"Куда",dense:""},model:{value:e.request.role,callback:function(t){e.$set(e.request,"role",t)},expression:"request.role"}}),e._v(" "),n("v-combobox",{attrs:{"error-messages":e.messages.type,items:e.types,label:"Тип заявления",dense:""},model:{value:e.request.type,callback:function(t){e.$set(e.request,"type",t)},expression:"request.type"}}),e._v(" "),n("v-textarea",{attrs:{type:"text",name:"title",label:"Текст заявления","error-messages":e.messages.text},model:{value:e.request.text,callback:function(t){e.$set(e.request,"text",t)},expression:"request.text"}}),e._v(" "),0==e.$route.params.id?n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!(e.request.role&&e.request.type&&e.request.text),dark:""},on:{click:e.create}},[n("v-icon",[e._v("mdi-check-outline")])],1):e._e()],1)}),[],!1,null,null,null).exports},8258:(e,t,n)=>{var r=n(4247);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals);(0,n(5346).Z)("34d8856a",r,!0,{})},2633:(e,t,n)=>{var r=n(4298);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals);(0,n(5346).Z)("7f44e0e5",r,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,