(self.webpackChunk=self.webpackChunk||[]).push([[450],{434:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});var n,o=t(4082),i=function(){return{listeners:[],scriptId:o.uuid("tiny-script"),scriptLoaded:!1}},s=(n=i(),{load:function(e,r,t){n.scriptLoaded?t():(n.listeners.push(t),e.getElementById(n.scriptId)||function(e,r,t,n){var o=r.createElement("script");o.referrerPolicy="origin",o.type="application/javascript",o.id=e,o.src=t;var i=function(){o.removeEventListener("load",i),n()};o.addEventListener("load",i),r.head&&r.head.appendChild(o)}(n.scriptId,e,r,(function(){n.listeners.forEach((function(e){return e()})),n.scriptLoaded=!0})))},reinitialize:function(){n=i()}});r.ScriptLoader=s},8537:(e,r,t)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});r.getTinymce=function(){var e="undefined"!=typeof window?window:t.g;return e&&e.tinymce?e.tinymce:null}},4082:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});var t=["onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onBeforePaste","onBlur","onChange","onClearUndos","onClick","onContextMenu","onCopy","onCut","onDblclick","onDeactivate","onDirty","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onExecCommand","onFocus","onFocusIn","onFocusOut","onGetContent","onHide","onInit","onKeyDown","onKeyPress","onKeyUp","onLoadContent","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onNodeChange","onObjectResizeStart","onObjectResized","onObjectSelected","onPaste","onPostProcess","onPostRender","onPreProcess","onProgressState","onRedo","onRemove","onReset","onSaveContent","onSelectionChange","onSetAttrib","onSetContent","onShow","onSubmit","onUndo","onVisualAid"],n=function(e){return-1!==t.map((function(e){return e.toLowerCase()})).indexOf(e.toLowerCase())};r.isValidKey=n;var o=function(e,r,t){Object.keys(r).filter(n).forEach((function(n){var o=r[n];"function"==typeof o&&("onInit"===n?o(e,t):t.on(n.substring(2),(function(e){return o(e,t)})))}))};r.bindHandlers=o;var i=function(e,r){var t=e.$props.modelEvents?e.$props.modelEvents:null,n=Array.isArray(t)?t.join(" "):t;r.on(n||"change input undo redo",(function(){e.$emit("input",r.getContent({format:e.$props.outputFormat}))}))};r.bindModelHandlers=i;r.initEditor=function(e,r,t){var n=r.$props.value?r.$props.value:"",s=r.$props.initialValue?r.$props.initialValue:"";t.setContent(n||(r.initialized?r.cache:s)),r.$watch("value",(function(e,n){t&&"string"==typeof e&&e!==n&&e!==t.getContent({format:r.$props.outputFormat})&&t.setContent(e)})),r.$listeners.input&&i(r,t),o(e,r.$listeners,t),r.initialized=!0};var s=0;r.uuid=function(e){var r=Date.now();return e+"_"+Math.floor(1e9*Math.random())+ ++s+String(r)};r.isTextarea=function(e){return null!==e&&"textarea"===e.tagName.toLowerCase()};var a=function(e){return void 0===e||""===e?[]:Array.isArray(e)?e:e.split(" ")};r.mergePlugins=function(e,r){return a(e).concat(a(r))};r.isNullOrUndefined=function(e){return null==e}},2282:function(e,r,t){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var o in r=arguments[t])Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o]);return e}).apply(this,arguments)};Object.defineProperty(r,"__esModule",{value:!0});var o=t(434),i=t(8537),s=t(4082),a=t(7431),l=function(e){return function(){var r=n(n({},e.$props.init),{readonly:e.$props.disabled,selector:"#"+e.elementId,plugins:s.mergePlugins(e.$props.init&&e.$props.init.plugins,e.$props.plugins),toolbar:e.$props.toolbar||e.$props.init&&e.$props.init.toolbar,inline:e.inlineEditor,setup:function(r){e.editor=r,r.on("init",(function(t){return s.initEditor(t,e,r)})),e.$props.init&&"function"==typeof e.$props.init.setup&&e.$props.init.setup(r)}});s.isTextarea(e.element)&&(e.element.style.visibility="",e.element.style.display=""),i.getTinymce().init(r)}};r.Editor={props:a.editorProps,created:function(){this.elementId=this.$props.id||s.uuid("tiny-vue"),this.inlineEditor=this.$props.init&&this.$props.init.inline||this.$props.inline,this.initialized=!1},watch:{disabled:function(){this.editor.setMode(this.disabled?"readonly":"design")}},mounted:function(){if(this.element=this.$el,null!==i.getTinymce())l(this)();else if(this.element&&this.element.ownerDocument){var e=this.$props.cloudChannel?this.$props.cloudChannel:"5",r=this.$props.apiKey?this.$props.apiKey:"no-api-key",t=s.isNullOrUndefined(this.$props.tinymceScriptSrc)?"https://cdn.tiny.cloud/1/"+r+"/tinymce/"+e+"/tinymce.min.js":this.$props.tinymceScriptSrc;o.ScriptLoader.load(this.element.ownerDocument,t,l(this))}},beforeDestroy:function(){null!==i.getTinymce()&&i.getTinymce().remove(this.editor)},deactivated:function(){var e;this.inlineEditor||(this.cache=this.editor.getContent(),null===(e=i.getTinymce())||void 0===e||e.remove(this.editor))},activated:function(){!this.inlineEditor&&this.initialized&&l(this)()},render:function(e){return this.inlineEditor?function(e,r,t){return e(t||"div",{attrs:{id:r}})}(e,this.elementId,this.$props.tagName):function(e,r){return e("textarea",{attrs:{id:r},style:{visibility:"hidden"}})}(e,this.elementId)}}},7431:(e,r)=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.editorProps={apiKey:String,cloudChannel:String,id:String,init:Object,initialValue:String,inline:Boolean,modelEvents:[String,Array],plugins:[String,Array],tagName:String,toolbar:[String,Array],value:String,disabled:Boolean,tinymceScriptSrc:String,outputFormat:{type:String,validator:function(e){return"html"===e||"text"===e}}}},5846:(e,r,t)=>{"use strict";var n=t(2282);r.Z=n.Editor},4539:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>a});var n=t(4015),o=t.n(n),i=t(3645),s=t.n(i)()(o());s.push([e.id,".drop-area[data-v-ee4fed0c]:not(.drop-sm){position:relative;width:100%;display:flex;justify-content:center;align-items:center;height:200px;background:#fff;border:1px dashed #afafaf;border-radius:8px;overflow:hidden}#drop-area.focus[data-v-ee4fed0c]{background:#f8f8f8}.hover[data-v-ee4fed0c]{display:none}.focus .hide[data-v-ee4fed0c]{display:none!important}.focus .hover[data-v-ee4fed0c]{display:block!important}p[data-v-ee4fed0c]{margin-top:0}.drop-area:not(.drop-sm) .drop-form[data-v-ee4fed0c]{position:absolute;display:flex;flex-direction:column;justify-content:center;align-items:center;width:100%;height:100%;z-index:50}.drop-btn[data-v-ee4fed0c]{display:inline-block;cursor:pointer;min-width:150px;border-radius:4px;height:35px;padding:10px;background:#f8f8f8;font-weight:400;font-style:normal;line-height:17px;font-size:18px;margin-bottom:10px;text-align:center}.drop-sm .drop-btn[data-v-ee4fed0c]{min-width:100%}#fileElem[data-v-ee4fed0c]{display:none}.file-desc[data-v-ee4fed0c]{font-style:normal;font-weight:500;font-size:16px;line-height:22px;color:#4a4a4a}.drop-sm .file-desc[data-v-ee4fed0c]{display:none}.format-file-desc[data-v-ee4fed0c]{font-style:normal;font-weight:500;font-size:14px;line-height:19px;text-align:center;color:#afafaf}","",{version:3,sources:["webpack://./resources/js/components/DropArea.vue"],names:[],mappings:"AA2DA,0CACA,iBAAA,CACA,UAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,YAAA,CACA,eAAA,CACA,yBAAA,CACA,iBAAA,CACA,eACA,CAEA,kCACA,kBACA,CAEA,wBACA,YACA,CAEA,8BACA,sBACA,CAEA,+BACA,uBACA,CAEA,mBACA,YACA,CAEA,qDACA,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CACA,UACA,CAGA,2BACA,oBAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,eAAA,CACA,iBAAA,CACA,gBAAA,CACA,cAAA,CACA,kBAAA,CACA,iBACA,CACA,oCACA,cACA,CAEA,2BACA,YACA,CAEA,4BAEA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,aACA,CAEA,qCACA,YACA,CACA,mCACA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CACA,aACA",sourcesContent:["<template>\r\n    <div id=\"drop-area\" class=\"drop-area\" :class=\"$vuetify.breakpoint.smAndDown ? ['drop-sm'] : []\">\r\n        <form class=\"drop-form\">\r\n            <input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\"\r\n                   @change=\"(e) => $emit('change', e)\" class=\"hide\">\r\n            <label class=\"drop-btn\" for=\"fileElem\">{{!yet ? 'Загрузить фото' : 'Загрузить еще'}}</label>\r\n            <p class=\"format-file-desc\">Формат – jpg, png</p>\r\n            <p class=\"file-desc hover\">Отпустите фотографию сюда</p>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"DropArea\",\r\n        data: (vm) => ({vm}),\r\n        props: ['yet'],\r\n        mounted(vm) {\r\n            let dropArea = document.getElementById('drop-area');\r\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\r\n                dropArea.addEventListener(eventName, preventDefaults, false)\r\n            })\r\n\r\n            function preventDefaults(e) {\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n            }\r\n\r\n            ['dragenter', 'dragover'].forEach(eventName => {\r\n                dropArea.addEventListener(eventName, focus, false)\r\n            });\r\n            ['dragleave', 'drop'].forEach(eventName => {\r\n                dropArea.addEventListener(eventName, unfocus, false)\r\n            });\r\n\r\n            function focus(e) {\r\n                dropArea.classList.add('focus')\r\n            }\r\n\r\n            function unfocus(e) {\r\n                dropArea.classList.remove('focus')\r\n            }\r\n\r\n            const handleDrop = (e) => {\r\n                let dt = e.dataTransfer\r\n                let files = dt.files\r\n                this.handleFiles(files)\r\n            }\r\n            dropArea.addEventListener('drop', handleDrop, false);\r\n        },\r\n        methods: {\r\n            handleFiles(files) {\r\n                this.$emit('change', {target:{files}});\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .drop-area:not(.drop-sm) {\r\n        position: relative;\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 200px;\r\n        background: #FFFFFF;\r\n        border: 1px dashed #AFAFAF;\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    #drop-area.focus {\r\n        background: #F8F8F8;\r\n    }\r\n\r\n    .hover {\r\n        display: none;\r\n    }\r\n\r\n    .focus .hide {\r\n        display: none !important;\r\n    }\r\n\r\n    .focus .hover {\r\n        display: block !important;\r\n    }\r\n\r\n    p {\r\n        margin-top: 0;\r\n    }\r\n\r\n    .drop-area:not(.drop-sm) .drop-form {\r\n        position: absolute;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 50;\r\n    }\r\n\r\n\r\n    .drop-btn {\r\n        display: inline-block;\r\n        cursor: pointer;\r\n        min-width: 150px;\r\n        border-radius: 4px;\r\n        height: 35px;\r\n        padding: 10px;\r\n        background: #F8F8F8;\r\n        font-weight: 400;\r\n        font-style: normal;\r\n        line-height: 17px;\r\n        font-size: 18px;\r\n        margin-bottom: 10px;\r\n        text-align: center;\r\n    }\r\n    .drop-sm .drop-btn{\r\n        min-width: 100%;\r\n    }\r\n\r\n    #fileElem {\r\n        display: none;\r\n    }\r\n\r\n    .file-desc {\r\n\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 16px;\r\n        line-height: 22px;\r\n        color: #4A4A4A;\r\n    }\r\n\r\n    .drop-sm .file-desc {\r\n        display: none\r\n    }\r\n    .format-file-desc {\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 14px;\r\n        line-height: 19px;\r\n        text-align: center;\r\n        color: #AFAFAF;\r\n    }\r\n</style>\r\n"],sourceRoot:""}]);const a=s},3934:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>a});var n=t(4015),o=t.n(n),i=t(3645),s=t.n(i)()(o());s.push([e.id,'.site-photo-card[data-v-503f2afb]{position:relative;width:100%;background:#fff;border-radius:8px;overflow:hidden}.site-photo-card.filled[data-v-503f2afb]{background-color:#f8f8f8}.site-photo-card.focused[data-v-503f2afb],.site-photo-card[data-v-503f2afb]:hover{box-shadow:0 0 9px hsla(0,0%,54.9%,.49);border-radius:8px}.site-photo-card[data-v-503f2afb]:after{content:"";display:block;padding-bottom:56%}.site-photo-card-actions[data-v-503f2afb]{position:absolute;right:0;cursor:pointer}.site-photo-card-content[data-v-503f2afb]{position:absolute;width:100%;height:100%;display:flex;justify-content:center;flex-direction:column;cursor:pointer}.edit-photo-icon[data-v-503f2afb]{margin-left:8px}',"",{version:3,sources:["webpack://./resources/js/components/EditPhotoCard.vue"],names:[],mappings:"AAoJA,kCACA,iBAAA,CACA,UAAA,CACA,eAAA,CAGA,iBAAA,CACA,eACA,CAEA,yCACA,wBACA,CAEA,kFACA,uCAAA,CACA,iBACA,CAEA,wCACA,UAAA,CACA,aAAA,CACA,kBACA,CAEA,0CACA,iBAAA,CACA,OAAA,CACA,cACA,CAEA,0CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,sBAAA,CACA,qBAAA,CACA,cACA,CAEA,kCACA,eACA",sourcesContent:['<template>\r\n    <div class="site-photo-card"\r\n         :class="{focused: focus, filled}">\r\n        <div class="site-photo-card-content" style="z-index: 1;">\r\n            <slot name="default">\r\n                <v-img v-if="loaded && src" :src="src" cover\r\n                       height="100%" @click="$emit(\'click\', $attrs[\'value\']); open=true"/>\r\n                <v-row v-else-if="!loaded && !error" xs="12" class="pa-8" style="align-items: center">\r\n                    <progress-bar :progress="progress"/>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <div class="site-photo-card-actions" style="z-index: 2;">\r\n            <slot name="actions">\r\n                <v-row xs="12" class="pl-5 pr-5 pt-2 justify-end">\r\n                    <v-btn fab\r\n                           small\r\n                           @click="$emit(\'delete\')"\r\n                           class="mr-3">\r\n                        <v-icon>mdi-delete</v-icon>\r\n                    </v-btn>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <v-dialog v-model="open" v-if="open" content-class="sm-photo-dialog"\r\n                  :fullscreen="true">\r\n            <div class="dialog-image">\r\n                <v-img v-if="loaded && src" :src="src" max-height="90vh" contain/>\r\n                <v-btn icon @click="$emit(\'focusOut\'); open=false;"\r\n                       color="gray"\r\n                       class="close-btn" ><v-icon>mdi-close</v-icon></v-btn>\r\n            </div>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {b64ToBlob, compress} from "../../image";\r\n    import ProgressBar from "./ProgressBar";\r\n\r\n    export default {\r\n        name: "EditPhotoCard",\r\n        components: {ProgressBar},\r\n        props: {\r\n            focus: {type: Boolean, default: false,},\r\n            preload: {type: Boolean, default: true,},\r\n            cover: {type: String, default: ""},\r\n            filled: {type: Boolean, default: false},\r\n            file: {type: File | String}\r\n        },\r\n        data: (vm) => ({\r\n            open: false,\r\n            focused: !!vm.$attrs[\'focus\'],\r\n            src: \'\',\r\n            loaded: false,\r\n            error: false,\r\n            progress: 0,\r\n            rotateTimeout: null,\r\n        }),\r\n        mounted() {\r\n            this.upload(this.file)\r\n        },\r\n        computed: {\r\n            isCover() {\r\n                return this.cover && this.src.indexOf(this.cover) !== -1\r\n            }\r\n        },\r\n        methods: {\r\n            rotate() {\r\n                if (this.rotateTimeout) {\r\n                    clearTimeout(this.rotateTimeout);\r\n                    this.rotateTimeout = null;\r\n                }\r\n                this.rotateTimeout = setTimeout(() => {\r\n                    let img = new Image();\r\n                    img.crossOrigin = "anonymous"\r\n                    img.onload = () => {\r\n                        let compressUrl = compress(img, (ctx, canvas) => {\r\n                            ctx.save();\r\n                            ctx.translate(canvas.width / 2, canvas.height / 2);\r\n                            ctx.rotate(90 * Math.PI / 180);\r\n                            ctx.drawImage(img, -img.width / 2, -img.width / 2);\r\n                            ctx.restore();\r\n                        });\r\n                        let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                        this.upload(blob, this.src.split(\'/\').reverse()[0]);\r\n                    };\r\n                    img.src = this.src;\r\n                }, 1000)\r\n            },\r\n            readLocalSrc(file) {\r\n                if (this.file instanceof Blob) {\r\n                    let reader = new FileReader();\r\n                    reader.readAsDataURL(file);\r\n                    reader.onloadend = () => {\r\n                        this.src = reader.result;\r\n                        this.$emit(\'change\', this.src)\r\n                    }\r\n                } else this.src = file;\r\n                this.loaded = true;\r\n            },\r\n            upload(file, canvasFileName) {\r\n                if (!this.preload || !(file instanceof Blob)) {\r\n                    this.readLocalSrc(file);\r\n                    return;\r\n                }\r\n                var xhr = new XMLHttpRequest()\r\n                xhr.responseType = \'json\';\r\n                var formData = new FormData()\r\n                formData.append(\'file\', file, canvasFileName || file.name)\r\n                xhr.open(\'POST\', \'/photo/upload\', true)\r\n                xhr.upload.addEventListener("progress", (e) => {\r\n                    this.progress = (e.loaded * 100.0 / e.total) || 100;\r\n                })\r\n                xhr.addEventListener(\'readystatechange\', (e) => {\r\n                    if (xhr.readyState == 4 && xhr.status == 200) {\r\n                        this.src = e.target.response.url;\r\n                        this.$emit(\'change\', e.target.response.url);\r\n                        this.loaded = true;\r\n                    } else if (xhr.readyState == 4 && xhr.status != 200) {\r\n                        if (xhr.status == 400 && !canvasFileName) {\r\n                            //Для файлов с битым маймтипом рисуем на канве и отправляем результат\r\n                            let img = new Image();\r\n                            img.onload = () => {\r\n                                let compressUrl = compress(img);\r\n                                let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                                this.upload(blob, file.name);\r\n                            };\r\n                            img.src = URL.createObjectURL(file);\r\n                            return;\r\n                        }\r\n                        this.readLocalSrc(file)\r\n                        this.error = this.loaded = true;\r\n                    }\r\n\r\n                })\r\n                xhr.send(formData)\r\n            }\r\n        },\r\n        watch: {\r\n            file(nv) {\r\n                if (typeof nv === \'string\') this.src = nv;\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .site-photo-card {\r\n        position: relative;\r\n        width: 100%;\r\n        background: #FFFFFF;\r\n        /* Grey 800 */\r\n\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .site-photo-card.filled {\r\n        background-color: #F8F8F8;\r\n    }\r\n\r\n    .site-photo-card.focused, .site-photo-card:hover {\r\n        box-shadow: 0px 0px 9px rgba(140, 140, 140, 0.49);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    .site-photo-card:after {\r\n        content: "";\r\n        display: block;\r\n        padding-bottom: 56%; /* 16/9 */\r\n    }\r\n\r\n    .site-photo-card-actions {\r\n        position: absolute;\r\n        right: 0;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .site-photo-card-content {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .edit-photo-icon {\r\n        margin-left: 8px;\r\n    }\r\n</style>\r\n<style>\r\n\r\n    .sm-photo-dialog .photo-cover {\r\n        position: absolute;\r\n        top: 32px;\r\n        left: 32px;\r\n        z-index: 101;\r\n    }\r\n\r\n    .sm-photo-dialog .close-btn {\r\n        position: absolute;\r\n        top: 32px;\r\n        right: 32px;\r\n    }\r\n\r\n    .sm-photo-dialog .bottom {\r\n        right: 32px;\r\n        bottom: 32px;\r\n        position: absolute;\r\n        width: fit-content;\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    .sm-photo-dialog {\r\n        position: absolute;\r\n        z-index: 100;\r\n        display: flex;\r\n        box-shadow: none !important;\r\n        background: rgba(105, 109, 116, 0.6);\r\n        backdrop-filter: blur(10px);\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .dialog-image .v-image{\r\n        border-radius: 8px;\r\n    }\r\n    .dialog-image {\r\n        width: fit-content;\r\n        height: fit-content;\r\n        max-width: 100%;\r\n        position: relative;\r\n        padding: 16px;\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const a=s},2446:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>a});var n=t(4015),o=t.n(n),i=t(3645),s=t.n(i)()(o());s.push([e.id,".sm-photo-dialog .photo-cover{position:absolute;top:32px;left:32px;z-index:101}.sm-photo-dialog .close-btn{position:absolute;top:32px;right:32px}.sm-photo-dialog .bottom{right:32px;bottom:32px;position:absolute;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:flex;flex-direction:row}.sm-photo-dialog{position:absolute;z-index:100;display:flex;box-shadow:none!important;background:rgba(105,109,116,.6);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);align-items:center;justify-content:center}.dialog-image,.dialog-image .v-image{border-radius:8px}.dialog-image{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;max-width:100%;position:relative;padding:16px;overflow:hidden}","",{version:3,sources:["webpack://./resources/js/components/EditPhotoCard.vue"],names:[],mappings:"AAmMA,8BACA,iBAAA,CACA,QAAA,CACA,SAAA,CACA,WACA,CAEA,4BACA,iBAAA,CACA,QAAA,CACA,UACA,CAEA,yBACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,yBAAA,CAAA,sBAAA,CAAA,iBAAA,CACA,YAAA,CACA,kBACA,CAEA,iBACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,yBAAA,CACA,+BAAA,CACA,kCAAA,CAAA,0BAAA,CACA,kBAAA,CACA,sBACA,CAKA,qCAFA,iBAUA,CARA,cACA,yBAAA,CAAA,sBAAA,CAAA,iBAAA,CACA,0BAAA,CAAA,uBAAA,CAAA,kBAAA,CACA,cAAA,CACA,iBAAA,CACA,YAAA,CAEA,eACA",sourcesContent:['<template>\r\n    <div class="site-photo-card"\r\n         :class="{focused: focus, filled}">\r\n        <div class="site-photo-card-content" style="z-index: 1;">\r\n            <slot name="default">\r\n                <v-img v-if="loaded && src" :src="src" cover\r\n                       height="100%" @click="$emit(\'click\', $attrs[\'value\']); open=true"/>\r\n                <v-row v-else-if="!loaded && !error" xs="12" class="pa-8" style="align-items: center">\r\n                    <progress-bar :progress="progress"/>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <div class="site-photo-card-actions" style="z-index: 2;">\r\n            <slot name="actions">\r\n                <v-row xs="12" class="pl-5 pr-5 pt-2 justify-end">\r\n                    <v-btn fab\r\n                           small\r\n                           @click="$emit(\'delete\')"\r\n                           class="mr-3">\r\n                        <v-icon>mdi-delete</v-icon>\r\n                    </v-btn>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <v-dialog v-model="open" v-if="open" content-class="sm-photo-dialog"\r\n                  :fullscreen="true">\r\n            <div class="dialog-image">\r\n                <v-img v-if="loaded && src" :src="src" max-height="90vh" contain/>\r\n                <v-btn icon @click="$emit(\'focusOut\'); open=false;"\r\n                       color="gray"\r\n                       class="close-btn" ><v-icon>mdi-close</v-icon></v-btn>\r\n            </div>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {b64ToBlob, compress} from "../../image";\r\n    import ProgressBar from "./ProgressBar";\r\n\r\n    export default {\r\n        name: "EditPhotoCard",\r\n        components: {ProgressBar},\r\n        props: {\r\n            focus: {type: Boolean, default: false,},\r\n            preload: {type: Boolean, default: true,},\r\n            cover: {type: String, default: ""},\r\n            filled: {type: Boolean, default: false},\r\n            file: {type: File | String}\r\n        },\r\n        data: (vm) => ({\r\n            open: false,\r\n            focused: !!vm.$attrs[\'focus\'],\r\n            src: \'\',\r\n            loaded: false,\r\n            error: false,\r\n            progress: 0,\r\n            rotateTimeout: null,\r\n        }),\r\n        mounted() {\r\n            this.upload(this.file)\r\n        },\r\n        computed: {\r\n            isCover() {\r\n                return this.cover && this.src.indexOf(this.cover) !== -1\r\n            }\r\n        },\r\n        methods: {\r\n            rotate() {\r\n                if (this.rotateTimeout) {\r\n                    clearTimeout(this.rotateTimeout);\r\n                    this.rotateTimeout = null;\r\n                }\r\n                this.rotateTimeout = setTimeout(() => {\r\n                    let img = new Image();\r\n                    img.crossOrigin = "anonymous"\r\n                    img.onload = () => {\r\n                        let compressUrl = compress(img, (ctx, canvas) => {\r\n                            ctx.save();\r\n                            ctx.translate(canvas.width / 2, canvas.height / 2);\r\n                            ctx.rotate(90 * Math.PI / 180);\r\n                            ctx.drawImage(img, -img.width / 2, -img.width / 2);\r\n                            ctx.restore();\r\n                        });\r\n                        let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                        this.upload(blob, this.src.split(\'/\').reverse()[0]);\r\n                    };\r\n                    img.src = this.src;\r\n                }, 1000)\r\n            },\r\n            readLocalSrc(file) {\r\n                if (this.file instanceof Blob) {\r\n                    let reader = new FileReader();\r\n                    reader.readAsDataURL(file);\r\n                    reader.onloadend = () => {\r\n                        this.src = reader.result;\r\n                        this.$emit(\'change\', this.src)\r\n                    }\r\n                } else this.src = file;\r\n                this.loaded = true;\r\n            },\r\n            upload(file, canvasFileName) {\r\n                if (!this.preload || !(file instanceof Blob)) {\r\n                    this.readLocalSrc(file);\r\n                    return;\r\n                }\r\n                var xhr = new XMLHttpRequest()\r\n                xhr.responseType = \'json\';\r\n                var formData = new FormData()\r\n                formData.append(\'file\', file, canvasFileName || file.name)\r\n                xhr.open(\'POST\', \'/photo/upload\', true)\r\n                xhr.upload.addEventListener("progress", (e) => {\r\n                    this.progress = (e.loaded * 100.0 / e.total) || 100;\r\n                })\r\n                xhr.addEventListener(\'readystatechange\', (e) => {\r\n                    if (xhr.readyState == 4 && xhr.status == 200) {\r\n                        this.src = e.target.response.url;\r\n                        this.$emit(\'change\', e.target.response.url);\r\n                        this.loaded = true;\r\n                    } else if (xhr.readyState == 4 && xhr.status != 200) {\r\n                        if (xhr.status == 400 && !canvasFileName) {\r\n                            //Для файлов с битым маймтипом рисуем на канве и отправляем результат\r\n                            let img = new Image();\r\n                            img.onload = () => {\r\n                                let compressUrl = compress(img);\r\n                                let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                                this.upload(blob, file.name);\r\n                            };\r\n                            img.src = URL.createObjectURL(file);\r\n                            return;\r\n                        }\r\n                        this.readLocalSrc(file)\r\n                        this.error = this.loaded = true;\r\n                    }\r\n\r\n                })\r\n                xhr.send(formData)\r\n            }\r\n        },\r\n        watch: {\r\n            file(nv) {\r\n                if (typeof nv === \'string\') this.src = nv;\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .site-photo-card {\r\n        position: relative;\r\n        width: 100%;\r\n        background: #FFFFFF;\r\n        /* Grey 800 */\r\n\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .site-photo-card.filled {\r\n        background-color: #F8F8F8;\r\n    }\r\n\r\n    .site-photo-card.focused, .site-photo-card:hover {\r\n        box-shadow: 0px 0px 9px rgba(140, 140, 140, 0.49);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    .site-photo-card:after {\r\n        content: "";\r\n        display: block;\r\n        padding-bottom: 56%; /* 16/9 */\r\n    }\r\n\r\n    .site-photo-card-actions {\r\n        position: absolute;\r\n        right: 0;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .site-photo-card-content {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .edit-photo-icon {\r\n        margin-left: 8px;\r\n    }\r\n</style>\r\n<style>\r\n\r\n    .sm-photo-dialog .photo-cover {\r\n        position: absolute;\r\n        top: 32px;\r\n        left: 32px;\r\n        z-index: 101;\r\n    }\r\n\r\n    .sm-photo-dialog .close-btn {\r\n        position: absolute;\r\n        top: 32px;\r\n        right: 32px;\r\n    }\r\n\r\n    .sm-photo-dialog .bottom {\r\n        right: 32px;\r\n        bottom: 32px;\r\n        position: absolute;\r\n        width: fit-content;\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    .sm-photo-dialog {\r\n        position: absolute;\r\n        z-index: 100;\r\n        display: flex;\r\n        box-shadow: none !important;\r\n        background: rgba(105, 109, 116, 0.6);\r\n        backdrop-filter: blur(10px);\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .dialog-image .v-image{\r\n        border-radius: 8px;\r\n    }\r\n    .dialog-image {\r\n        width: fit-content;\r\n        height: fit-content;\r\n        max-width: 100%;\r\n        position: relative;\r\n        padding: 16px;\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const a=s},7609:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>a});var n=t(4015),o=t.n(n),i=t(3645),s=t.n(i)()(o());s.push([e.id,".full[data-v-6ebf4eaa]{width:100%;position:relative;background:#e1e1e1}.active[data-v-6ebf4eaa],.full[data-v-6ebf4eaa]{height:4px;border-radius:2px}.active[data-v-6ebf4eaa]{background:#2e3e4e!important}","",{version:3,sources:["webpack://./resources/js/components/ProgressBar.vue"],names:[],mappings:"AAgBA,uBACA,UAAA,CACA,iBAAA,CAEA,kBAEA,CACA,gDAJA,UAAA,CAEA,iBAMA,CAJA,yBAEA,4BAEA",sourcesContent:['<template>\r\n    <v-row class="ma-0">\r\n        <div class="full">\r\n            <div class="active" :style="{width: progress+\'%\'}"/>\r\n        </div>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: [\'progress\'],\r\n        name: "ProgressBar"\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .full{\r\n        width: 100%;\r\n        position: relative;\r\n        height: 4px;\r\n        background: #E1E1E1;\r\n        border-radius: 2px;\r\n    }\r\n    .active{\r\n        height: 4px;\r\n        background: #2e3e4e !important;\r\n        border-radius: 2px;\r\n    }\r\n</style>'],sourceRoot:""}]);const a=s},2473:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>a});var n=t(4015),o=t.n(n),i=t(3645),s=t.n(i)()(o());s.push([e.id,".photo-input[data-v-710130a2]{position:absolute;visibility:hidden}","",{version:3,sources:["webpack://./resources/js/components/photo-loader.vue"],names:[],mappings:"AA2HA,8BACA,iBAAA,CACA,iBACA",sourcesContent:['<template>\r\n    <v-card class="d-flex flex-column pt-4 pb-4" justify-center align-center elevation="0">\r\n        <div v-if="one && loadedPhotos.length" class="text-center">{{loadedPhotos[0].name}}</div>\r\n        <v-row v-if="!one" class="">\r\n            <v-col xs="6" md="3" sm="6" v-for="(photo, i) in carouselPhotos" :key="i" v-if="!!carouselPhotos[i]">\r\n                <edit-photo-card\r\n                        :preload="preload"\r\n                        :filled="true"\r\n                        :file="photo"\r\n                        @delete="() => deletePhoto(photo, i)"\r\n                        contain\r\n                />\r\n            </v-col>\r\n            <v-col xs="6" md="3" sm="6">\r\n                <edit-photo-card\r\n                    @click="() => $refs.btn.click()">\r\n                    <drop-area @change="addPhoto" :yet="carouselPhotos.length"/>\r\n                    <template v-slot:actions>\r\n                        <div class="hidden"></div>\r\n                    </template>\r\n                </edit-photo-card>\r\n            </v-col>\r\n        </v-row>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\n\r\n    import EditPhotoCard from "./EditPhotoCard";\r\n    import DropArea from "./DropArea";\r\n\r\n    export default {\r\n        name: \'photo-loader\',\r\n        props: {\r\n            radius: {\r\n                type: Number,\r\n            },\r\n            one: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            photos: {\r\n                type: Array,\r\n                default: () => ([]),\r\n            },\r\n            preload: {\r\n                type: Boolean,\r\n                default: false,\r\n            }\r\n        },\r\n        components: {DropArea, EditPhotoCard},\r\n        data: (vm) => ({\r\n                n: 0,\r\n                photo: \'\',\r\n                loadedPhotos: [],\r\n                deleted: [],\r\n                carouselPhotos: vm.photos,\r\n                fileImg: null,\r\n        }),\r\n        updated() {\r\n        },\r\n        methods: {\r\n            deletePhoto(photo, cpi) {\r\n                if (photo.name) {\r\n                    this.loadedPhotos.forEach((file, i) => {\r\n                        if (file.name === photo.name) delete this.loadedPhotos[i];\r\n                    });\r\n                } else {\r\n                    this.deleted.push(this.photos[cpi].id);\r\n                }\r\n                delete this.carouselPhotos[cpi];\r\n                this.carouselPhotos = [...this.carouselPhotos];\r\n            },\r\n            getPhotos() {\r\n                return this.loadedPhotos.concat(this.deleted);\r\n            },\r\n            getFirst() {\r\n                return this.loadedPhotos[0];\r\n            },\r\n            returnFormData(val) {\r\n                this.$emit(\'save-photo\', val)\r\n            },\r\n            updatePhoto(val) {\r\n                this.photo = val\r\n                this.showCropperDialog = false\r\n            },\r\n            clickOnInput() {\r\n                document.getElementById(\'files\').files = (new DataTransfer()).files;\r\n                document.getElementById(\'files\').click()\r\n\r\n            },\r\n            addPhoto(event) {\r\n                [...event.target.files].forEach((photo) => {\r\n                    this.fileImg = photo;\r\n                    if (this.fileImg.size > 5024000) {\r\n                        this.$root.$children[0].snackbarText = \'Размер файла не может быть больше 5МБ\'\r\n                        this.$root.$children[0].snackbar = true\r\n                        return;\r\n                    }\r\n                    if (this.loadedPhotos.length > 10) {\r\n                        this.$root.$children[0].snackbarText = \'Вы не можете загрузить больше 10 фотографий\'\r\n                        this.$root.$children[0].snackbar = true\r\n                        return;\r\n                    }\r\n                    this.carouselPhotos = [\r\n                        ...this.carouselPhotos,\r\n                        this.preload ? URL.createObjectURL(this.fileImg) : this.fileImg\r\n                    ];\r\n                    this.loadedPhotos.push(this.fileImg)\r\n                    this.n = this.loadedPhotos.length - 1\r\n                    this.fileImg = null;\r\n                })\r\n            },\r\n        },\r\n        watch: {\r\n            photos(nv) {\r\n                this.carouselPhotos = nv.map((file) => file.file);\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .photo-input {\r\n        position: absolute;\r\n        visibility: hidden;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const a=s},8243:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>a});var n=t(4015),o=t.n(n),i=t(3645),s=t.n(i)()(o());s.push([e.id,".description.v-text-field>.v-input__control>.v-input__slot:after,.description.v-text-field>.v-input__control>.v-input__slot:before,.description .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/PostEdit.vue"],names:[],mappings:"AA+HA,6KAEA,sBACA",sourcesContent:['<template>\r\n    <v-container\r\n            class="cover">\r\n        <v-toolbar-title align="center" justify="center" class="mb-2"\r\n        v-text="$route.params.id  == 0 ? \'Добавление новости\' :  \'Редактирование новости\'">\r\n        </v-toolbar-title>\r\n        <v-text-field\r\n            type="text"\r\n            name="title"\r\n            label="Заголовок"\r\n            v-model="post.title"\r\n            :error-messages="messages.title"\r\n            >\r\n        </v-text-field>\r\n        <v-textarea\r\n                name="description"\r\n                label="Описание"\r\n                hint="Hint text"\r\n                :value="\' \'"\r\n                class="description "\r\n                :error-messages="messages.description"\r\n        ></v-textarea>\r\n        <editor\r\n                api-key="kapr0kh0v3vscnkppsxgig98vf6mgitaii8auw3p2pin1c5t"\r\n                class="mt-2"\r\n                v-model="post.description"\r\n        >\r\n        </editor>\r\n        <v-spacer/>\r\n        <photo-loader ref="loader" :photos="post.photos"/>\r\n        <v-btn class="save-btn-text"\r\n               @click="() => post.id ? update() : create()"\r\n               color="success"\r\n               :disabled="!(post.id> 0) && (!post.description || !post.title)">\r\n            Сохранить\r\n        </v-btn>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n    import Editor from \'@tinymce/tinymce-vue\';\r\n    import PhotoLoader from \'@/components/photo-loader\'\r\n    export default {\r\n        name: "PostAdd",\r\n        components: {\r\n            Editor,\r\n            PhotoLoader\r\n        },\r\n        data: (vm) => {\r\n            return {\r\n                post: {\r\n                    id: Number.parseInt(vm.$route.params.id),\r\n                    title: \'\',\r\n                    description: \'\',\r\n                },\r\n                messages: {\r\n                    title: \'\',\r\n                    description: \'\',\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            let modelId = this.$route.params.id;\r\n            if (modelId != 0) {\r\n                window.axios.get(\'/post/\'+ modelId).then((response) => {\r\n                    this.post = response.data.data;\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                    this.$root.$children[0].snackbarText = e?.response?.error || \'Произошла ошибка\';\r\n                    this.$root.$children[0].snackbar = true;\r\n                });\r\n            }\r\n        },\r\n        methods: {\r\n            create() {\r\n                window.axios.post(\'/post\', this.post)\r\n                    .then((r) => {\r\n                        this.post.id = r.data.data.id;\r\n                        this.update();\r\n                    }).catch((e) => {\r\n                    if (e.response && e.response.status === 422) {\r\n                        let errors = e.response.data.errors\r\n                        Object.keys(this.messages).forEach((k)=> {\r\n                            this.messages[k] = errors[k]?.[0] || \'\';\r\n                        });\r\n                    }\r\n                })\r\n            },\r\n             update() {\r\n                window.axios.put(\'/post/\'+ this.post.id, this.post)\r\n                    .then((r) => {\r\n                        let newPhotos = this.$refs.loader.getPhotos();\r\n                        if (newPhotos.length) {\r\n                            const formData = new FormData()\r\n                            newPhotos.forEach((photo, i) => {\r\n                                if (photo.name) formData.append(\'post_photos[\'+i+\']\', photo, photo.name)\r\n                                else formData.append(\'delete_photos[\'+i+\']\', photo)\r\n                            })\r\n                            formData.append(\'_method\', \'PUT\')\r\n                            try {\r\n                                window.axios.post(\'/post/\'+this.post.id, formData).then(() => {\r\n                                    this.$router.push({name: "posts"});\r\n                                })\r\n                            } catch (e) {\r\n                                this.$root.$children[0].snackbarText =  `Ошибка сохранения фотографии`\r\n                                this.$root.$children[0].snackbar = true\r\n                                this.$router.push({name: "posts"});\r\n                            }\r\n                        }\r\n                    }).catch((e) => {\r\n                    console.log(e);\r\n                    if (e.response && e.response.status === 422) {\r\n                        let errors = e.response.data.errors\r\n                        Object.keys(this.messages).forEach((k)=> {\r\n                            this.messages[k] = errors[k]?.[0] || \'\';\r\n                        });\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .description .v-text-field__slot textarea {\r\n        display: none !important;\r\n    }\r\n    .description.v-text-field>.v-input__control>.v-input__slot:after ,\r\n    .description.v-text-field>.v-input__control>.v-input__slot:before{\r\n        display: none !important;\r\n    }\r\n</style>'],sourceRoot:""}]);const a=s},4208:(e,r,t)=>{"use strict";t.d(r,{Z:()=>f});var n=function(e,r){var t=document.createElement("canvas"),n=t.getContext("2d"),o=e.width,i=e.height;t.width=o,t.height=i,n.fillStyle="#fff",n.fillRect(0,0,t.width,t.height),r?r(n,t):n.drawImage(e,0,0,t.width,t.height);var s=t.toDataURL("image/jpeg",.4);return t=n=null,e=null,s},o=function(e,r){r=r||"";for(var t=atob(e),n=[],o=new ArrayBuffer(t.length),i=new Uint8Array(o),s=0;s<t.length;s++)i[s]=t.charCodeAt(s);return n.push(i),new Blob(n,{type:r})};const i={props:["progress"],name:"ProgressBar"};t(4865);var s=t(1900);const a={name:"EditPhotoCard",components:{ProgressBar:(0,s.Z)(i,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("v-row",{staticClass:"ma-0"},[t("div",{staticClass:"full"},[t("div",{staticClass:"active",style:{width:e.progress+"%"}})])])}),[],!1,null,"6ebf4eaa",null).exports},props:{focus:{type:Boolean,default:!1},preload:{type:Boolean,default:!0},cover:{type:String,default:""},filled:{type:Boolean,default:!1},file:{type:File|String}},data:function(e){return{open:!1,focused:!!e.$attrs.focus,src:"",loaded:!1,error:!1,progress:0,rotateTimeout:null}},mounted:function(){this.upload(this.file)},computed:{isCover:function(){return this.cover&&-1!==this.src.indexOf(this.cover)}},methods:{rotate:function(){var e=this;this.rotateTimeout&&(clearTimeout(this.rotateTimeout),this.rotateTimeout=null),this.rotateTimeout=setTimeout((function(){var r=new Image;r.crossOrigin="anonymous",r.onload=function(){var t=n(r,(function(e,t){e.save(),e.translate(t.width/2,t.height/2),e.rotate(90*Math.PI/180),e.drawImage(r,-r.width/2,-r.width/2),e.restore()})),i=o(t.split(",")[1],"image/jpeg");e.upload(i,e.src.split("/").reverse()[0])},r.src=e.src}),1e3)},readLocalSrc:function(e){var r=this;if(this.file instanceof Blob){var t=new FileReader;t.readAsDataURL(e),t.onloadend=function(){r.src=t.result,r.$emit("change",r.src)}}else this.src=e;this.loaded=!0},upload:function(e,r){var t=this;if(this.preload&&e instanceof Blob){var i=new XMLHttpRequest;i.responseType="json";var s=new FormData;s.append("file",e,r||e.name),i.open("POST","/photo/upload",!0),i.upload.addEventListener("progress",(function(e){t.progress=100*e.loaded/e.total||100})),i.addEventListener("readystatechange",(function(s){if(4==i.readyState&&200==i.status)t.src=s.target.response.url,t.$emit("change",s.target.response.url),t.loaded=!0;else if(4==i.readyState&&200!=i.status){if(400==i.status&&!r){var a=new Image;return a.onload=function(){var r=n(a),i=o(r.split(",")[1],"image/jpeg");t.upload(i,e.name)},void(a.src=URL.createObjectURL(e))}t.readLocalSrc(e),t.error=t.loaded=!0}})),i.send(s)}else this.readLocalSrc(e)}},watch:{file:function(e){"string"==typeof e&&(this.src=e)}}};t(2380),t(4552);const l=(0,s.Z)(a,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"site-photo-card",class:{focused:e.focus,filled:e.filled}},[t("div",{staticClass:"site-photo-card-content",staticStyle:{"z-index":"1"}},[e._t("default",(function(){return[e.loaded&&e.src?t("v-img",{attrs:{src:e.src,cover:"",height:"100%"},on:{click:function(r){e.$emit("click",e.$attrs.value),e.open=!0}}}):e.loaded||e.error?e._e():t("v-row",{staticClass:"pa-8",staticStyle:{"align-items":"center"},attrs:{xs:"12"}},[t("progress-bar",{attrs:{progress:e.progress}})],1)]}))],2),e._v(" "),t("div",{staticClass:"site-photo-card-actions",staticStyle:{"z-index":"2"}},[e._t("actions",(function(){return[t("v-row",{staticClass:"pl-5 pr-5 pt-2 justify-end",attrs:{xs:"12"}},[t("v-btn",{staticClass:"mr-3",attrs:{fab:"",small:""},on:{click:function(r){return e.$emit("delete")}}},[t("v-icon",[e._v("mdi-delete")])],1)],1)]}))],2),e._v(" "),e.open?t("v-dialog",{attrs:{"content-class":"sm-photo-dialog",fullscreen:!0},model:{value:e.open,callback:function(r){e.open=r},expression:"open"}},[t("div",{staticClass:"dialog-image"},[e.loaded&&e.src?t("v-img",{attrs:{src:e.src,"max-height":"90vh",contain:""}}):e._e(),e._v(" "),t("v-btn",{staticClass:"close-btn",attrs:{icon:"",color:"gray"},on:{click:function(r){e.$emit("focusOut"),e.open=!1}}},[t("v-icon",[e._v("mdi-close")])],1)],1)]):e._e()],1)}),[],!1,null,"503f2afb",null).exports;const d={name:"DropArea",data:function(e){return{vm:e}},props:["yet"],mounted:function(e){var r=this,t=document.getElementById("drop-area");function n(e){e.preventDefault(),e.stopPropagation()}function o(e){t.classList.add("focus")}function i(e){t.classList.remove("focus")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.addEventListener(e,n,!1)})),["dragenter","dragover"].forEach((function(e){t.addEventListener(e,o,!1)})),["dragleave","drop"].forEach((function(e){t.addEventListener(e,i,!1)}));t.addEventListener("drop",(function(e){var t=e.dataTransfer.files;r.handleFiles(t)}),!1)},methods:{handleFiles:function(e){this.$emit("change",{target:{files:e}})}}};t(8671);const c=(0,s.Z)(d,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"drop-area",class:e.$vuetify.breakpoint.smAndDown?["drop-sm"]:[],attrs:{id:"drop-area"}},[t("form",{staticClass:"drop-form"},[t("input",{staticClass:"hide",attrs:{type:"file",id:"fileElem",multiple:"",accept:"image/*"},on:{change:function(r){return e.$emit("change",r)}}}),e._v(" "),t("label",{staticClass:"drop-btn",attrs:{for:"fileElem"}},[e._v(e._s(e.yet?"Загрузить еще":"Загрузить фото"))]),e._v(" "),t("p",{staticClass:"format-file-desc"},[e._v("Формат – jpg, png")]),e._v(" "),t("p",{staticClass:"file-desc hover"},[e._v("Отпустите фотографию сюда")])])])}),[],!1,null,"ee4fed0c",null).exports;function p(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,r){if(!e)return;if("string"==typeof e)return u(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return u(e,r)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}const h={name:"photo-loader",props:{radius:{type:Number},one:{type:Boolean,default:!1},photos:{type:Array,default:function(){return[]}},preload:{type:Boolean,default:!1}},components:{DropArea:c,EditPhotoCard:l},data:function(e){return{n:0,photo:"",loadedPhotos:[],deleted:[],carouselPhotos:e.photos,fileImg:null}},updated:function(){},methods:{deletePhoto:function(e,r){var t=this;e.name?this.loadedPhotos.forEach((function(r,n){r.name===e.name&&delete t.loadedPhotos[n]})):this.deleted.push(this.photos[r].id),delete this.carouselPhotos[r],this.carouselPhotos=p(this.carouselPhotos)},getPhotos:function(){return this.loadedPhotos.concat(this.deleted)},getFirst:function(){return this.loadedPhotos[0]},returnFormData:function(e){this.$emit("save-photo",e)},updatePhoto:function(e){this.photo=e,this.showCropperDialog=!1},clickOnInput:function(){document.getElementById("files").files=(new DataTransfer).files,document.getElementById("files").click()},addPhoto:function(e){var r=this;p(e.target.files).forEach((function(e){return r.fileImg=e,r.fileImg.size>5024e3?(r.$root.$children[0].snackbarText="Размер файла не может быть больше 5МБ",void(r.$root.$children[0].snackbar=!0)):r.loadedPhotos.length>10?(r.$root.$children[0].snackbarText="Вы не можете загрузить больше 10 фотографий",void(r.$root.$children[0].snackbar=!0)):(r.carouselPhotos=[].concat(p(r.carouselPhotos),[r.preload?URL.createObjectURL(r.fileImg):r.fileImg]),r.loadedPhotos.push(r.fileImg),r.n=r.loadedPhotos.length-1,void(r.fileImg=null))}))}},watch:{photos:function(e){this.carouselPhotos=e.map((function(e){return e.file}))}}};t(8126);const f=(0,s.Z)(h,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("v-card",{staticClass:"d-flex flex-column pt-4 pb-4",attrs:{"justify-center":"","align-center":"",elevation:"0"}},[e.one&&e.loadedPhotos.length?t("div",{staticClass:"text-center"},[e._v(e._s(e.loadedPhotos[0].name))]):e._e(),e._v(" "),e.one?e._e():t("v-row",{},[e._l(e.carouselPhotos,(function(r,n){return e.carouselPhotos[n]?t("v-col",{key:n,attrs:{xs:"6",md:"3",sm:"6"}},[t("edit-photo-card",{attrs:{preload:e.preload,filled:!0,file:r,contain:""},on:{delete:function(){return e.deletePhoto(r,n)}}})],1):e._e()})),e._v(" "),t("v-col",{attrs:{xs:"6",md:"3",sm:"6"}},[t("edit-photo-card",{on:{click:function(){return e.$refs.btn.click()}},scopedSlots:e._u([{key:"actions",fn:function(){return[t("div",{staticClass:"hidden"})]},proxy:!0}],null,!1,810021170)},[t("drop-area",{attrs:{yet:e.carouselPhotos.length},on:{change:e.addPhoto}})],1)],1)],2)],1)}),[],!1,null,"710130a2",null).exports},1450:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>s});var n=t(5846),o=t(4208);const i={name:"PostAdd",components:{Editor:n.Z,PhotoLoader:o.Z},data:function(e){return{post:{id:Number.parseInt(e.$route.params.id),title:"",description:""},messages:{title:"",description:""}}},mounted:function(){var e=this,r=this.$route.params.id;0!=r&&window.axios.get("/post/"+r).then((function(r){e.post=r.data.data})).catch((function(r){var t;console.log(r),e.$root.$children[0].snackbarText=(null==r||null===(t=r.response)||void 0===t?void 0:t.error)||"Произошла ошибка",e.$root.$children[0].snackbar=!0}))},methods:{create:function(){var e=this;window.axios.post("/post",this.post).then((function(r){e.post.id=r.data.data.id,e.update()})).catch((function(r){if(r.response&&422===r.response.status){var t=r.response.data.errors;Object.keys(e.messages).forEach((function(r){var n;e.messages[r]=(null===(n=t[r])||void 0===n?void 0:n[0])||""}))}}))},update:function(){var e=this;window.axios.put("/post/"+this.post.id,this.post).then((function(r){var t=e.$refs.loader.getPhotos();if(t.length){var n=new FormData;t.forEach((function(e,r){e.name?n.append("post_photos["+r+"]",e,e.name):n.append("delete_photos["+r+"]",e)})),n.append("_method","PUT");try{window.axios.post("/post/"+e.post.id,n).then((function(){e.$router.push({name:"posts"})}))}catch(r){e.$root.$children[0].snackbarText="Ошибка сохранения фотографии",e.$root.$children[0].snackbar=!0,e.$router.push({name:"posts"})}}})).catch((function(r){if(console.log(r),r.response&&422===r.response.status){var t=r.response.data.errors;Object.keys(e.messages).forEach((function(r){var n;e.messages[r]=(null===(n=t[r])||void 0===n?void 0:n[0])||""}))}}))}}};t(2591);const s=(0,t(1900).Z)(i,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("v-container",{staticClass:"cover"},[t("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s(0==e.$route.params.id?"Добавление новости":"Редактирование новости")}}),e._v(" "),t("v-text-field",{attrs:{type:"text",name:"title",label:"Заголовок","error-messages":e.messages.title},model:{value:e.post.title,callback:function(r){e.$set(e.post,"title",r)},expression:"post.title"}}),e._v(" "),t("v-textarea",{staticClass:"description ",attrs:{name:"description",label:"Описание",hint:"Hint text",value:" ","error-messages":e.messages.description}}),e._v(" "),t("editor",{staticClass:"mt-2",attrs:{"api-key":"kapr0kh0v3vscnkppsxgig98vf6mgitaii8auw3p2pin1c5t"},model:{value:e.post.description,callback:function(r){e.$set(e.post,"description",r)},expression:"post.description"}}),e._v(" "),t("v-spacer"),e._v(" "),t("photo-loader",{ref:"loader",attrs:{photos:e.post.photos}}),e._v(" "),t("v-btn",{staticClass:"save-btn-text",attrs:{color:"success",disabled:!(e.post.id>0||e.post.description&&e.post.title)},on:{click:function(){return e.post.id?e.update():e.create()}}},[e._v("\n        Сохранить\n    ")])],1)}),[],!1,null,null,null).exports},8671:(e,r,t)=>{var n=t(4539);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("01e09b4c",n,!0,{})},2380:(e,r,t)=>{var n=t(3934);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("736a53c3",n,!0,{})},4552:(e,r,t)=>{var n=t(2446);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("08c2778c",n,!0,{})},4865:(e,r,t)=>{var n=t(7609);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("10dd9cee",n,!0,{})},8126:(e,r,t)=>{var n=t(2473);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("11ea50ce",n,!0,{})},2591:(e,r,t)=>{var n=t(8243);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("19a4d546",n,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,