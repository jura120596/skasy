(self.webpackChunk=self.webpackChunk||[]).push([[856],{8097:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var r=n(4015),s=n.n(r),a=n(3645),l=n.n(a)()(s());l.push([e.id,".place.v-text-field>.v-input__control>.v-input__slot:after,.place.v-text-field>.v-input__control>.v-input__slot:before,.place .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/BusEventEdit.vue"],names:[],mappings:"AAkFA,2JAEA,sBACA",sourcesContent:['<template>\r\n    <v-container\r\n            class="cover">\r\n        <v-toolbar-title align="center" justify="center" class="mb-2"\r\n        v-text="\'Добавление рапсисания\'">\r\n        </v-toolbar-title>\r\n        <v-text-field\r\n            type="text"\r\n            name="title"\r\n            label="Мрашрут"\r\n            v-model="event.title"\r\n            :error-messages="messages.title"\r\n            >\r\n        </v-text-field>\r\n        <v-text-field\r\n                name="place"\r\n                label="Остановка"\r\n                v-model="event.place"\r\n                :error-messages="messages.place"\r\n        ></v-text-field>\r\n        <v-text-field\r\n                name="date"\r\n                label="Время отправления"\r\n                v-model="event.time"\r\n                :error-messages="messages.time"\r\n        ></v-text-field>\r\n        <v-spacer/>\r\n        <v-btn class="save-btn"\r\n               color="success"\r\n               fab\r\n               @click="create"\r\n               :disabled="!(event.place && event.title && event.time)"\r\n               dark>\r\n            <v-icon>mdi-plus</v-icon>\r\n        </v-btn>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: "PostAdd",\r\n        components: {\r\n        },\r\n        data: (vm) => {\r\n            return {\r\n                event: {\r\n                    id: vm.$route.params.id,\r\n                    title: \'\',\r\n                    place: \'\',\r\n                    time: \'\',\r\n                },\r\n                messages: {\r\n                    title: \'\',\r\n                    place: \'\',\r\n                    time:\'\',\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n        },\r\n        methods: {\r\n            create() {\r\n                window.axios.post(\'/bus/event\', this.event)\r\n                    .then((r) => {\r\n                        this.$router.push({name: "bus-events"});\r\n                    }).catch((e) => {\r\n                    if (e.response && e.response.status === 422) {\r\n                        let errors = e.response.data.errors\r\n                        Object.keys(this.messages).forEach((k)=> {\r\n                            this.messages[k] = errors[k]?.[0] || \'\';\r\n                        });\r\n                    }\r\n                })\r\n            },\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .place .v-text-field__slot textarea {\r\n        display: none !important;\r\n    }\r\n    .place.v-text-field>.v-input__control>.v-input__slot:after ,\r\n    .place.v-text-field>.v-input__control>.v-input__slot:before{\r\n        display: none !important;\r\n    }\r\n</style>'],sourceRoot:""}]);const o=l},4856:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const r={name:"PostAdd",components:{},data:function(e){return{event:{id:e.$route.params.id,title:"",place:"",time:""},messages:{title:"",place:"",time:""}}},mounted:function(){},methods:{create:function(){var e=this;window.axios.post("/bus/event",this.event).then((function(t){e.$router.push({name:"bus-events"})})).catch((function(t){if(t.response&&422===t.response.status){var n=t.response.data.errors;Object.keys(e.messages).forEach((function(t){var r;e.messages[t]=(null===(r=n[t])||void 0===r?void 0:r[0])||""}))}}))}}};n(3311);const s=(0,n(1900).Z)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s("Добавление рапсисания")}}),e._v(" "),n("v-text-field",{attrs:{type:"text",name:"title",label:"Мрашрут","error-messages":e.messages.title},model:{value:e.event.title,callback:function(t){e.$set(e.event,"title",t)},expression:"event.title"}}),e._v(" "),n("v-text-field",{attrs:{name:"place",label:"Остановка","error-messages":e.messages.place},model:{value:e.event.place,callback:function(t){e.$set(e.event,"place",t)},expression:"event.place"}}),e._v(" "),n("v-text-field",{attrs:{name:"date",label:"Время отправления","error-messages":e.messages.time},model:{value:e.event.time,callback:function(t){e.$set(e.event,"time",t)},expression:"event.time"}}),e._v(" "),n("v-spacer"),e._v(" "),n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!(e.event.place&&e.event.title&&e.event.time),dark:""},on:{click:e.create}},[n("v-icon",[e._v("mdi-plus")])],1)],1)}),[],!1,null,null,null).exports},3311:(e,t,n)=>{var r=n(8097);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals);(0,n(5346).Z)("a8ba38c6",r,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,