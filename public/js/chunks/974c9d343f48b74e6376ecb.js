(self.webpackChunk=self.webpackChunk||[]).push([[974],{330:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var s=n(4015),a=n.n(s),o=n(3645),r=n.n(o)()(a());r.push([e.id,".place.v-text-field>.v-input__control>.v-input__slot:after,.place.v-text-field>.v-input__control>.v-input__slot:before,.place .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/TypeEdit.vue"],names:[],mappings:"AAuEA,2JAEA,sBACA",sourcesContent:['<template>\n    <v-container\n            class="cover">\n        <v-toolbar-title align="center" justify="center" class="mb-2"\n        v-text="\'Добавление типа заявки\'">\n        </v-toolbar-title>\n        <v-text-field\n            type="text"\n            name="title"\n            label="Название"\n            v-model="model.name"\n            :error-messages="messages.name"\n            >\n        </v-text-field>\n        <v-spacer/>\n        <v-btn class="save-btn"\n               color="success"\n               fab\n               @click="create"\n               :disabled="!(model.name)"\n               dark>\n            <v-icon>mdi-plus</v-icon>\n        </v-btn>\n    </v-container>\n</template>\n\n<script>\n    export default {\n        name: "PostAdd",\n        components: {\n        },\n        data: (vm) => {\n            return {\n                model: {\n                    id: vm.$route.params.id,\n                    name: \'\',\n                },\n                messages: {\n                    name: \'\',\n                }\n            }\n        },\n        mounted() {\n        },\n        methods: {\n            create() {\n                window.axios.post(\'/type\', this.model)\n                    .then((r) => {\n                        this.$store.state.types.push({\n                            value: r.data.data.id,\n                            text: r.data.data.name\n                        })\n                        this.$router.push({name: "types"});\n                    }).catch((e) => {\n                        console.log(e);\n                    if (e.response && e.response.status === 422) {\n                        let errors = e.response.data.errors\n                        Object.keys(this.messages).forEach((k)=> {\n                            this.messages[k] = errors[k]?.[0] || \'\';\n                        });\n                    }\n                })\n            },\n        }\n    }\n<\/script>\n\n<style>\n    .place .v-text-field__slot textarea {\n        display: none !important;\n    }\n    .place.v-text-field>.v-input__control>.v-input__slot:after ,\n    .place.v-text-field>.v-input__control>.v-input__slot:before{\n        display: none !important;\n    }\n</style>'],sourceRoot:""}]);const l=r},7974:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const s={name:"PostAdd",components:{},data:function(e){return{model:{id:e.$route.params.id,name:""},messages:{name:""}}},mounted:function(){},methods:{create:function(){var e=this;window.axios.post("/type",this.model).then((function(t){e.$store.state.types.push({value:t.data.data.id,text:t.data.data.name}),e.$router.push({name:"types"})})).catch((function(t){if(console.log(t),t.response&&422===t.response.status){var n=t.response.data.errors;Object.keys(e.messages).forEach((function(t){var s;e.messages[t]=(null===(s=n[t])||void 0===s?void 0:s[0])||""}))}}))}}};n(8700);const a=(0,n(1900).Z)(s,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s("Добавление типа заявки")}}),e._v(" "),n("v-text-field",{attrs:{type:"text",name:"title",label:"Название","error-messages":e.messages.name},model:{value:e.model.name,callback:function(t){e.$set(e.model,"name",t)},expression:"model.name"}}),e._v(" "),n("v-spacer"),e._v(" "),n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!e.model.name,dark:""},on:{click:e.create}},[n("v-icon",[e._v("mdi-plus")])],1)],1)}),[],!1,null,null,null).exports},8700:(e,t,n)=>{var s=n(330);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals);(0,n(5346).Z)("2432e41d",s,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,