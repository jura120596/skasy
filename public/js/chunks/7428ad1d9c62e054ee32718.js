(self.webpackChunk=self.webpackChunk||[]).push([[742],{1403:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var i=n(4015),l=n.n(i),s=n(3645),a=n.n(s)()(l());a.push([e.id,"table{width:-webkit-max-content!important;width:-moz-max-content!important;width:max-content!important}td.fixedColumn,th.fixedColumn{position:absolute;display:flex;text-align:center}.fixedColumn th:last-child{border-right:1px solid}div>.fixedColumn:first-child{padding-right:0}div>.col:nth-child(2){padding-left:0}","",{version:3,sources:["webpack://./resources/js/components/AppDataTable.vue"],names:[],mappings:"AAiWA,MACA,mCAAA,CAAA,gCAAA,CAAA,2BACA,CACA,8BACA,iBAAA,CACA,YAAA,CACA,iBACA,CACA,2BACA,sBACA,CACA,6BACA,eACA,CACA,sBACA,cACA",sourcesContent:['<template>\n    <v-container >\n        <slot name="body.prepend"/>\n        <v-row\n            style="flex-wrap: nowrap;">\n            <v-col v-if="withFixed && getFixedHeaders(false).length>0"\n                   class="fixedColumn flex-grow-0 flex-shrink-0">\n                <v-data-table :headers="getFixedHeaders(false)" :items="tableItems" item-key="id" v-model="selected"\n                              :page.sync="tableFilter.page"\n                              :items-per-page="tableFilter.per_page"\n                              @page-count="pageCount = $event"\n                              :server-items-length="total"\n                              hide-default-footer\n                              v-on:input="$emit(\'input\')"\n                              :options.sync="tableOptions"\n                              :show-select="withSelect" style="width: max-content"\n                              :no-data-text="\'Нет данных\'"\n                              :no-results-text="\'Нет данных\'"\n                              ref="fixedTable"\n                              :loading="loading"\n                              loading-text="Загрузка... Пожалуйста, подождите"\n                >\n                    <template v-slot:header.settings="{header}">\n                        <v-container class="d-flex align-center">\n                            <slot name="header-settings-menu" v-bind:header="header"></slot>\n                        </v-container>\n                    </template>\n                    <template v-slot:item.settings="{item}">\n                        <v-menu offset-y>\n                            <template v-slot:activator="{ on, attrs }">\n                                <v-card-text  :ref="\'settingsrow\'+item.id" class="ma-0 pa-0 d-flex flex-column justify-center" >\n                                    <v-btn\n                                        color="primary"\n                                        dark\n                                        v-bind="attrs"\n                                        v-on="on"\n                                        icon>\n                                        <v-icon small>mdi-menu</v-icon>\n                                    </v-btn>\n                                </v-card-text>\n                            </template>\n                            <slot name="item-settings-menu" v-bind:item="item"></slot>\n                        </v-menu>\n                    </template>\n                    <template v-slot:item.mark="{item}">\n                        <v-tooltip bottom>\n                            <template v-slot:activator="{ on, attrs }">\n                                <v-icon\n                                    v-if="item.color"\n                                    v-bind="attrs"\n                                    v-on="on"\n                                    small\n                                    :style="{color: item.color.color}"\n                                >mdi-checkbox-blank-circle</v-icon>\n                            </template>\n                            <span>{{item.color.text}} (Последнее обновление:{{item.finished_at}})</span>\n                        </v-tooltip>\n                        {{item.mark}}\n                    </template>\n                </v-data-table>\n\n            </v-col>\n            <v-col style="overflow:hidden;display: block;position:relative; "\n                   class="flex-grow-1 flex-shrink-1">\n                <div v-if="tableItems && tableItems.length > 0 && showScroll">\n                    <v-chip class="app-table-scroll-left" @mouseover="onScrollLeft" @mouseout="scrollRun = false;"/>\n                    <v-chip class="app-table-scroll-left app-table-scroll-right"  @mouseover="onScrollRight"  @mouseout="scrollRun = false;"/>\n                </div>\n                <v-data-table :headers="withFixed ? getFixedHeaders(true) : tableHeaders" :items="tableItems"\n                              :page.sync="tableFilter.page"\n                              :items-per-page="tableFilter.per_page"\n                              @page-count="pageCount = $event"\n                              :options.sync="tableOptions"\n                              :server-items-length="total"\n                              :no-data-text="withSelect ? \'\' : \'Нет данных\'"\n                              :no-results-text="withSelect ? \'\' : \'Нет данных\'"\n                              ref="table"\n                              :loading="loading"\n                              loading-text="Загрузка... Пожалуйста, подождите"\n                              hide-default-footer>\n                    <template slot="item" slot-scope="props">\n                        <tr :ref="\'row\'+props.item.id">\n                            <td v-for="(item, index) in props.headers" style="max-width: 500px">\n                                <div v-if="item.link === true">\n                                    <slot name="link_item" v-bind="{props, item}">\n                                        <a @click="tableEditItem(props.item[item.id === undefined ? \'id\' : item.id], props.item, item.value)" >{{props.item[item.value]}}</a>\n                                    </slot>\n                                </div>\n                                <div v-else-if="item.hidden === true && (props.item[item.value] || props.item.hidden_prepend)">\n                                    <p v-if="props.item.hidden_prepend">{{props.item.hidden_prepend}}</p>\n                                    <p v-if="!props.item.hidden">{{props.item[item.value]}}</p>\n                                    <a v-if="props.item[item.value]" @click="props.item.hidden = !props.item.hidden">\n                                        {{props.item.hidden ? \'Показать текст\' : \'Скрыть текст\'}}\n                                    </a>\n                                </div>\n                                <div v-else>\n                                    {{props.item[item.value] !== undefined && props.item[item.value] !== null ? props.item[item.value] : emptyText}}\n                                </div>\n                            </td>\n                        </tr>\n                    </template>\n                </v-data-table>\n            </v-col>\n        </v-row>\n        <slot name="body.append"/>\n        <slot name="body.pagination">\n            <div class=" d-flex pt-2">\n                <v-pagination\n                    v-model="tableFilter.page"\n                    :length="pageCount"\n                    :total-visible="7"\n                ></v-pagination>\n                <v-spacer></v-spacer>\n                <v-select\n                    :value="tableFilter.per_page"\n                    @change="tableFilter.per_page = parseInt($event, 10) ? parseInt($event, 10) : 1"\n                    :items="[20,40,60,80,100]"\n                    label="Показывать по:"\n                    style="max-width: 150px"\n                ></v-select>\n            </div>\n        </slot>\n    </v-container>\n</template>\n<script>\n    import _ from \'lodash\';\n    import Axios from \'@/utils/axios\';\n    export default {\n        name: \'AppDataTable\',\n        props: {\n            headers: Array,\n            itemsUrl: {\n                type:String,\n                default: null,\n            },\n            items: {\n                type: Array,\n                default: function() {\n                    return undefined;\n                }\n            },\n            showSelect: Boolean,\n            fixedCol: Boolean,\n            filter: Object,\n            service: {\n                type:Object,\n                default: () => ({})\n            },\n            toItem: {\n                type: Function,\n                default:  (item) => {return item;},\n            },\n            editItem: {\n                type: Function,\n                default: (id) => {},\n            },\n            emptyItemText: {\n                type:String,\n                default: \'\',\n            },\n        },\n        data: function () {\n            return {\n                pageCount: 0,\n                tableItems: this.items,\n                selected: [],\n                total: 0,\n                tableHeaders: this.headers,\n                withSelect : this.showSelect,\n                withFixed: this.fixedCol,\n                tableFilter: {\n                    ...this.filter,\n                    page: 1,\n                    per_page: 20,\n                    sortBy: \'id\',\n                    sortDesc : false,\n                },\n                scrollRun: false,\n                showScroll: false,\n                tableOptions: {},\n                tableEditItem: this.editItem,\n                emptyText: this.emptyItemText,\n                loading: false,\n            };\n        },\n        methods: {\n            getFixedColumnLeft (indx = this.headers.length) {\n                return this.headers\n                    .filter((header, i) => i < indx && header.fixed === true)\n                    .reduce((currentValue, header) => currentValue + (parseInt(header.width) || 0), 0)\n            },\n            getFixedHeaders(reverse) {\n                return this.headers\n                    .filter((header) => {\n                        return !reverse ? header.fixed === true : !(header.fixed !== undefined && header.fixed !== false)\n                    });\n            },\n            async loadItems() {\n                if (this.items !== undefined) {\n                    this.total = this.items.length;\n                    this.pageCount = Math.floor(this.total / this.tableFilter.per_page)\n                        + (this.total === this.tableFilter.per_page ? 0 : 1);\n                    this.tableViewNormalize()\n                    return;\n                }\n                if  (this.itemsUrl) {\n                    let params = this.service && this.service.prepareParams\n                        ? this.service.prepareParams(this.tableFilter)\n                        : this.tableFilter;\n                    this.loading = true\n                    this.$emit(\'onLoading\')\n                    Axios.get(this.itemsUrl, {params})\n                        .then((response) => {\n                            this.tableItems = response.data.data.map(this.toItem);\n                            this.total = response.data.total;\n                            this.pageCount = response.data.last_page;\n                            this.tableViewNormalize()\n                            this.loading = false\n                            this.$emit(\'onLoad\', response.data.data)\n                        })\n                        .catch((e) => {\n                            console.log(e);\n                            this.loading = false\n                            this.$emit(\'onLoad\')\n                        });\n                    return;\n                }\n                this.loading = true\n                this.$emit(\'onLoading\')\n                this.service.getAll(this.tableFilter)\n                    .then((response) => {\n                        this.tableItems = response.data.data.map(this.toItem);\n                        this.total = response.data.total;\n                        this.pageCount = response.data.last_page;\n                        this.tableViewNormalize()\n                        this.loading = false\n                        this.$emit(\'onLoad\', response.data.data)\n                    })\n                    .catch((e) => {\n                        console.log(e);\n                        this.loading = false\n                        this.$emit(\'onLoad\')\n                    });\n            },\n            scrollTo(element, scrollPixels, duration) {\n                const scrollPos = element.scrollLeft;\n                // Condition to check if scrolling is required\n                if ( !( (scrollPos === 0 || scrollPixels > 0) && (element.clientWidth + scrollPos === element.scrollWidth || scrollPixels < 0)))\n                {\n                    // Get the start timestamp\n                    const startTime =\n                        "now" in window.performance\n                            ? performance.now()\n                            : new Date().getTime();\n                    let scroll = (timestamp)  => {\n                        //Calculate the timeelapsed\n                        const timeElapsed = timestamp - startTime;\n                        //Calculate progress\n                        const progress = duration ? Math.min(timeElapsed / duration, 1) : null;\n                        //Set the scrolleft\n                        element.scrollLeft = (progress\n                            ? scrollPos + scrollPixels * progress :\n                            element.scrollLeft + 10 * scrollPixels /(Math.abs(scrollPixels)));\n                        //Check if elapsed time is less then duration then call the requestAnimation, otherwise exit\n                        if (this.scrollRun) {\n                            //Request for animation\n                            window.requestAnimationFrame(scroll);\n                        } else {\n                            return;\n                        }\n                    }\n                    //Call requestAnimationFrame on scroll function first time\n                    window.requestAnimationFrame(scroll);\n                }\n            },\n            onScrollLeft() {\n                this.scrollRun = true;\n                this.scrollTo(this.$refs.table.$el.childNodes[0], -this.$refs.table.$el.childNodes[0].scrollWidth);\n            },\n            onScrollRight() {\n                this.scrollRun = true;\n                this.scrollTo(this.$refs.table.$el.childNodes[0], this.$refs.table.$el.childNodes[0].scrollWidth);\n            },\n            tableViewNormalize() {\n                if (this.$refs.fixedTable) Object.keys(this.$refs).forEach((v) => {\n                    if (v.search(\'row\') === 0 && this.$refs[\'settings\'+ v]) {\n                        this.$refs[\'settings\'+ v].style.height = (this.$refs[v].clientHeight - 1)+\'px\'; //bootom border on every table row\n                    }\n                })\n            }\n        },\n        created: function() {\n            this.debouncedLoadItems = _.debounce(this.loadItems, 500)\n        },\n        watch: {\n            tableFilter: {\n                handler () {\n                    this.debouncedLoadItems()\n                },\n                deep: true\n            },\n            tableOptions: {\n                handler() {\n                    if (this.tableOptions.sortBy.length === 1) {\n                        this.tableFilter.sortBy = this.tableOptions.sortBy[0];\n                    }\n                    if (this.tableOptions.sortDesc.length === 1) {\n                        this.tableFilter.sortDesc = this.tableOptions.sortDesc[0];\n                    }\n                    const { sortBy, sortDesc } = this.tableFilter\n                    this.$emit(\'onSort\', { sortBy, sortDesc })\n                },\n                deep: true,\n            },\n            tableItems: {\n                handler() {\n                    setTimeout(() =>  {\n                        this.showScroll = this.$refs.table.$el.childNodes[0].scrollWidth > this.$refs.table.$el.scrollWidth;\n                    }, 500);\n                },\n                deep:true,\n            },\n            filter: {\n                handler(value) {\n                    if (value) {\n                        this.tableFilter = {...this.tableFilter, ...this.filter};\n                        this.tableFilter.page = 1;\n                    }\n                },\n                deep:true\n            },\n            items: {\n                handler(value) {\n                    this.tableItems = value;\n                },\n                deep: true,\n            }\n        },\n        mounted() {\n            this.loadItems()\n            this.$watch(\n                () => {\n                    return this.$refs.table.items\n                },\n                (val) => {\n                    this.tableViewNormalize()\n                }\n            )\n        },\n    }\n<\/script>\n\n<style>\n    table {\n        width: max-content !important;\n    }\n    th.fixedColumn, td.fixedColumn {\n        position: absolute;\n        display: flex;\n        text-align: center;\n    }\n    .fixedColumn   th:last-child{\n        border-right: 1px solid;\n    }\n    div > .fixedColumn:nth-child(1) {\n        padding-right: 0;\n    }\n    div > .col:nth-child(2) {\n        padding-left: 0;\n    }\n</style>\n'],sourceRoot:""}]);const r=a},15:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var i=n(7757),l=n.n(i),s=n(6486),a=n.n(s),r=n(6762);function o(e,t,n,i,l,s,a){try{var r=e[s](a),o=r.value}catch(e){return void n(e)}r.done?t(o):Promise.resolve(o).then(i,l)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const u={name:"AppDataTable",props:{headers:Array,itemsUrl:{type:String,default:null},items:{type:Array,default:function(){}},showSelect:Boolean,fixedCol:Boolean,filter:Object,service:{type:Object,default:function(){return{}}},toItem:{type:Function,default:function(e){return e}},editItem:{type:Function,default:function(e){}},emptyItemText:{type:String,default:""}},data:function(){return{pageCount:0,tableItems:this.items,selected:[],total:0,tableHeaders:this.headers,withSelect:this.showSelect,withFixed:this.fixedCol,tableFilter:c(c({},this.filter),{},{page:1,per_page:20,sortBy:"id",sortDesc:!1}),scrollRun:!1,showScroll:!1,tableOptions:{},tableEditItem:this.editItem,emptyText:this.emptyItemText,loading:!1}},methods:{getFixedColumnLeft:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.headers.length;return this.headers.filter((function(t,n){return n<e&&!0===t.fixed})).reduce((function(e,t){return e+(parseInt(t.width)||0)}),0)},getFixedHeaders:function(e){return this.headers.filter((function(t){return e?!(void 0!==t.fixed&&!1!==t.fixed):!0===t.fixed}))},loadItems:function(){var e,t=this;return(e=l().mark((function e(){var n;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(void 0===t.items){e.next=5;break}return t.total=t.items.length,t.pageCount=Math.floor(t.total/t.tableFilter.per_page)+(t.total===t.tableFilter.per_page?0:1),t.tableViewNormalize(),e.abrupt("return");case 5:if(!t.itemsUrl){e.next=11;break}return n=t.service&&t.service.prepareParams?t.service.prepareParams(t.tableFilter):t.tableFilter,t.loading=!0,t.$emit("onLoading"),r.Z.get(t.itemsUrl,{params:n}).then((function(e){t.tableItems=e.data.data.map(t.toItem),t.total=e.data.total,t.pageCount=e.data.last_page,t.tableViewNormalize(),t.loading=!1,t.$emit("onLoad",e.data.data)})).catch((function(e){console.log(e),t.loading=!1,t.$emit("onLoad")})),e.abrupt("return");case 11:t.loading=!0,t.$emit("onLoading"),t.service.getAll(t.tableFilter).then((function(e){t.tableItems=e.data.data.map(t.toItem),t.total=e.data.total,t.pageCount=e.data.last_page,t.tableViewNormalize(),t.loading=!1,t.$emit("onLoad",e.data.data)})).catch((function(e){console.log(e),t.loading=!1,t.$emit("onLoad")}));case 14:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(i,l){var s=e.apply(t,n);function a(e){o(s,i,l,a,r,"next",e)}function r(e){o(s,i,l,a,r,"throw",e)}a(void 0)}))})()},scrollTo:function(e,t,n){var i=this,l=e.scrollLeft;if(!(0===l||t>0)||!(e.clientWidth+l===e.scrollWidth||t<0)){var s="now"in window.performance?performance.now():(new Date).getTime();window.requestAnimationFrame((function a(r){var o=r-s,d=n?Math.min(o/n,1):null;e.scrollLeft=d?l+t*d:e.scrollLeft+10*t/Math.abs(t),i.scrollRun&&window.requestAnimationFrame(a)}))}},onScrollLeft:function(){this.scrollRun=!0,this.scrollTo(this.$refs.table.$el.childNodes[0],-this.$refs.table.$el.childNodes[0].scrollWidth)},onScrollRight:function(){this.scrollRun=!0,this.scrollTo(this.$refs.table.$el.childNodes[0],this.$refs.table.$el.childNodes[0].scrollWidth)},tableViewNormalize:function(){var e=this;this.$refs.fixedTable&&Object.keys(this.$refs).forEach((function(t){0===t.search("row")&&e.$refs["settings"+t]&&(e.$refs["settings"+t].style.height=e.$refs[t].clientHeight-1+"px")}))}},created:function(){this.debouncedLoadItems=a().debounce(this.loadItems,500)},watch:{tableFilter:{handler:function(){this.debouncedLoadItems()},deep:!0},tableOptions:{handler:function(){1===this.tableOptions.sortBy.length&&(this.tableFilter.sortBy=this.tableOptions.sortBy[0]),1===this.tableOptions.sortDesc.length&&(this.tableFilter.sortDesc=this.tableOptions.sortDesc[0]);var e=this.tableFilter,t=e.sortBy,n=e.sortDesc;this.$emit("onSort",{sortBy:t,sortDesc:n})},deep:!0},tableItems:{handler:function(){var e=this;setTimeout((function(){e.showScroll=e.$refs.table.$el.childNodes[0].scrollWidth>e.$refs.table.$el.scrollWidth}),500)},deep:!0},filter:{handler:function(e){e&&(this.tableFilter=c(c({},this.tableFilter),this.filter),this.tableFilter.page=1)},deep:!0},items:{handler:function(e){this.tableItems=e},deep:!0}},mounted:function(){var e=this;this.loadItems(),this.$watch((function(){return e.$refs.table.items}),(function(t){e.tableViewNormalize()}))}};n(7904);const h=(0,n(1900).Z)(u,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",[e._t("body.prepend"),e._v(" "),n("v-row",{staticStyle:{"flex-wrap":"nowrap"}},[e.withFixed&&e.getFixedHeaders(!1).length>0?n("v-col",{staticClass:"fixedColumn flex-grow-0 flex-shrink-0"},[n("v-data-table",{ref:"fixedTable",staticStyle:{width:"max-content"},attrs:{headers:e.getFixedHeaders(!1),items:e.tableItems,"item-key":"id",page:e.tableFilter.page,"items-per-page":e.tableFilter.per_page,"server-items-length":e.total,"hide-default-footer":"",options:e.tableOptions,"show-select":e.withSelect,"no-data-text":"Нет данных","no-results-text":"Нет данных",loading:e.loading,"loading-text":"Загрузка... Пожалуйста, подождите"},on:{"update:page":function(t){return e.$set(e.tableFilter,"page",t)},"page-count":function(t){e.pageCount=t},input:function(t){return e.$emit("input")},"update:options":function(t){e.tableOptions=t}},scopedSlots:e._u([{key:"header.settings",fn:function(t){var i=t.header;return[n("v-container",{staticClass:"d-flex align-center"},[e._t("header-settings-menu",null,{header:i})],2)]}},{key:"item.settings",fn:function(t){var i=t.item;return[n("v-menu",{attrs:{"offset-y":""},scopedSlots:e._u([{key:"activator",fn:function(t){var l=t.on,s=t.attrs;return[n("v-card-text",{ref:"settingsrow"+i.id,staticClass:"ma-0 pa-0 d-flex flex-column justify-center"},[n("v-btn",e._g(e._b({attrs:{color:"primary",dark:"",icon:""}},"v-btn",s,!1),l),[n("v-icon",{attrs:{small:""}},[e._v("mdi-menu")])],1)],1)]}}],null,!0)},[e._v(" "),e._t("item-settings-menu",null,{item:i})],2)]}},{key:"item.mark",fn:function(t){var i=t.item;return[n("v-tooltip",{attrs:{bottom:""},scopedSlots:e._u([{key:"activator",fn:function(t){var l=t.on,s=t.attrs;return[i.color?n("v-icon",e._g(e._b({style:{color:i.color.color},attrs:{small:""}},"v-icon",s,!1),l),[e._v("mdi-checkbox-blank-circle")]):e._e()]}}],null,!0)},[e._v(" "),n("span",[e._v(e._s(i.color.text)+" (Последнее обновление:"+e._s(i.finished_at)+")")])]),e._v("\n                    "+e._s(i.mark)+"\n                ")]}}],null,!0),model:{value:e.selected,callback:function(t){e.selected=t},expression:"selected"}})],1):e._e(),e._v(" "),n("v-col",{staticClass:"flex-grow-1 flex-shrink-1",staticStyle:{overflow:"hidden",display:"block",position:"relative"}},[e.tableItems&&e.tableItems.length>0&&e.showScroll?n("div",[n("v-chip",{staticClass:"app-table-scroll-left",on:{mouseover:e.onScrollLeft,mouseout:function(t){e.scrollRun=!1}}}),e._v(" "),n("v-chip",{staticClass:"app-table-scroll-left app-table-scroll-right",on:{mouseover:e.onScrollRight,mouseout:function(t){e.scrollRun=!1}}})],1):e._e(),e._v(" "),n("v-data-table",{ref:"table",attrs:{headers:e.withFixed?e.getFixedHeaders(!0):e.tableHeaders,items:e.tableItems,page:e.tableFilter.page,"items-per-page":e.tableFilter.per_page,options:e.tableOptions,"server-items-length":e.total,"no-data-text":e.withSelect?"":"Нет данных","no-results-text":e.withSelect?"":"Нет данных",loading:e.loading,"loading-text":"Загрузка... Пожалуйста, подождите","hide-default-footer":""},on:{"update:page":function(t){return e.$set(e.tableFilter,"page",t)},"page-count":function(t){e.pageCount=t},"update:options":function(t){e.tableOptions=t}},scopedSlots:e._u([{key:"item",fn:function(t){return[n("tr",{ref:"row"+t.item.id},e._l(t.headers,(function(i,l){return n("td",{staticStyle:{"max-width":"500px"}},[!0===i.link?n("div",[e._t("link_item",(function(){return[n("a",{on:{click:function(n){return e.tableEditItem(t.item[void 0===i.id?"id":i.id],t.item,i.value)}}},[e._v(e._s(t.item[i.value]))])]}),null,{props:t,item:i})],2):!0===i.hidden&&(t.item[i.value]||t.item.hidden_prepend)?n("div",[t.item.hidden_prepend?n("p",[e._v(e._s(t.item.hidden_prepend))]):e._e(),e._v(" "),t.item.hidden?e._e():n("p",[e._v(e._s(t.item[i.value]))]),e._v(" "),t.item[i.value]?n("a",{on:{click:function(e){t.item.hidden=!t.item.hidden}}},[e._v("\n                                    "+e._s(t.item.hidden?"Показать текст":"Скрыть текст")+"\n                                ")]):e._e()]):n("div",[e._v("\n                                "+e._s(void 0!==t.item[i.value]&&null!==t.item[i.value]?t.item[i.value]:e.emptyText)+"\n                            ")])])})),0)]}}],null,!0)})],1)],1),e._v(" "),e._t("body.append"),e._v(" "),e._t("body.pagination",(function(){return[n("div",{staticClass:" d-flex pt-2"},[n("v-pagination",{attrs:{length:e.pageCount,"total-visible":7},model:{value:e.tableFilter.page,callback:function(t){e.$set(e.tableFilter,"page",t)},expression:"tableFilter.page"}}),e._v(" "),n("v-spacer"),e._v(" "),n("v-select",{staticStyle:{"max-width":"150px"},attrs:{value:e.tableFilter.per_page,items:[20,40,60,80,100],label:"Показывать по:"},on:{change:function(t){e.tableFilter.per_page=parseInt(t,10)?parseInt(t,10):1}}})],1)]}))],2)}),[],!1,null,null,null).exports},4742:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var i=n(7757),l=n.n(i);function s(e,t,n,i,l,s,a){try{var r=e[s](a),o=r.value}catch(e){return void n(e)}r.done?t(o):Promise.resolve(o).then(i,l)}const a={name:"Districts",components:{AppDataTable:n(15).Z},data:function(e){return{level:Number.parseInt(e.$route.query.level),loading:!1,notFound:!1,filter:{region_id:e.$route.params.region},vm:e}},watch:{loading:function(e,t){!e&&t&&(this.filter.name.length>0&&0==this.courts.length?this.notFound=!0:this.notFound=!1)}},created:function(){return(e=l().mark((function e(){return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(i,l){var a=e.apply(t,n);function r(e){s(a,i,l,r,o,"next",e)}function o(e){s(a,i,l,r,o,"throw",e)}r(void 0)}))})();var e},computed:{canAddDistrict:function(){return this.$route.params.id+""=="0"?null===this.$store.state.auth.user.district_id:null===this.$store.state.auth.user.district_id&&this.level<2||this.$store.state.auth.user.district_id+""==this.$route.params.id+""},headers:function(){return{regions:[{value:"name",text:this.label,link:this.level<2,id:"id"}].concat(this.level+""=="2"?[]:[{value:"childs_count",text:"Количество административных районов"}])}},districtsItemsUrl:function(){return"/district?level="+this.level+"&parent_district_id="+this.$route.params.id},label:function(){switch(this.level){case 2:case"2":return"Населенный пункт";case 1:case"1":return"Сельское поселение";case 0:case"0":return"Муниципалитет";default:return"Район"}},title:function(){switch(this.level){case 2:case"2":return"Список населенных пунктов";case 1:case"1":return"Список сельских поселений";case 0:case"0":return"Список муниципалитетов";default:return"Список районов"}}},methods:{showItem:function(e){var t=this.level;console.log(t),this.$router.push({name:"districts",params:{region:this.$route.params.region,id:e},query:{level:Number.isInteger(t)?t+1:1}})}}};const r=(0,n(1900).Z)(a,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s(e.title)}}),e._v(" "),e.canAddDistrict?n("router-link",{staticClass:"ml-4",attrs:{to:"/regions/"+e.$route.params.region+"/edit?level="+e.level+"&parent_district_id="+e.$route.params.id}},[e._v("Добавить +")]):e._e(),e._v(" "),n("v-card",{staticClass:"d-flex flex-column justify-space-between mb-6",attrs:{flat:"",tile:""}},[n("AppDataTable",{directives:[{name:"show",rawName:"v-show",value:!e.notFound,expression:" !notFound"}],attrs:{headers:e.headers.regions,showSelect:!1,fixedCol:!1,filter:e.filter,editItem:e.showItem,emptyItemText:"-",itemsUrl:e.districtsItemsUrl}}),e._v(" "),e.notFound?[n("v-alert",{staticStyle:{"margin-top":"20px"},attrs:{"colored-border":"",type:"info",elevation:"2"}},[e._v("\n                По Вашему запросу ничего не найдено. Попробуйте изменить параметры поиска.\n            ")])]:e._e()],2)],1)}),[],!1,null,"0160c5a6",null).exports},7904:(e,t,n)=>{var i=n(1403);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals);(0,n(5346).Z)("401b0cc6",i,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,