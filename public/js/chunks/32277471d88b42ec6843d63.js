(self.webpackChunk=self.webpackChunk||[]).push([[322],{7592:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>a});var r=e(4015),o=e.n(r),s=e(3645),i=e.n(s)()(o());i.push([t.id,".user-photo-module,.user-post-description{height:300px;max-height:300px;overflow-y:scroll}","",{version:3,sources:["webpack://./resources/js/pages/Posts.vue"],names:[],mappings:"AAmMA,0CACA,YAAA,CACA,gBAAA,CACA,iBACA",sourcesContent:['<template>\r\n    <v-container class="cover">\r\n        <v-toolbar-title align="center" justify="center" class="mb-2"\r\n                         v-text="\'Последние новости\'">\r\n        </v-toolbar-title>\r\n        <div v-if="posts.length > 0">\r\n            <v-layout class="d-flex flex-row flex-wrap">\r\n\r\n                <v-flex\r\n                        xs12\r\n                        sm6\r\n                        md6\r\n                        lg4\r\n                        v-for="(post, y) in posts" :key="y">\r\n\r\n                    <v-card\r\n                            elevation="0"\r\n                            outlined\r\n                            style="position: relative;"\r\n                            class="ma-1"\r\n                    >\r\n                        <div v-if="$store.state.auth.user.role === 1024"\r\n                             class="d-flex crud" style="position:absolute; right: 5px; top: -10px; font-size: 10px">\r\n                            <v-btn color="red"\r\n                                   fab\r\n                                   small\r\n                                   @click="delete_id = post.id"\r\n                                   class="mr-3"\r\n                                   dark>\r\n                                <v-icon>mdi-delete</v-icon>\r\n                            </v-btn>\r\n                            <v-btn\r\n                                    color="yellow"\r\n                                    fab\r\n                                    small\r\n                                    @click="$router.push(\'/post/\'+post.id)"\r\n                                    dark>\r\n                                <v-icon>mdi-pencil</v-icon>\r\n                            </v-btn>\r\n                        </div>\r\n\r\n                        <div\r\n                                v-else\r\n                                v-text="\'Опубликовано: \'+post.date"\r\n                                style="position:absolute; right: 5px; top: 5px; font-size: 10px"></div>\r\n                        <v-container>\r\n                            <v-spacer></v-spacer>\r\n                            <v-toolbar-title\r\n                                class="text-center mt-3 mb-2"\r\n                                @click="\r\n                                    dialogPost = post\r\n                                    show =  true\r\n                            ">{{post.title}}</v-toolbar-title>\r\n                            <v-spacer></v-spacer>\r\n                        </v-container>\r\n\r\n                        <v-container class="ma-0 pa-0"\r\n                             @click="\r\n                                dialogPost = post\r\n                                show =  true\r\n                        ">\r\n                            <div v-if="post.photos.length" class="user-photo-module">\r\n                                <v-carousel>\r\n                                    <v-carousel-item\r\n                                            v-for="(photo, i) in post.photos"\r\n                                            :key="i"\r\n                                            :src="photo.file"\r\n                                            contain\r\n                                            min-height="300px"\r\n                                            max-height="300px"\r\n                                    >\r\n                                    </v-carousel-item>\r\n                                </v-carousel>\r\n                            </div>\r\n                            <div v-else class="user-post-description">\r\n                                <v-container v-html="post.description"></v-container>\r\n                            </div>\r\n                        </v-container>\r\n                    </v-card>\r\n                </v-flex>\r\n            </v-layout>\r\n            <div class="text-center xs-12" v-if="l > 1">\r\n                <v-pagination\r\n                        :length="l"\r\n                        :total-visible="3"\r\n                        v-model="page"\r\n                ></v-pagination>\r\n            </div>\r\n        </div>\r\n        <div v-else>\r\n            <div class="text-center my-3">Новостей пока нет</div>\r\n        </div>\r\n\r\n        <v-btn class="save-btn"\r\n               v-if="$store.state.auth.user.role === 1024"\r\n               color="success"\r\n               fab\r\n               @click="$router.push(\'/post/0\')"\r\n               dark>\r\n            <v-icon>mdi-plus</v-icon>\r\n        </v-btn>\r\n        <v-dialog\r\n                v-if="!!dialogPost"\r\n                v-model="show"\r\n                @close="\r\n                    show = false\r\n                    dialogPost = null\r\n                "\r\n                :fullscreen="$vuetify.breakpoint.mobile"\r\n        >\r\n            <template slot:default>\r\n                <v-container class="px-0 mx-0 pt-0 mt-0 cover" style="background-color: white !important; max-width: 100% !important;">\r\n                    <v-toolbar-title class="text-center my-3">{{dialogPost.title}}</v-toolbar-title>\r\n\r\n                    <div v-if="dialogPost.photos && dialogPost.photos.length > 0" class="container my-2">\r\n                        <v-carousel>\r\n                            <v-carousel-item\r\n                                    v-for="(photo, i) in dialogPost.photos"\r\n                                    :key="i"\r\n                                    :src="photo.file"\r\n                                    contain\r\n                                    max-height="500px"\r\n                                    min-height="500px"\r\n                            >\r\n                            </v-carousel-item>\r\n                        </v-carousel>\r\n                    </div>\r\n                    <v-container v-html="dialogPost.description"></v-container>\r\n\r\n                    <v-toolbar-title class="text-center my-3">\r\n                        <v-btn color="primary" @click="\r\n                            show = false\r\n                            dialogPost = null\r\n                        ">Закрыть\r\n                        </v-btn>\r\n                    </v-toolbar-title>\r\n\r\n                </v-container>\r\n            </template>\r\n        </v-dialog>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: "Posts",\r\n        data: (vm) => {\r\n            return {\r\n                l: 1,\r\n                posts: [],\r\n                page: 1,\r\n                dialogPost: null,\r\n                delete_id: 0,\r\n                show: false\r\n            }\r\n        },\r\n        mounted() {\r\n            this.getPage();\r\n        },\r\n        methods: {\r\n            getPage() {\r\n                window.axios.get(\'/post/\', {params: {page: this.page, per_page: 10}}).then((response) => {\r\n                    this.posts = response.data.data;\r\n                    this.l = response.data.last_page\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                });\r\n            },\r\n            delete() {\r\n                if (this.delete_id > 0)\r\n                    window.axios.delete(\'/post/\' + this.delete_id).then((response) => {\r\n                        this.getPage()\r\n                        this.delete_id = 0\r\n                    }).catch((e) => {\r\n                        console.log(e);\r\n                    });\r\n            }\r\n        },\r\n        watch: {\r\n            page() {\r\n                this.getPage();\r\n            },\r\n            delete_id(nv) {\r\n                if (nv > 0) this.delete()\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .user-photo-module{\r\n        height: 300px;\r\n        max-height: 300px;\r\n        overflow-y: scroll;\r\n    }\r\n    .user-post-description{\r\n        height: 300px;\r\n        max-height: 300px;\r\n        overflow-y: scroll;\r\n    }\r\n</style>'],sourceRoot:""}]);const a=i},5322:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>o});const r={name:"Posts",data:function(t){return{l:1,posts:[],page:1,dialogPost:null,delete_id:0,show:!1}},mounted:function(){this.getPage()},methods:{getPage:function(){var t=this;window.axios.get("/post/",{params:{page:this.page,per_page:10}}).then((function(n){t.posts=n.data.data,t.l=n.data.last_page})).catch((function(t){console.log(t)}))},delete:function(){var t=this;this.delete_id>0&&window.axios.delete("/post/"+this.delete_id).then((function(n){t.getPage(),t.delete_id=0})).catch((function(t){console.log(t)}))}},watch:{page:function(){this.getPage()},delete_id:function(t){t>0&&this.delete()}}};e(8740);const o=(0,e(1900).Z)(r,(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("v-container",{staticClass:"cover"},[e("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:t._s("Последние новости")}}),t._v(" "),t.posts.length>0?e("div",[e("v-layout",{staticClass:"d-flex flex-row flex-wrap"},t._l(t.posts,(function(n,r){return e("v-flex",{key:r,attrs:{xs12:"",sm6:"",md6:"",lg4:""}},[e("v-card",{staticClass:"ma-1",staticStyle:{position:"relative"},attrs:{elevation:"0",outlined:""}},[1024===t.$store.state.auth.user.role?e("div",{staticClass:"d-flex crud",staticStyle:{position:"absolute",right:"5px",top:"-10px","font-size":"10px"}},[e("v-btn",{staticClass:"mr-3",attrs:{color:"red",fab:"",small:"",dark:""},on:{click:function(e){t.delete_id=n.id}}},[e("v-icon",[t._v("mdi-delete")])],1),t._v(" "),e("v-btn",{attrs:{color:"yellow",fab:"",small:"",dark:""},on:{click:function(e){return t.$router.push("/post/"+n.id)}}},[e("v-icon",[t._v("mdi-pencil")])],1)],1):e("div",{staticStyle:{position:"absolute",right:"5px",top:"5px","font-size":"10px"},domProps:{textContent:t._s("Опубликовано: "+n.date)}}),t._v(" "),e("v-container",[e("v-spacer"),t._v(" "),e("v-toolbar-title",{staticClass:"text-center mt-3 mb-2",on:{click:function(e){t.dialogPost=n,t.show=!0}}},[t._v(t._s(n.title))]),t._v(" "),e("v-spacer")],1),t._v(" "),e("v-container",{staticClass:"ma-0 pa-0",on:{click:function(e){t.dialogPost=n,t.show=!0}}},[n.photos.length?e("div",{staticClass:"user-photo-module"},[e("v-carousel",t._l(n.photos,(function(t,n){return e("v-carousel-item",{key:n,attrs:{src:t.file,contain:"","min-height":"300px","max-height":"300px"}})})),1)],1):e("div",{staticClass:"user-post-description"},[e("v-container",{domProps:{innerHTML:t._s(n.description)}})],1)])],1)],1)})),1),t._v(" "),t.l>1?e("div",{staticClass:"text-center xs-12"},[e("v-pagination",{attrs:{length:t.l,"total-visible":3},model:{value:t.page,callback:function(n){t.page=n},expression:"page"}})],1):t._e()],1):e("div",[e("div",{staticClass:"text-center my-3"},[t._v("Новостей пока нет")])]),t._v(" "),1024===t.$store.state.auth.user.role?e("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",dark:""},on:{click:function(n){return t.$router.push("/post/0")}}},[e("v-icon",[t._v("mdi-plus")])],1):t._e(),t._v(" "),t.dialogPost?e("v-dialog",{attrs:{fullscreen:t.$vuetify.breakpoint.mobile},on:{close:function(n){t.show=!1,t.dialogPost=null}},model:{value:t.show,callback:function(n){t.show=n},expression:"show"}},[[e("v-container",{staticClass:"px-0 mx-0 pt-0 mt-0 cover",staticStyle:{"background-color":"white !important","max-width":"100% !important"}},[e("v-toolbar-title",{staticClass:"text-center my-3"},[t._v(t._s(t.dialogPost.title))]),t._v(" "),t.dialogPost.photos&&t.dialogPost.photos.length>0?e("div",{staticClass:"container my-2"},[e("v-carousel",t._l(t.dialogPost.photos,(function(t,n){return e("v-carousel-item",{key:n,attrs:{src:t.file,contain:"","max-height":"500px","min-height":"500px"}})})),1)],1):t._e(),t._v(" "),e("v-container",{domProps:{innerHTML:t._s(t.dialogPost.description)}}),t._v(" "),e("v-toolbar-title",{staticClass:"text-center my-3"},[e("v-btn",{attrs:{color:"primary"},on:{click:function(n){t.show=!1,t.dialogPost=null}}},[t._v("Закрыть\n                    ")])],1)],1)]],2):t._e()],1)}),[],!1,null,null,null).exports},8740:(t,n,e)=>{var r=e(7592);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals);(0,e(5346).Z)("1e2943ce",r,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,