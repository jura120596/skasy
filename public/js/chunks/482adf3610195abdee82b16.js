(self.webpackChunk=self.webpackChunk||[]).push([[482],{434:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o,s=n(4082),i=function(){return{listeners:[],scriptId:s.uuid("tiny-script"),scriptLoaded:!1}},r=(o=i(),{load:function(t,e,n){o.scriptLoaded?n():(o.listeners.push(n),t.getElementById(o.scriptId)||function(t,e,n,o){var s=e.createElement("script");s.referrerPolicy="origin",s.type="application/javascript",s.id=t,s.src=n;var i=function(){s.removeEventListener("load",i),o()};s.addEventListener("load",i),e.head&&e.head.appendChild(s)}(o.scriptId,t,e,(function(){o.listeners.forEach((function(t){return t()})),o.scriptLoaded=!0})))},reinitialize:function(){o=i()}});e.ScriptLoader=r},8537:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.getTinymce=function(){var t="undefined"!=typeof window?window:n.g;return t&&t.tinymce?t.tinymce:null}},4082:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=["onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onBeforePaste","onBlur","onChange","onClearUndos","onClick","onContextMenu","onCopy","onCut","onDblclick","onDeactivate","onDirty","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onExecCommand","onFocus","onFocusIn","onFocusOut","onGetContent","onHide","onInit","onKeyDown","onKeyPress","onKeyUp","onLoadContent","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onNodeChange","onObjectResizeStart","onObjectResized","onObjectSelected","onPaste","onPostProcess","onPostRender","onPreProcess","onProgressState","onRedo","onRemove","onReset","onSaveContent","onSelectionChange","onSetAttrib","onSetContent","onShow","onSubmit","onUndo","onVisualAid"],o=function(t){return-1!==n.map((function(t){return t.toLowerCase()})).indexOf(t.toLowerCase())};e.isValidKey=o;var s=function(t,e,n){Object.keys(e).filter(o).forEach((function(o){var s=e[o];"function"==typeof s&&("onInit"===o?s(t,n):n.on(o.substring(2),(function(t){return s(t,n)})))}))};e.bindHandlers=s;var i=function(t,e){var n=t.$props.modelEvents?t.$props.modelEvents:null,o=Array.isArray(n)?n.join(" "):n;e.on(o||"change input undo redo",(function(){t.$emit("input",e.getContent({format:t.$props.outputFormat}))}))};e.bindModelHandlers=i;e.initEditor=function(t,e,n){var o=e.$props.value?e.$props.value:"",r=e.$props.initialValue?e.$props.initialValue:"";n.setContent(o||(e.initialized?e.cache:r)),e.$watch("value",(function(t,o){n&&"string"==typeof t&&t!==o&&t!==n.getContent({format:e.$props.outputFormat})&&n.setContent(t)})),e.$listeners.input&&i(e,n),s(t,e.$listeners,n),e.initialized=!0};var r=0;e.uuid=function(t){var e=Date.now();return t+"_"+Math.floor(1e9*Math.random())+ ++r+String(e)};e.isTextarea=function(t){return null!==t&&"textarea"===t.tagName.toLowerCase()};var a=function(t){return void 0===t||""===t?[]:Array.isArray(t)?t:t.split(" ")};e.mergePlugins=function(t,e){return a(t).concat(a(e))};e.isNullOrUndefined=function(t){return null==t}},2282:function(t,e,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var s=n(434),i=n(8537),r=n(4082),a=n(7431),l=function(t){return function(){var e=o(o({},t.$props.init),{readonly:t.$props.disabled,selector:"#"+t.elementId,plugins:r.mergePlugins(t.$props.init&&t.$props.init.plugins,t.$props.plugins),toolbar:t.$props.toolbar||t.$props.init&&t.$props.init.toolbar,inline:t.inlineEditor,setup:function(e){t.editor=e,e.on("init",(function(n){return r.initEditor(n,t,e)})),t.$props.init&&"function"==typeof t.$props.init.setup&&t.$props.init.setup(e)}});r.isTextarea(t.element)&&(t.element.style.visibility="",t.element.style.display=""),i.getTinymce().init(e)}};e.Editor={props:a.editorProps,created:function(){this.elementId=this.$props.id||r.uuid("tiny-vue"),this.inlineEditor=this.$props.init&&this.$props.init.inline||this.$props.inline,this.initialized=!1},watch:{disabled:function(){this.editor.setMode(this.disabled?"readonly":"design")}},mounted:function(){if(this.element=this.$el,null!==i.getTinymce())l(this)();else if(this.element&&this.element.ownerDocument){var t=this.$props.cloudChannel?this.$props.cloudChannel:"5",e=this.$props.apiKey?this.$props.apiKey:"no-api-key",n=r.isNullOrUndefined(this.$props.tinymceScriptSrc)?"https://cdn.tiny.cloud/1/"+e+"/tinymce/"+t+"/tinymce.min.js":this.$props.tinymceScriptSrc;s.ScriptLoader.load(this.element.ownerDocument,n,l(this))}},beforeDestroy:function(){null!==i.getTinymce()&&i.getTinymce().remove(this.editor)},deactivated:function(){var t;this.inlineEditor||(this.cache=this.editor.getContent(),null===(t=i.getTinymce())||void 0===t||t.remove(this.editor))},activated:function(){!this.inlineEditor&&this.initialized&&l(this)()},render:function(t){return this.inlineEditor?function(t,e,n){return t(n||"div",{attrs:{id:e}})}(t,this.elementId,this.$props.tagName):function(t,e){return t("textarea",{attrs:{id:e},style:{visibility:"hidden"}})}(t,this.elementId)}}},7431:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.editorProps={apiKey:String,cloudChannel:String,id:String,init:Object,initialValue:String,inline:Boolean,modelEvents:[String,Array],plugins:[String,Array],tagName:String,toolbar:[String,Array],value:String,disabled:Boolean,tinymceScriptSrc:String,outputFormat:{type:String,validator:function(t){return"html"===t||"text"===t}}}},5846:(t,e,n)=>{"use strict";var o=n(2282);e.Z=o.Editor},4247:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var o=n(4015),s=n.n(o),i=n(3645),r=n.n(i)()(s());r.push([t.id,".photo-input[data-v-595d1e4d]{position:absolute;visibility:hidden}.user-photo[data-v-595d1e4d]{border-radius:200px;width:300px;height:auto;max-height:500px;border:1px solid #01aefe}.user-photo-module[data-v-595d1e4d]{display:flex;flex-direction:column;justify-content:center;align-items:center}","",{version:3,sources:["webpack://./resources/js/components/photo-loader.vue"],names:[],mappings:"AA2FA,8BACA,iBAAA,CACA,iBACA,CAEA,6BACA,mBAAA,CACA,WAAA,CACA,WAAA,CACA,gBAAA,CACA,wBACA,CAEA,oCACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBACA",sourcesContent:['<template>\n    <v-card class="d-flex flex-column" justify-center align-center elevation="0">\n        <input\n                type="file"\n                id="files"\n                @change="addPhoto"\n                class="photo-input"\n                placeholder="azaz"\n                accept="image/jpeg,image/png,image/jpg"\n        />\n\n        <v-btn class="btn my-2" @click="clickOnInput" v-if="!one || !carouselPhotos.length">Добавить фотографию</v-btn>\n        <div v-if="one && loadedPhotos.length" class="text-center">{{loadedPhotos[0].name}}</div>\n        <div v-if="!one && carouselPhotos.length" class="user-photo-module">\n            <v-carousel v-model="n">\n                <v-carousel-item\n                        v-for="(photo, i) in carouselPhotos"\n                        :key="i"\n                        :src="photo"\n                        contain\n                >\n                </v-carousel-item>\n            </v-carousel>\n        </div>\n    </v-card>\n</template>\n\n<script>\n\n    export default {\n        name: \'photo-loader\',\n        props: {\n            radius: {\n                type: Number,\n            },\n            one: {\n                type: Boolean,\n                default: false,\n            }\n        },\n        components: {},\n        data() {\n            return {\n                n: 0,\n                photo: \'\',\n                loadedPhotos: [],\n                carouselPhotos:[],\n                fileImg: null,\n            }\n        },\n        methods: {\n            getPhotos() {\n                return this.loadedPhotos;\n            },\n            getFirst() {\n                return this.loadedPhotos[0];\n            },\n            returnFormData(val) {\n                this.$emit(\'save-photo\', val)\n            },\n            updatePhoto(val) {\n                this.photo = val\n                this.showCropperDialog = false\n            },\n            clickOnInput() {\n                document.getElementById(\'files\').files = (new DataTransfer()).files;\n                document.getElementById(\'files\').click()\n\n            },\n            addPhoto(event) {\n                this.fileImg = event.target.files[0]\n                if (this.fileImg.size > 5024000) {\n                    this.$root.$children[0].snackbarText = \'Размер файла не может быть больше 5МБ\'\n                    this.$root.$children[0].snackbar = true\n                    return;\n                }\n                if(this.loadedPhotos.length > 10) {\n                    this.$root.$children[0].snackbarText = \'Вы не можете загрузить больше 10 фотографий\'\n                    this.$root.$children[0].snackbar = true\n                    return;\n                }\n                this.carouselPhotos.push(URL.createObjectURL(this.fileImg))\n                this.loadedPhotos.push(this.fileImg)\n                this.n = this.loadedPhotos.length-1\n                this.fileImg = null;\n            },\n        },\n    }\n<\/script>\n\n<style scoped>\n    .photo-input {\n        position: absolute;\n        visibility: hidden;\n    }\n\n    .user-photo {\n        border-radius: 200px;\n        width: 300px;\n        height: auto;\n        max-height: 500px;\n        border: 1px solid #01aefe;\n    }\n\n    .user-photo-module {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n'],sourceRoot:""}]);const a=r},8243:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var o=n(4015),s=n.n(o),i=n(3645),r=n.n(i)()(s());r.push([t.id,".description.v-text-field>.v-input__control>.v-input__slot:after,.description.v-text-field>.v-input__control>.v-input__slot:before,.description .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/PostEdit.vue"],names:[],mappings:"AAsIA,6KAEA,sBACA",sourcesContent:['<template>\n    <v-container\n            class="cover">\n        <v-toolbar-title align="center" justify="center" class="mb-2"\n        v-text="$route.params.id  == 0 ? \'Добавление новости\' :  \'Редактирование новости\'">\n        </v-toolbar-title>\n        <v-text-field\n            type="text"\n            name="title"\n            label="Заголовок"\n            v-model="post.title"\n            :error-messages="messages.title"\n            >\n        </v-text-field>\n        <v-textarea\n                name="description"\n                label="Описание"\n                hint="Hint text"\n                :value="\' \'"\n                class="description "\n                :error-messages="messages.description"\n        ></v-textarea>\n        <editor\n                api-key="kapr0kh0v3vscnkppsxgig98vf6mgitaii8auw3p2pin1c5t"\n                class="mt-2"\n                v-model="post.description"\n        >\n        </editor>\n        <v-spacer/>\n        <photo-loader v-if="$route.params.id > 0" ref="loader"></photo-loader>\n        <v-btn class="save-btn"\n               v-if="$route.params.id == 0"\n               color="success"\n               fab\n               @click="create"\n               :disabled="!(post.description && post.title)"\n               dark>\n            <v-icon>mdi-plus</v-icon>\n        </v-btn>\n        <v-btn class="save-btn"\n               v-else\n               @click="update"\n               color="success"\n               fab\n               dark>\n            <v-icon>mdi-check-outline</v-icon>\n        </v-btn>\n    </v-container>\n</template>\n\n<script>\n    import Editor from \'@tinymce/tinymce-vue\';\n    import PhotoLoader from \'@/components/photo-loader\'\n    export default {\n        name: "PostAdd",\n        components: {\n            Editor,\n            PhotoLoader\n        },\n        data: (vm) => {\n            return {\n                post: {\n                    id: vm.$route.params.id,\n                    title: \'\',\n                    description: \'\',\n                },\n                messages: {\n                    title: \'\',\n                    description: \'\',\n                }\n            }\n        },\n        mounted() {\n            let modelId = this.$route.params.id;\n            if (modelId != 0) {\n                window.axios.get(\'/post/\'+ modelId).then((response) => {\n                    this.post = response.data.data;\n                }).catch((e) => {\n                    console.log(e);\n                    this.$root.$children[0].snackbarText = e?.response?.error || \'Произошла ошибка\';\n                    this.$root.$children[0].snackbar = true;\n                });\n            }\n        },\n        methods: {\n            create() {\n                window.axios.post(\'/post\', this.post)\n                    .then((r) => {\n                        this.$router.push({name: "post", params: {id: r.data.data.id}});\n                    }).catch((e) => {\n                    if (e.response && e.response.status === 422) {\n                        let errors = e.response.data.errors\n                        Object.keys(this.messages).forEach((k)=> {\n                            this.messages[k] = errors[k]?.[0] || \'\';\n                        });\n                    }\n                })\n            },\n             update() {\n                window.axios.put(\'/post/\'+ this.post.id, this.post)\n                    .then((r) => {\n                        let newPhotos = this.$refs.loader.getPhotos();\n                        if (newPhotos.length) {\n                            const formData = new FormData()\n                            newPhotos.forEach((photo, i) => {\n                                formData.append(\'post_photos[\'+i+\']\', photo, photo.name)\n                            })\n                            formData.append(\'_method\', \'PUT\')\n                            try {\n                                window.axios.post(\'/post/\'+this.post.id, formData)\n                            } catch (e) {\n                                this.$root.$children[0].snackbarText =  `Ошибка сохранения фотографии`\n                                this.$root.$children[0].snackbar = true\n                            }\n                        }\n                        this.$router.push({name: "posts"});\n                    }).catch((e) => {\n                    console.log(e);\n                    if (e.response && e.response.status === 422) {\n                        let errors = e.response.data.errors\n                        Object.keys(this.messages).forEach((k)=> {\n                            this.messages[k] = errors[k]?.[0] || \'\';\n                        });\n                    }\n                })\n            }\n        }\n    }\n<\/script>\n\n<style>\n    .description .v-text-field__slot textarea {\n        display: none !important;\n    }\n    .description.v-text-field>.v-input__control>.v-input__slot:after ,\n    .description.v-text-field>.v-input__control>.v-input__slot:before{\n        display: none !important;\n    }\n</style>'],sourceRoot:""}]);const a=r},7136:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});const o={name:"photo-loader",props:{radius:{type:Number},one:{type:Boolean,default:!1}},components:{},data:function(){return{n:0,photo:"",loadedPhotos:[],carouselPhotos:[],fileImg:null}},methods:{getPhotos:function(){return this.loadedPhotos},getFirst:function(){return this.loadedPhotos[0]},returnFormData:function(t){this.$emit("save-photo",t)},updatePhoto:function(t){this.photo=t,this.showCropperDialog=!1},clickOnInput:function(){document.getElementById("files").files=(new DataTransfer).files,document.getElementById("files").click()},addPhoto:function(t){return this.fileImg=t.target.files[0],this.fileImg.size>5024e3?(this.$root.$children[0].snackbarText="Размер файла не может быть больше 5МБ",void(this.$root.$children[0].snackbar=!0)):this.loadedPhotos.length>10?(this.$root.$children[0].snackbarText="Вы не можете загрузить больше 10 фотографий",void(this.$root.$children[0].snackbar=!0)):(this.carouselPhotos.push(URL.createObjectURL(this.fileImg)),this.loadedPhotos.push(this.fileImg),this.n=this.loadedPhotos.length-1,void(this.fileImg=null))}}};n(8258);const s=(0,n(1900).Z)(o,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-card",{staticClass:"d-flex flex-column",attrs:{"justify-center":"","align-center":"",elevation:"0"}},[n("input",{staticClass:"photo-input",attrs:{type:"file",id:"files",placeholder:"azaz",accept:"image/jpeg,image/png,image/jpg"},on:{change:t.addPhoto}}),t._v(" "),t.one&&t.carouselPhotos.length?t._e():n("v-btn",{staticClass:"btn my-2",on:{click:t.clickOnInput}},[t._v("Добавить фотографию")]),t._v(" "),t.one&&t.loadedPhotos.length?n("div",{staticClass:"text-center"},[t._v(t._s(t.loadedPhotos[0].name))]):t._e(),t._v(" "),!t.one&&t.carouselPhotos.length?n("div",{staticClass:"user-photo-module"},[n("v-carousel",{model:{value:t.n,callback:function(e){t.n=e},expression:"n"}},t._l(t.carouselPhotos,(function(t,e){return n("v-carousel-item",{key:e,attrs:{src:t,contain:""}})})),1)],1):t._e()],1)}),[],!1,null,"595d1e4d",null).exports},9482:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>r});var o=n(5846),s=n(7136);const i={name:"PostAdd",components:{Editor:o.Z,PhotoLoader:s.Z},data:function(t){return{post:{id:t.$route.params.id,title:"",description:""},messages:{title:"",description:""}}},mounted:function(){var t=this,e=this.$route.params.id;0!=e&&window.axios.get("/post/"+e).then((function(e){t.post=e.data.data})).catch((function(e){var n;console.log(e),t.$root.$children[0].snackbarText=(null==e||null===(n=e.response)||void 0===n?void 0:n.error)||"Произошла ошибка",t.$root.$children[0].snackbar=!0}))},methods:{create:function(){var t=this;window.axios.post("/post",this.post).then((function(e){t.$router.push({name:"post",params:{id:e.data.data.id}})})).catch((function(e){if(e.response&&422===e.response.status){var n=e.response.data.errors;Object.keys(t.messages).forEach((function(e){var o;t.messages[e]=(null===(o=n[e])||void 0===o?void 0:o[0])||""}))}}))},update:function(){var t=this;window.axios.put("/post/"+this.post.id,this.post).then((function(e){var n=t.$refs.loader.getPhotos();if(n.length){var o=new FormData;n.forEach((function(t,e){o.append("post_photos["+e+"]",t,t.name)})),o.append("_method","PUT");try{window.axios.post("/post/"+t.post.id,o)}catch(e){t.$root.$children[0].snackbarText="Ошибка сохранения фотографии",t.$root.$children[0].snackbar=!0}}t.$router.push({name:"posts"})})).catch((function(e){if(console.log(e),e.response&&422===e.response.status){var n=e.response.data.errors;Object.keys(t.messages).forEach((function(e){var o;t.messages[e]=(null===(o=n[e])||void 0===o?void 0:o[0])||""}))}}))}}};n(2591);const r=(0,n(1900).Z)(i,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:t._s(0==t.$route.params.id?"Добавление новости":"Редактирование новости")}}),t._v(" "),n("v-text-field",{attrs:{type:"text",name:"title",label:"Заголовок","error-messages":t.messages.title},model:{value:t.post.title,callback:function(e){t.$set(t.post,"title",e)},expression:"post.title"}}),t._v(" "),n("v-textarea",{staticClass:"description ",attrs:{name:"description",label:"Описание",hint:"Hint text",value:" ","error-messages":t.messages.description}}),t._v(" "),n("editor",{staticClass:"mt-2",attrs:{"api-key":"kapr0kh0v3vscnkppsxgig98vf6mgitaii8auw3p2pin1c5t"},model:{value:t.post.description,callback:function(e){t.$set(t.post,"description",e)},expression:"post.description"}}),t._v(" "),n("v-spacer"),t._v(" "),t.$route.params.id>0?n("photo-loader",{ref:"loader"}):t._e(),t._v(" "),0==t.$route.params.id?n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!(t.post.description&&t.post.title),dark:""},on:{click:t.create}},[n("v-icon",[t._v("mdi-plus")])],1):n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",dark:""},on:{click:t.update}},[n("v-icon",[t._v("mdi-check-outline")])],1)],1)}),[],!1,null,null,null).exports},8258:(t,e,n)=>{var o=n(4247);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[t.id,o,""]]),o.locals&&(t.exports=o.locals);(0,n(5346).Z)("34d8856a",o,!0,{})},2591:(t,e,n)=>{var o=n(8243);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[t.id,o,""]]),o.locals&&(t.exports=o.locals);(0,n(5346).Z)("19a4d546",o,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,