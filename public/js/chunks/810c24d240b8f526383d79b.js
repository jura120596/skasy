(self.webpackChunk=self.webpackChunk||[]).push([[810],{6537:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});var n=a(4015),o=a.n(n),r=a(3645),l=a.n(r)()(o());l.push([e.id,"#mapid[data-v-2cf52978]{min-height:calc(100vh - 64px);position:absolute;height:calc(100vh - 64px);width:100%}.map-top-dialog[data-v-2cf52978]{z-index:10001!important}","",{version:3,sources:["webpack://./resources/js/pages/Map.vue"],names:[],mappings:"AAyLA,wBACA,6BAAA,CACA,iBAAA,CACA,yBAAA,CACA,UACA,CACA,iCACA,uBACA",sourcesContent:["<template>\n    <div class=\"ma-0 pa-0\" style=\"position: relative; display: flex;\">\n        <div id=\"mapid\"></div>\n        <v-dialog v-model=\"show\">\n            <v-container map-top-dialog>\n                <v-card elevation=\"0\">\n                    <v-card-title>Создание зоны</v-card-title>\n                    <v-card-text>\n                        <v-text-field\n                                v-model=\"place.name\"\n                                label=\"Название\"/>\n                        <v-text-field\n                                v-model=\"place.points\"\n                                type=\"number\"\n                                label=\"Баллы благодарности\"/>\n                        <v-color-picker\n                                dot-size=\"32\"\n                                hide-canvas\n                                hide-mode-switch\n                                mode=\"hexa\"\n                                v-model=\"place.color\"\n                                swatches-max-height=\"200\"\n                        ></v-color-picker>\n                        <v-btn color=\"dark\" @click=\"save\" :disabled=\"place.name == ''\">\n                            Сохранить\n                        </v-btn>\n                    </v-card-text>\n                </v-card>\n            </v-container>\n        </v-dialog>\n    </div>\n</template>\n\n<script>\n    export default {\n        name: \"Map\",\n        data: (vm) => ({\n            mymap : null,\n            editableLayers:new L.FeatureGroup(),\n            places: [],\n            place: {},\n            show: false,\n            drawControl: null,\n        }),\n        mounted() {\n            this.mymap = L.map('mapid', {drawControl: false}).setView([55.536446, 47.498600], 13);\n            let osm = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoianVyYTk2IiwiYSI6ImNrcGw1MWVzODFkazQyd284bjY0ZWIxbmIifQ.CWG9L2rMStLO3i3AOgrnyQ', {\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n                maxZoom: 18,\n                id: 'mapbox/streets-v11',\n                tileSize: 512,\n                zoomOffset: -1,\n                accessToken: 'your.mapbox.access.token'\n            })\n            osm.addTo(this.mymap)\n            var options = {\n                position: 'topright',\n                draw: {\n                    polyline: false,\n                    polygon: {\n                        allowIntersection: true, // Restricts shapes to simple polygons\n                        drawError: {\n                            color: '#e1e100', // Color the shape will turn when intersects\n                            message: 'Вы не может поставить тут точку' // Message that will show when intersect\n                        },\n                        shapeOptions: {\n                            color: '#bada55'\n                        }\n                    },\n                    circle: false, // Turns off this drawing tool\n                    circlemarker: false, // Turns off this drawing tool\n                    rectangle: false,\n                    marker: true,\n                },\n                edit: {\n                    featureGroup: this.editableLayers, //REQUIRED!!\n                    remove: true,\n                    edit: true,\n                }\n            };\n            this.mymap.addLayer(this.editableLayers);\n\n            this.drawControl = new L.Control.Draw(options);\n            if (this.$store.state.auth.user.role === 1024) this.mymap.addControl(this.drawControl);\n            this.mymap.on(L.Draw.Event.CREATED,  (e) => {\n                var type = e.layerType,\n                    layer = e.layer;\n                this.place = {\n                    coords: e.layerType === 'point' ? layer._latlngs : layer._latlng,\n                    layer,\n                    type,\n                };\n                this.show = true;\n            });\n            this.mymap.on(L.Draw.Event.EDITED,  (e) => {\n                if (Object.values(e.layers._layers).length !== 1) {\n                    if (Object.values(e.layers._layers).length>1) {\n                        alert('Редактировать можно только 1 объект');\n                        window.location.reload();\n                    }\n                    return;\n                }\n                Object.values(e.layers._layers).forEach((l) => {\n                    this.place = {\n                        ...l.place,\n                        coords: l._latlngs,\n                        layer:l,\n                    };\n                    this.show = true;\n                });\n            });\n            this.mymap.on(L.Draw.Event.DELETED,  (e) => {\n                Object.values(e.layers._layers).forEach((l) => {\n                    this.delete(l.place);\n                })\n            });\n\n            this.getPlaces();\n        },\n        methods: {\n            addDivMarker(coords, color, popup) {\n                const myCustomColour = color.substr(0,7);\n                const markerHtmlStyles = `background-color: ${myCustomColour}; width: 2rem;height: 2rem;display: block;\n                          left: -1rem;top: -1rem;position: relative;border-radius: 2rem 2rem 0;transform: rotate(45deg);border: 1px solid #FFFFFF`\n                const icon = L.divIcon({\n                    className: \"my-custom-pin\",\n                    iconAnchor: [0, 24],\n                    labelAnchor: [-6, 0],\n                    popupAnchor: [0, -36],\n                    html: `<span style=\"${markerHtmlStyles}\" />`\n                });\n                L.marker(coords, {icon})\n                    .addTo(this.mymap)\n                    .bindPopup(popup);\n            },\n            getPlaces() {\n                window.axios.get('/mapObject/', {params: {}}).then((response) => {\n                    this.places = response.data.data;\n                    this.places.filter((v) => v.type === 'polygon').forEach((p,i) => {\n                        let polygon = L.polygon(p.coords, {color: p.color});\n                        polygon.addTo(this.mymap)\n                            .bindPopup(p.name+'<br/>'+(p.points > 0  ? 'Требуются баллы: ' + p.points : ''));\n                        this.places[i].polygon = polygon;\n                        polygon.place = p;\n                        this.editableLayers.addLayer(polygon);\n                    })\n                    this.places.filter((v) => v.type === 'marker').forEach((p,i) => {\n                       this.addDivMarker({lat:p.lat, lng:p.lng}, p.color, p.name+'<br/>'+(p.points > 0  ? 'Требуются баллы: ' + p.points : ''));\n                    })\n                }).catch((e) => {\n                    console.log(e);\n                });\n            },\n            save() {\n                let data = {\n                    id: this.place.id,\n                    color: this.place.color,\n                    coords: this.place.coords,\n                    name: this.place.name,\n                    points: this.place.points,\n                    type: this.place.type,\n                };\n                data.color = data.color.hexa || data.color;\n                window.axios[data.id ?'put' : 'post']('/mapObject/'+(data.id||''), data).then((response) => {\n                    this.getPlaces();\n                    this.place = {};\n                    this.show = false;\n                    // this.mymap.addLayer(this.place.layer);\n                }).catch((e) => {\n                    alert('Ошибка. Проверьте данные.');\n                    console.log(e);\n                });\n            },\n            delete(place){\n                window.axios.delete('/mapObject/'+place.id).then((response) => {\n                    this.getPlaces();\n                }).catch((e) => {\n                    console.log(e);\n                });\n            }\n        }\n    }\n<\/script>\n\n<style scoped>\n    #mapid {\n        min-height: calc(100vh - 64px);\n        position:absolute;\n        height: calc(100vh - 64px);\n        width: 100%;\n    }\n    .map-top-dialog{\n        z-index: 10001 !important;\n    }\n</style>\n"],sourceRoot:""}]);const s=l},8810:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>s});function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}const l={name:"Map",data:function(e){return{mymap:null,editableLayers:new L.FeatureGroup,places:[],place:{},show:!1,drawControl:null}},mounted:function(){var e=this;this.mymap=L.map("mapid",{drawControl:!1}).setView([55.536446,47.4986],13),L.tileLayer("https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoianVyYTk2IiwiYSI6ImNrcGw1MWVzODFkazQyd284bjY0ZWIxbmIifQ.CWG9L2rMStLO3i3AOgrnyQ",{attribution:'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',maxZoom:18,id:"mapbox/streets-v11",tileSize:512,zoomOffset:-1,accessToken:"your.mapbox.access.token"}).addTo(this.mymap);var t={position:"topright",draw:{polyline:!1,polygon:{allowIntersection:!0,drawError:{color:"#e1e100",message:"Вы не может поставить тут точку"},shapeOptions:{color:"#bada55"}},circle:!1,circlemarker:!1,rectangle:!1,marker:!0},edit:{featureGroup:this.editableLayers,remove:!0,edit:!0}};this.mymap.addLayer(this.editableLayers),this.drawControl=new L.Control.Draw(t),1024===this.$store.state.auth.user.role&&this.mymap.addControl(this.drawControl),this.mymap.on(L.Draw.Event.CREATED,(function(t){var a=t.layerType,n=t.layer;e.place={coords:"point"===t.layerType?n._latlngs:n._latlng,layer:n,type:a},e.show=!0})),this.mymap.on(L.Draw.Event.EDITED,(function(t){1===Object.values(t.layers._layers).length?Object.values(t.layers._layers).forEach((function(t){e.place=o(o({},t.place),{},{coords:t._latlngs,layer:t}),e.show=!0})):Object.values(t.layers._layers).length>1&&(alert("Редактировать можно только 1 объект"),window.location.reload())})),this.mymap.on(L.Draw.Event.DELETED,(function(t){Object.values(t.layers._layers).forEach((function(t){e.delete(t.place)}))})),this.getPlaces()},methods:{addDivMarker:function(e,t,a){var n=t.substr(0,7),o="background-color: ".concat(n,"; width: 2rem;height: 2rem;display: block;\n                      left: -1rem;top: -1rem;position: relative;border-radius: 2rem 2rem 0;transform: rotate(45deg);border: 1px solid #FFFFFF"),r=L.divIcon({className:"my-custom-pin",iconAnchor:[0,24],labelAnchor:[-6,0],popupAnchor:[0,-36],html:'<span style="'.concat(o,'" />')});L.marker(e,{icon:r}).addTo(this.mymap).bindPopup(a)},getPlaces:function(){var e=this;window.axios.get("/mapObject/",{params:{}}).then((function(t){e.places=t.data.data,e.places.filter((function(e){return"polygon"===e.type})).forEach((function(t,a){var n=L.polygon(t.coords,{color:t.color});n.addTo(e.mymap).bindPopup(t.name+"<br/>"+(t.points>0?"Требуются баллы: "+t.points:"")),e.places[a].polygon=n,n.place=t,e.editableLayers.addLayer(n)})),e.places.filter((function(e){return"marker"===e.type})).forEach((function(t,a){e.addDivMarker({lat:t.lat,lng:t.lng},t.color,t.name+"<br/>"+(t.points>0?"Требуются баллы: "+t.points:""))}))})).catch((function(e){console.log(e)}))},save:function(){var e=this,t={id:this.place.id,color:this.place.color,coords:this.place.coords,name:this.place.name,points:this.place.points,type:this.place.type};t.color=t.color.hexa||t.color,window.axios[t.id?"put":"post"]("/mapObject/"+(t.id||""),t).then((function(t){e.getPlaces(),e.place={},e.show=!1})).catch((function(e){alert("Ошибка. Проверьте данные."),console.log(e)}))},delete:function(e){var t=this;window.axios.delete("/mapObject/"+e.id).then((function(e){t.getPlaces()})).catch((function(e){console.log(e)}))}}};a(4080);const s=(0,a(1900).Z)(l,(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"ma-0 pa-0",staticStyle:{position:"relative",display:"flex"}},[a("div",{attrs:{id:"mapid"}}),e._v(" "),a("v-dialog",{model:{value:e.show,callback:function(t){e.show=t},expression:"show"}},[a("v-container",{attrs:{"map-top-dialog":""}},[a("v-card",{attrs:{elevation:"0"}},[a("v-card-title",[e._v("Создание зоны")]),e._v(" "),a("v-card-text",[a("v-text-field",{attrs:{label:"Название"},model:{value:e.place.name,callback:function(t){e.$set(e.place,"name",t)},expression:"place.name"}}),e._v(" "),a("v-text-field",{attrs:{type:"number",label:"Баллы благодарности"},model:{value:e.place.points,callback:function(t){e.$set(e.place,"points",t)},expression:"place.points"}}),e._v(" "),a("v-color-picker",{attrs:{"dot-size":"32","hide-canvas":"","hide-mode-switch":"",mode:"hexa","swatches-max-height":"200"},model:{value:e.place.color,callback:function(t){e.$set(e.place,"color",t)},expression:"place.color"}}),e._v(" "),a("v-btn",{attrs:{color:"dark",disabled:""==e.place.name},on:{click:e.save}},[e._v("\n                        Сохранить\n                    ")])],1)],1)],1)],1)],1)}),[],!1,null,"2cf52978",null).exports},4080:(e,t,a)=>{var n=a(6537);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,a(5346).Z)("fb3d8b9c",n,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,