(self.webpackChunk=self.webpackChunk||[]).push([[150],{2330:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var o=n(4015),r=n.n(o),s=n(3645),i=n.n(s)()(r());i.push([t.id,".user-photo-module{height:300px;max-height:300px;overflow-y:scroll}","",{version:3,sources:["webpack://./resources/js/pages/UserPosts.vue"],names:[],mappings:"AA6TA,mBACA,YAAA,CACA,gBAAA,CACA,iBACA",sourcesContent:['<template>\r\n    <v-container class="cover">\r\n        <v-toolbar-title align="center" justify="center" class="mb-2"\r\n                         v-text="$route.query.mode !== \'me\' ? \'Обращения пользователей\' : \'Ваши обращения\'">\r\n        </v-toolbar-title>\r\n        <div v-if="posts.length > 0">\r\n            <v-layout class="d-flex flex-row flex-wrap">\r\n\r\n                <v-flex\r\n                        xs12\r\n                        sm6\r\n                        md6\r\n                        lg4\r\n                        v-for="(post, y) in posts" :key="y">\r\n\r\n                    <v-card\r\n                            elevation="0"\r\n                            outlined\r\n                            style="position: relative;"\r\n                            class="ma-1"\r\n                    >\r\n                        <div\r\n                             class="d-flex crud" style="position:absolute; right: 5px; top: -10px; font-size: 10px">\r\n\r\n                            <v-btn\r\n                                    color="primary"\r\n                                    fab\r\n                                    small\r\n                                    class="mr-3"\r\n                                    @click="\r\n                                        post.user_like = post.user_like == 0 ? 1: 0\r\n                                        post.likes += post.user_like === 1 ? 1 : -1\r\n                                        like(post)\r\n                                        "\r\n                                    dark>\r\n                                <v-icon>mdi-heart</v-icon>\r\n                            </v-btn>\r\n                            <v-btn\r\n                                    color="primary"\r\n                                    fab\r\n                                    small\r\n                                    class="mr-3"\r\n                                    dark>\r\n                                {{post.likes}}\r\n                            </v-btn>\r\n                            <v-btn v-if="$store.state.auth.user.id === post.user_id || $store.state.auth.user.role ===1024"\r\n                                   color="red"\r\n                                   fab\r\n                                   small\r\n                                   @click="delete_id = post.id"\r\n                                   class="mr-3"\r\n                                   dark>\r\n                                <v-icon>mdi-delete</v-icon>\r\n                            </v-btn>\r\n                            <v-btn v-if="$store.state.auth.user.id === post.user_id"\r\n                                   color="yellow"\r\n                                    fab\r\n                                    small\r\n                                    class="mr-3"\r\n                                    @click="$router.push(\'/user/post/\'+post.id)"\r\n                                    dark>\r\n                                <v-icon>mdi-pencil</v-icon>\r\n                            </v-btn>\r\n                            <v-btn v-if="$store.state.auth.user.role == 1024 && post.state !== 8"\r\n                                   color="primary"\r\n                                   fab\r\n                                   small\r\n                                   @click="postToAction = post"\r\n                                   dark>\r\n                                <v-icon>mdi-check-outline</v-icon>\r\n                            </v-btn>\r\n                            <v-btn v-if="$store.state.auth.user.role != 1024 && post.state == 8 && $store.state.auth.user.id === post.user_id"\r\n                                   color="success"\r\n                                   fab\r\n                                   small\r\n                                   @click="postToAction = post"\r\n                                   dark>\r\n                                <v-icon>mdi-check-outline</v-icon>\r\n                            </v-btn>\r\n                        </div>\r\n\r\n                        <v-container style="position:relative">\r\n                            <div v-text="\'Опубликовано: \'+post.date"\r\n                                 style="position:absolute; left: 5px; bottom: 35px; font-size: 10px"></div>\r\n                            <div v-text="\'Пользователь: \'+(post.user_id == $store.state.auth.user.id ? \'Вы\' : post.author.full_name)"\r\n                                 style="position:absolute; left: 5px; bottom: 20px; font-size: 10px"></div>\r\n                            <div v-text="\'Статус: \'+(statuses[post.state])"\r\n                                 style="position:absolute; left: 5px; bottom: 5px; font-size: 10px"></div>\r\n                            <v-toolbar-title\r\n                                class="text-center mt-2 mb-9"\r\n                                @click="\r\n                                    dialogPost = post\r\n                                    show =  true\r\n                            ">{{post.title}}</v-toolbar-title>\r\n                            <v-spacer></v-spacer>\r\n                        </v-container>\r\n\r\n                        <v-container class="ma-0 pa-0"\r\n                             @click="\r\n                                dialogPost = post\r\n                                show =  true\r\n                        ">\r\n                            <div v-if="post.photos.length" class="user-photo-module">\r\n                                <v-carousel>\r\n                                    <v-carousel-item\r\n                                            v-for="(photo, i) in post.photos"\r\n                                            :key="i"\r\n                                            :src="photo.file"\r\n                                            contain\r\n                                            min-heigth="100px"\r\n                                    >\r\n                                    </v-carousel-item>\r\n                                </v-carousel>\r\n                            </div>\r\n                            <div v-else class="user-photo-module">\r\n                                <v-container v-html="post.description"></v-container>\r\n                            </div>\r\n                        </v-container>\r\n                    </v-card>\r\n                </v-flex>\r\n            </v-layout>\r\n            <div class="text-center xs-12" v-if="l > 1">\r\n                <v-pagination\r\n                        :length="l"\r\n                        :total-visible="3"\r\n                        v-model="page"\r\n                ></v-pagination>\r\n            </div>\r\n        </div>\r\n        <div v-else>\r\n            <div class="text-center my-3">Обращений пока нет</div>\r\n        </div>\r\n\r\n        <v-btn class="save-btn"\r\n               color="success"\r\n               fab\r\n               @click="$router.push(\'/user/post/0\')"\r\n               dark>\r\n            <v-icon>mdi-plus</v-icon>\r\n        </v-btn>\r\n        <v-dialog\r\n                v-if="!!dialogPost"\r\n                v-model="show"\r\n                @close="\r\n                    show = false\r\n                    dialogPost = null\r\n                "\r\n                :fullscreen="$vuetify.breakpoint.mobile"\r\n        >\r\n            <template slot:default>\r\n                <v-container class="px-0 mx-0 pt-0 mt-0 cover" style="background-color: white !important;">\r\n                    <v-toolbar-title class="text-center my-3">{{dialogPost.title}}</v-toolbar-title>\r\n\r\n                    <div v-if="dialogPost.photos && dialogPost.photos.length > 0" class="user-photo-module my-2">\r\n                        <v-carousel>\r\n                            <v-carousel-item\r\n                                    v-for="(photo, i) in dialogPost.photos"\r\n                                    :key="i"\r\n                                    :src="photo.file"\r\n                                    contain\r\n                            >\r\n                            </v-carousel-item>\r\n                        </v-carousel>\r\n                    </div>\r\n                    <div v-if="dialogPost.comment" v-text="\'Комментарий от администрации: \' + dialogPost.comment"\r\n                         class="text-center"></div>\r\n                    <v-container v-html="dialogPost.description"></v-container>\r\n\r\n                    <v-toolbar-title class="text-center my-3">\r\n                        <v-btn color="primary" @click="\r\n                            show = false\r\n                            dialogPost = null\r\n                        ">Закрыть\r\n                        </v-btn>\r\n                    </v-toolbar-title>\r\n\r\n                </v-container>\r\n            </template>\r\n        </v-dialog>\r\n        <v-dialog\r\n                v-if="!!postToAction"\r\n                v-model="postToAction"\r\n                @close="\r\n                    postToAction = null\r\n                "\r\n                :fullscreen="$vuetify.breakpoint.mobile"\r\n        >\r\n            <template slot:default>\r\n                <v-card>\r\n\r\n                    <v-toolbar  class="container py-1 my-0 justify-space-between">\r\n                        <v-toolbar-title>\r\n                            <span class="headline">Подтверждение</span>\r\n                        </v-toolbar-title>\r\n                        <v-spacer/>\r\n                        <v-toolbar-title><v-icon\r\n                                class="flex-grow-0"\r\n                                text\r\n                                @click="postToAction = null">X</v-icon>\r\n                        </v-toolbar-title>\r\n                    </v-toolbar>\r\n                    <v-card-text>\r\n                        <v-container>\r\n                            <v-col>\r\n\r\n                                <v-card-text v-if="postToAction.state === 0">\r\n                                    Введите коментарий, поясняющий выполнение обращения.\r\n                                </v-card-text>\r\n                                <v-card-text v-else>\r\n                                    Вы действительно хотите подтвердить рассмотрение вашего обращения?\r\n                                </v-card-text>\r\n                                <v-form @keyup.native.enter="attemptReset">\r\n                                    <v-text-field v-if="postToAction.state === 0"\r\n                                            v-model="comment"\r\n                                            label="Комментарий"\r\n                                            :error-messages="commentError"\r\n                                            name="comment"\r\n                                            type="text"\r\n                                            required\r\n                                    />\r\n                                    <v-card\r\n                                            class="d-flex justify-center align-center"\r\n                                            flat\r\n                                            height="auto"\r\n                                            tile\r\n                                    >\r\n                                        <v-btn color="dark" @click="accept(postToAction)" :disabled="postToAction.state == 0 && comment == \'\'">\r\n                                            Подтвердить\r\n                                        </v-btn>\r\n                                    </v-card>\r\n                                </v-form>\r\n                            </v-col>\r\n                        </v-container>\r\n                    </v-card-text>\r\n                </v-card>\r\n            </template>\r\n        </v-dialog>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: "UserPosts",\r\n        data: (vm) => {\r\n            return {\r\n                l: 1,\r\n                posts: [],\r\n                page: 1,\r\n                dialogPost: null,\r\n                delete_id: 0,\r\n                show: false,\r\n                postToAction: null,\r\n                commentDialogShow: false,\r\n                comment: \'\',\r\n                commentError: \'\',\r\n                statuses: {\r\n                    0: \'Ожидает подтверждения администрацией\',\r\n                    8: \'Ожидает подтверждения пользователя\',\r\n                    32: \'Закрыто\',\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            this.getPage();\r\n        },\r\n        methods: {\r\n            getPage() {\r\n                window.axios.get(\'/user/post/\', {params: {page: this.page, per_page: 10, mode: this.$route.query.mode}}).then((response) => {\r\n                    this.posts = [...response.data.data];\r\n                    this.l = response.data.last_page\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                });\r\n            },\r\n            delete() {\r\n                if (this.delete_id > 0)\r\n                    window.axios.delete(\'/user/post/\' + this.delete_id).then((response) => {\r\n                        this.getPage()\r\n                        this.delete_id = 0\r\n                    }).catch((e) => {\r\n                        console.log(e);\r\n                    });\r\n            },\r\n            accept(post) {\r\n                let action =  this.postToAction.state == 0 ? \'accept\' : \'confirm\'\r\n                window.axios.post(\'/user/post/\' + post.id+\'/\'+action, {comment: this.comment}).then((response) => {\r\n                    this.comment  = \'\';\r\n                    post.comment = response.data.data.comment;\r\n                    post.state = response.data.data.state\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                    if (e?.response?.status=== 422) {\r\n                        this.commentError = e.response.data.errors.comment;\r\n                        this.postToAction = post;\r\n                    }\r\n                });\r\n                this.postToAction= null;\r\n            },\r\n            like(post) {\r\n                window.axios.post(\'/user/post/\' + post.id+(post.user_like ? \'/like\' : \'/dislike\')).then((response) => {\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                });\r\n            }\r\n        },\r\n        watch: {\r\n            page() {\r\n                this.getPage();\r\n            },\r\n            delete_id(nv) {\r\n                if (nv > 0) this.delete()\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .user-photo-module{\r\n        height: 300px;\r\n        max-height: 300px;\r\n        overflow-y: scroll;\r\n    }\r\n</style>'],sourceRoot:""}]);const a=i},9150:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>i});function o(t){return function(t){if(Array.isArray(t))return r(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}const s={name:"UserPosts",data:function(t){return{l:1,posts:[],page:1,dialogPost:null,delete_id:0,show:!1,postToAction:null,commentDialogShow:!1,comment:"",commentError:"",statuses:{0:"Ожидает подтверждения администрацией",8:"Ожидает подтверждения пользователя",32:"Закрыто"}}},mounted:function(){this.getPage()},methods:{getPage:function(){var t=this;window.axios.get("/user/post/",{params:{page:this.page,per_page:10,mode:this.$route.query.mode}}).then((function(e){t.posts=o(e.data.data),t.l=e.data.last_page})).catch((function(t){console.log(t)}))},delete:function(){var t=this;this.delete_id>0&&window.axios.delete("/user/post/"+this.delete_id).then((function(e){t.getPage(),t.delete_id=0})).catch((function(t){console.log(t)}))},accept:function(t){var e=this,n=0==this.postToAction.state?"accept":"confirm";window.axios.post("/user/post/"+t.id+"/"+n,{comment:this.comment}).then((function(n){e.comment="",t.comment=n.data.data.comment,t.state=n.data.data.state})).catch((function(n){var o;console.log(n),422===(null==n||null===(o=n.response)||void 0===o?void 0:o.status)&&(e.commentError=n.response.data.errors.comment,e.postToAction=t)})),this.postToAction=null},like:function(t){window.axios.post("/user/post/"+t.id+(t.user_like?"/like":"/dislike")).then((function(t){})).catch((function(t){console.log(t)}))}},watch:{page:function(){this.getPage()},delete_id:function(t){t>0&&this.delete()}}};n(4310);const i=(0,n(1900).Z)(s,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:t._s("me"!==t.$route.query.mode?"Обращения пользователей":"Ваши обращения")}}),t._v(" "),t.posts.length>0?n("div",[n("v-layout",{staticClass:"d-flex flex-row flex-wrap"},t._l(t.posts,(function(e,o){return n("v-flex",{key:o,attrs:{xs12:"",sm6:"",md6:"",lg4:""}},[n("v-card",{staticClass:"ma-1",staticStyle:{position:"relative"},attrs:{elevation:"0",outlined:""}},[n("div",{staticClass:"d-flex crud",staticStyle:{position:"absolute",right:"5px",top:"-10px","font-size":"10px"}},[n("v-btn",{staticClass:"mr-3",attrs:{color:"primary",fab:"",small:"",dark:""},on:{click:function(n){e.user_like=0==e.user_like?1:0,e.likes+=1===e.user_like?1:-1,t.like(e)}}},[n("v-icon",[t._v("mdi-heart")])],1),t._v(" "),n("v-btn",{staticClass:"mr-3",attrs:{color:"primary",fab:"",small:"",dark:""}},[t._v("\n                            "+t._s(e.likes)+"\n                        ")]),t._v(" "),t.$store.state.auth.user.id===e.user_id||1024===t.$store.state.auth.user.role?n("v-btn",{staticClass:"mr-3",attrs:{color:"red",fab:"",small:"",dark:""},on:{click:function(n){t.delete_id=e.id}}},[n("v-icon",[t._v("mdi-delete")])],1):t._e(),t._v(" "),t.$store.state.auth.user.id===e.user_id?n("v-btn",{staticClass:"mr-3",attrs:{color:"yellow",fab:"",small:"",dark:""},on:{click:function(n){return t.$router.push("/user/post/"+e.id)}}},[n("v-icon",[t._v("mdi-pencil")])],1):t._e(),t._v(" "),1024==t.$store.state.auth.user.role&&8!==e.state?n("v-btn",{attrs:{color:"primary",fab:"",small:"",dark:""},on:{click:function(n){t.postToAction=e}}},[n("v-icon",[t._v("mdi-check-outline")])],1):t._e(),t._v(" "),1024!=t.$store.state.auth.user.role&&8==e.state&&t.$store.state.auth.user.id===e.user_id?n("v-btn",{attrs:{color:"success",fab:"",small:"",dark:""},on:{click:function(n){t.postToAction=e}}},[n("v-icon",[t._v("mdi-check-outline")])],1):t._e()],1),t._v(" "),n("v-container",{staticStyle:{position:"relative"}},[n("div",{staticStyle:{position:"absolute",left:"5px",bottom:"35px","font-size":"10px"},domProps:{textContent:t._s("Опубликовано: "+e.date)}}),t._v(" "),n("div",{staticStyle:{position:"absolute",left:"5px",bottom:"20px","font-size":"10px"},domProps:{textContent:t._s("Пользователь: "+(e.user_id==t.$store.state.auth.user.id?"Вы":e.author.full_name))}}),t._v(" "),n("div",{staticStyle:{position:"absolute",left:"5px",bottom:"5px","font-size":"10px"},domProps:{textContent:t._s("Статус: "+t.statuses[e.state])}}),t._v(" "),n("v-toolbar-title",{staticClass:"text-center mt-2 mb-9",on:{click:function(n){t.dialogPost=e,t.show=!0}}},[t._v(t._s(e.title))]),t._v(" "),n("v-spacer")],1),t._v(" "),n("v-container",{staticClass:"ma-0 pa-0",on:{click:function(n){t.dialogPost=e,t.show=!0}}},[e.photos.length?n("div",{staticClass:"user-photo-module"},[n("v-carousel",t._l(e.photos,(function(t,e){return n("v-carousel-item",{key:e,attrs:{src:t.file,contain:"","min-heigth":"100px"}})})),1)],1):n("div",{staticClass:"user-photo-module"},[n("v-container",{domProps:{innerHTML:t._s(e.description)}})],1)])],1)],1)})),1),t._v(" "),t.l>1?n("div",{staticClass:"text-center xs-12"},[n("v-pagination",{attrs:{length:t.l,"total-visible":3},model:{value:t.page,callback:function(e){t.page=e},expression:"page"}})],1):t._e()],1):n("div",[n("div",{staticClass:"text-center my-3"},[t._v("Обращений пока нет")])]),t._v(" "),n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",dark:""},on:{click:function(e){return t.$router.push("/user/post/0")}}},[n("v-icon",[t._v("mdi-plus")])],1),t._v(" "),t.dialogPost?n("v-dialog",{attrs:{fullscreen:t.$vuetify.breakpoint.mobile},on:{close:function(e){t.show=!1,t.dialogPost=null}},model:{value:t.show,callback:function(e){t.show=e},expression:"show"}},[[n("v-container",{staticClass:"px-0 mx-0 pt-0 mt-0 cover",staticStyle:{"background-color":"white !important"}},[n("v-toolbar-title",{staticClass:"text-center my-3"},[t._v(t._s(t.dialogPost.title))]),t._v(" "),t.dialogPost.photos&&t.dialogPost.photos.length>0?n("div",{staticClass:"user-photo-module my-2"},[n("v-carousel",t._l(t.dialogPost.photos,(function(t,e){return n("v-carousel-item",{key:e,attrs:{src:t.file,contain:""}})})),1)],1):t._e(),t._v(" "),t.dialogPost.comment?n("div",{staticClass:"text-center",domProps:{textContent:t._s("Комментарий от администрации: "+t.dialogPost.comment)}}):t._e(),t._v(" "),n("v-container",{domProps:{innerHTML:t._s(t.dialogPost.description)}}),t._v(" "),n("v-toolbar-title",{staticClass:"text-center my-3"},[n("v-btn",{attrs:{color:"primary"},on:{click:function(e){t.show=!1,t.dialogPost=null}}},[t._v("Закрыть\n                    ")])],1)],1)]],2):t._e(),t._v(" "),t.postToAction?n("v-dialog",{attrs:{fullscreen:t.$vuetify.breakpoint.mobile},on:{close:function(e){t.postToAction=null}},model:{value:t.postToAction,callback:function(e){t.postToAction=e},expression:"postToAction"}},[[n("v-card",[n("v-toolbar",{staticClass:"container py-1 my-0 justify-space-between"},[n("v-toolbar-title",[n("span",{staticClass:"headline"},[t._v("Подтверждение")])]),t._v(" "),n("v-spacer"),t._v(" "),n("v-toolbar-title",[n("v-icon",{staticClass:"flex-grow-0",attrs:{text:""},on:{click:function(e){t.postToAction=null}}},[t._v("X")])],1)],1),t._v(" "),n("v-card-text",[n("v-container",[n("v-col",[0===t.postToAction.state?n("v-card-text",[t._v("\n                                Введите коментарий, поясняющий выполнение обращения.\n                            ")]):n("v-card-text",[t._v("\n                                Вы действительно хотите подтвердить рассмотрение вашего обращения?\n                            ")]),t._v(" "),n("v-form",{nativeOn:{keyup:function(e){return!e.type.indexOf("key")&&t._k(e.keyCode,"enter",13,e.key,"Enter")?null:t.attemptReset.apply(null,arguments)}}},[0===t.postToAction.state?n("v-text-field",{attrs:{label:"Комментарий","error-messages":t.commentError,name:"comment",type:"text",required:""},model:{value:t.comment,callback:function(e){t.comment=e},expression:"comment"}}):t._e(),t._v(" "),n("v-card",{staticClass:"d-flex justify-center align-center",attrs:{flat:"",height:"auto",tile:""}},[n("v-btn",{attrs:{color:"dark",disabled:0==t.postToAction.state&&""==t.comment},on:{click:function(e){return t.accept(t.postToAction)}}},[t._v("\n                                        Подтвердить\n                                    ")])],1)],1)],1)],1)],1)],1)]],2):t._e()],1)}),[],!1,null,null,null).exports},4310:(t,e,n)=>{var o=n(2330);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[t.id,o,""]]),o.locals&&(t.exports=o.locals);(0,n(5346).Z)("1411a9fa",o,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,