(self.webpackChunk=self.webpackChunk||[]).push([[566],{4566:(t,e,a)=>{"use strict";a.r(e),a.d(e,{default:()=>s});const n={name:"UserPointsHistory",data:function(t){return{l:1,events:[],page:1,dialogPost:null,delete_id:0,show:!1}},mounted:function(){this.getPage()},methods:{getPage:function(){var t=this;window.axios.get("/user/event/",{params:{page:this.page,per_page:10}}).then((function(e){t.events=e.data.data,t.l=e.data.last_page})).catch((function(t){console.log(t)}))}},watch:{page:function(){this.getPage()}}};const s=(0,a(1900).Z)(n,(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("v-container",{staticClass:"cover"},[a("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:t._s("История баллов")}}),t._v(" "),t.events.length>0?a("div",[a("v-container",[a("v-timeline",{attrs:{dense:""}},t._l(t.events,(function(e,n){return a("div",{key:n,staticStyle:{position:"relative"}},[a("v-timeline-item",{attrs:{small:"",left:"",color:e.map_object?e.map_object.color:"#00ff00"}},[a("v-card",{staticClass:"container ma-0 pa-0 d-flex flex-column",attrs:{elevation:"0"}},[a("h4",[t._v(t._s(e.map_object?e.map_object.name:e.event&&e.event.name))]),t._v(" "),a("span",[t._v(t._s(e.map_object?"-":"+")+t._s(e.points)+" баллов благодарности")]),t._v(" "),a("span",{staticClass:"text-right history-time",attrs:{title:e.created_at}},[a("span",[t._v(t._s(e.created_at))])])])],1)],1)})),0)],1),t._v(" "),t.l>1?a("div",{staticClass:"text-center xs-12"},[a("v-pagination",{attrs:{length:t.l,"total-visible":3},model:{value:t.page,callback:function(e){t.page=e},expression:"page"}})],1):t._e()],1):a("div",[a("div",{staticClass:"text-center my-3"},[t._v("Мы еще не знаем, где вы использовали баллы")])])],1)}),[],!1,null,null,null).exports}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,