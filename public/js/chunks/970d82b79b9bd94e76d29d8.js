(self.webpackChunk=self.webpackChunk||[]).push([[970],{6794:(e,r,a)=>{"use strict";a.r(r),a.d(r,{default:()=>l});var t=a(4015),n=a.n(t),o=a(3645),s=a.n(o)()(n());s.push([e.id,"#mapid[data-v-7048b705]{min-height:calc(100vh - 64px);position:absolute;height:calc(100vh - 64px);width:100%}.map-top-dialog[data-v-7048b705]{z-index:10001!important}","",{version:3,sources:["webpack://./resources/js/pages/Map.vue"],names:[],mappings:"AA+KA,wBACA,6BAAA,CACA,iBAAA,CACA,yBAAA,CACA,UACA,CACA,iCACA,uBACA",sourcesContent:["<template>\r\n    <div class=\"ma-0 pa-0\" style=\"position: relative; display: flex;\">\r\n        <div id=\"mapid\"></div>\r\n        <v-dialog v-model=\"show\">\r\n            <v-container map-top-dialog>\r\n                <v-card elevation=\"0\">\r\n                    <v-card-title>Создание зоны</v-card-title>\r\n                    <v-card-text>\r\n                        <v-text-field\r\n                                v-model=\"place.name\"\r\n                                label=\"Название\"/>\r\n                        <v-text-field\r\n                                v-model=\"place.points\"\r\n                                type=\"number\"\r\n                                label=\"Баллы благодарности\"/>\r\n                        <v-color-picker\r\n                                dot-size=\"32\"\r\n                                hide-canvas\r\n                                hide-mode-switch\r\n                                mode=\"hexa\"\r\n                                v-model=\"place.color\"\r\n                                swatches-max-height=\"200\"\r\n                        ></v-color-picker>\r\n                        <v-btn color=\"dark\" @click=\"save\" :disabled=\"place.name == ''\">\r\n                            Сохранить\r\n                        </v-btn>\r\n                    </v-card-text>\r\n                </v-card>\r\n            </v-container>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"Map\",\r\n        data: (vm) => ({\r\n            mymap : null,\r\n            markers: [\r\n                [[55.530648, 47.505122], 'Дом культуры<br> Администрация послеления'],\r\n            ],\r\n            editableLayers:new L.FeatureGroup(),\r\n            places: [],\r\n            place: {},\r\n            show: false,\r\n            drawControl: null,\r\n        }),\r\n        mounted() {\r\n            this.mymap = L.map('mapid', {drawControl: false}).setView([55.536446, 47.498600], 13);\r\n            let osm = L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoianVyYTk2IiwiYSI6ImNrcGw1MWVzODFkazQyd284bjY0ZWIxbmIifQ.CWG9L2rMStLO3i3AOgrnyQ', {\r\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n                maxZoom: 18,\r\n                id: 'mapbox/streets-v11',\r\n                tileSize: 512,\r\n                zoomOffset: -1,\r\n                accessToken: 'your.mapbox.access.token'\r\n            })\r\n            osm.addTo(this.mymap)\r\n            this.markers.forEach((v)=> {\r\n                L.marker(v[0]).addTo(this.mymap)\r\n                    .bindPopup(v[1])\r\n                    .openPopup()\r\n            });\r\n            var options = {\r\n                position: 'topright',\r\n                draw: {\r\n                    polyline: false,\r\n                    polygon: {\r\n                        allowIntersection: true, // Restricts shapes to simple polygons\r\n                        drawError: {\r\n                            color: '#e1e100', // Color the shape will turn when intersects\r\n                            message: 'Вы не может поставить тут точку' // Message that will show when intersect\r\n                        },\r\n                        shapeOptions: {\r\n                            color: '#bada55'\r\n                        }\r\n                    },\r\n                    circle: false, // Turns off this drawing tool\r\n                    circlemarker: false, // Turns off this drawing tool\r\n                    rectangle: false,\r\n                    marker: false,\r\n                },\r\n                edit: {\r\n                    featureGroup: this.editableLayers, //REQUIRED!!\r\n                    remove: true,\r\n                    edit: true,\r\n                }\r\n            };\r\n            this.mymap.addLayer(this.editableLayers);\r\n\r\n            this.drawControl = new L.Control.Draw(options);\r\n            if (this.$store.state.auth.user.role === 1024) this.mymap.addControl(this.drawControl);\r\n            this.mymap.on(L.Draw.Event.CREATED,  (e) => {\r\n                var type = e.layerType,\r\n                    layer = e.layer;\r\n                this.place = {\r\n                    coords: layer._latlngs,\r\n                    layer,\r\n                    type,\r\n                };\r\n                this.show = true;\r\n            });\r\n            this.mymap.on(L.Draw.Event.EDITED,  (e) => {\r\n                if (Object.values(e.layers._layers).length !== 1) {\r\n                    if (Object.values(e.layers._layers).length>1) {\r\n                        alert('Редактировать можно только 1 объект');\r\n                        window.location.reload();\r\n                    }\r\n                    return;\r\n                }\r\n                Object.values(e.layers._layers).forEach((l) => {\r\n                    this.place = {\r\n                        ...l.place,\r\n                        coords: l._latlngs,\r\n                        layer:l,\r\n                    };\r\n                    this.show = true;\r\n                });\r\n            });\r\n            this.mymap.on(L.Draw.Event.DELETED,  (e) => {\r\n                Object.values(e.layers._layers).forEach((l) => {\r\n                    this.delete(l.place);\r\n                })\r\n            });\r\n\r\n            this.getPlaces();\r\n        },\r\n        methods: {\r\n            getPlaces() {\r\n                window.axios.get('/mapObject/', {params: {}}).then((response) => {\r\n                    this.places = response.data.data;\r\n                    this.places.forEach((p,i) => {\r\n                        let polygon = L.polygon(p.coords, {color: p.color});\r\n                        polygon.addTo(this.mymap)\r\n                            .bindPopup(p.name+'<br/>'+'Требуются баллы: ' + p.points);\r\n                        this.places[i].polygon = polygon;\r\n                        polygon.place = p;\r\n                        this.editableLayers.addLayer(polygon);\r\n                    })\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                });\r\n            },\r\n            save() {\r\n                let data = {\r\n                    id: this.place.id,\r\n                    color: this.place.color,\r\n                    coords: this.place.coords,\r\n                    name: this.place.name,\r\n                    points: this.place.points,\r\n                    type: this.place.type,\r\n                };\r\n                data.color = data.color.hexa || data.color;\r\n                window.axios[data.id ?'put' : 'post']('/mapObject/'+(data.id||''), data).then((response) => {\r\n                    this.getPlaces();\r\n                    this.place = {};\r\n                    this.show = false;\r\n                    // this.mymap.addLayer(this.place.layer);\r\n                }).catch((e) => {\r\n                    alert('Ошибка. Проверьте данные.');\r\n                    console.log(e);\r\n                });\r\n            },\r\n            delete(place){\r\n                window.axios.delete('/mapObject/'+place.id).then((response) => {\r\n                    this.getPlaces();\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                });\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    #mapid {\r\n        min-height: calc(100vh - 64px);\r\n        position:absolute;\r\n        height: calc(100vh - 64px);\r\n        width: 100%;\r\n    }\r\n    .map-top-dialog{\r\n        z-index: 10001 !important;\r\n    }\r\n</style>"],sourceRoot:""}]);const l=s},7970:(e,r,a)=>{"use strict";a.r(r),a.d(r,{default:()=>l});function t(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,t)}return a}function n(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?t(Object(a),!0).forEach((function(r){o(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function o(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}const s={name:"Map",data:function(e){return{mymap:null,markers:[[[55.530648,47.505122],"Дом культуры<br> Администрация послеления"]],editableLayers:new L.FeatureGroup,places:[],place:{},show:!1,drawControl:null}},mounted:function(){var e=this;this.mymap=L.map("mapid",{drawControl:!1}).setView([55.536446,47.4986],13),L.tileLayer("https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoianVyYTk2IiwiYSI6ImNrcGw1MWVzODFkazQyd284bjY0ZWIxbmIifQ.CWG9L2rMStLO3i3AOgrnyQ",{attribution:'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',maxZoom:18,id:"mapbox/streets-v11",tileSize:512,zoomOffset:-1,accessToken:"your.mapbox.access.token"}).addTo(this.mymap),this.markers.forEach((function(r){L.marker(r[0]).addTo(e.mymap).bindPopup(r[1]).openPopup()}));var r={position:"topright",draw:{polyline:!1,polygon:{allowIntersection:!0,drawError:{color:"#e1e100",message:"Вы не может поставить тут точку"},shapeOptions:{color:"#bada55"}},circle:!1,circlemarker:!1,rectangle:!1,marker:!1},edit:{featureGroup:this.editableLayers,remove:!0,edit:!0}};this.mymap.addLayer(this.editableLayers),this.drawControl=new L.Control.Draw(r),1024===this.$store.state.auth.user.role&&this.mymap.addControl(this.drawControl),this.mymap.on(L.Draw.Event.CREATED,(function(r){var a=r.layerType,t=r.layer;e.place={coords:t._latlngs,layer:t,type:a},e.show=!0})),this.mymap.on(L.Draw.Event.EDITED,(function(r){1===Object.values(r.layers._layers).length?Object.values(r.layers._layers).forEach((function(r){e.place=n(n({},r.place),{},{coords:r._latlngs,layer:r}),e.show=!0})):Object.values(r.layers._layers).length>1&&(alert("Редактировать можно только 1 объект"),window.location.reload())})),this.mymap.on(L.Draw.Event.DELETED,(function(r){Object.values(r.layers._layers).forEach((function(r){e.delete(r.place)}))})),this.getPlaces()},methods:{getPlaces:function(){var e=this;window.axios.get("/mapObject/",{params:{}}).then((function(r){e.places=r.data.data,e.places.forEach((function(r,a){var t=L.polygon(r.coords,{color:r.color});t.addTo(e.mymap).bindPopup(r.name+"<br/>Требуются баллы: "+r.points),e.places[a].polygon=t,t.place=r,e.editableLayers.addLayer(t)}))})).catch((function(e){console.log(e)}))},save:function(){var e=this,r={id:this.place.id,color:this.place.color,coords:this.place.coords,name:this.place.name,points:this.place.points,type:this.place.type};r.color=r.color.hexa||r.color,window.axios[r.id?"put":"post"]("/mapObject/"+(r.id||""),r).then((function(r){e.getPlaces(),e.place={},e.show=!1})).catch((function(e){alert("Ошибка. Проверьте данные."),console.log(e)}))},delete:function(e){var r=this;window.axios.delete("/mapObject/"+e.id).then((function(e){r.getPlaces()})).catch((function(e){console.log(e)}))}}};a(9058);const l=(0,a(1900).Z)(s,(function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("div",{staticClass:"ma-0 pa-0",staticStyle:{position:"relative",display:"flex"}},[a("div",{attrs:{id:"mapid"}}),e._v(" "),a("v-dialog",{model:{value:e.show,callback:function(r){e.show=r},expression:"show"}},[a("v-container",{attrs:{"map-top-dialog":""}},[a("v-card",{attrs:{elevation:"0"}},[a("v-card-title",[e._v("Создание зоны")]),e._v(" "),a("v-card-text",[a("v-text-field",{attrs:{label:"Название"},model:{value:e.place.name,callback:function(r){e.$set(e.place,"name",r)},expression:"place.name"}}),e._v(" "),a("v-text-field",{attrs:{type:"number",label:"Баллы благодарности"},model:{value:e.place.points,callback:function(r){e.$set(e.place,"points",r)},expression:"place.points"}}),e._v(" "),a("v-color-picker",{attrs:{"dot-size":"32","hide-canvas":"","hide-mode-switch":"",mode:"hexa","swatches-max-height":"200"},model:{value:e.place.color,callback:function(r){e.$set(e.place,"color",r)},expression:"place.color"}}),e._v(" "),a("v-btn",{attrs:{color:"dark",disabled:""==e.place.name},on:{click:e.save}},[e._v("\n                        Сохранить\n                    ")])],1)],1)],1)],1)],1)}),[],!1,null,"7048b705",null).exports},9058:(e,r,a)=>{var t=a(6794);t.__esModule&&(t=t.default),"string"==typeof t&&(t=[[e.id,t,""]]),t.locals&&(e.exports=t.locals);(0,a(5346).Z)("605d9a03",t,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,