(self.webpackChunk=self.webpackChunk||[]).push([[93],{434:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,s=n(4082),i=function(){return{listeners:[],scriptId:s.uuid("tiny-script"),scriptLoaded:!1}},r=(o=i(),{load:function(e,t,n){o.scriptLoaded?n():(o.listeners.push(n),e.getElementById(o.scriptId)||function(e,t,n,o){var s=t.createElement("script");s.referrerPolicy="origin",s.type="application/javascript",s.id=e,s.src=n;var i=function(){s.removeEventListener("load",i),o()};s.addEventListener("load",i),t.head&&t.head.appendChild(s)}(o.scriptId,e,t,(function(){o.listeners.forEach((function(e){return e()})),o.scriptLoaded=!0})))},reinitialize:function(){o=i()}});t.ScriptLoader=r},8537:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.getTinymce=function(){var e="undefined"!=typeof window?window:n.g;return e&&e.tinymce?e.tinymce:null}},4082:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=["onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onBeforePaste","onBlur","onChange","onClearUndos","onClick","onContextMenu","onCopy","onCut","onDblclick","onDeactivate","onDirty","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onExecCommand","onFocus","onFocusIn","onFocusOut","onGetContent","onHide","onInit","onKeyDown","onKeyPress","onKeyUp","onLoadContent","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onNodeChange","onObjectResizeStart","onObjectResized","onObjectSelected","onPaste","onPostProcess","onPostRender","onPreProcess","onProgressState","onRedo","onRemove","onReset","onSaveContent","onSelectionChange","onSetAttrib","onSetContent","onShow","onSubmit","onUndo","onVisualAid"],o=function(e){return-1!==n.map((function(e){return e.toLowerCase()})).indexOf(e.toLowerCase())};t.isValidKey=o;var s=function(e,t,n){Object.keys(t).filter(o).forEach((function(o){var s=t[o];"function"==typeof s&&("onInit"===o?s(e,n):n.on(o.substring(2),(function(e){return s(e,n)})))}))};t.bindHandlers=s;var i=function(e,t){var n=e.$props.modelEvents?e.$props.modelEvents:null,o=Array.isArray(n)?n.join(" "):n;t.on(o||"change input undo redo",(function(){e.$emit("input",t.getContent({format:e.$props.outputFormat}))}))};t.bindModelHandlers=i;t.initEditor=function(e,t,n){var o=t.$props.value?t.$props.value:"",r=t.$props.initialValue?t.$props.initialValue:"";n.setContent(o||(t.initialized?t.cache:r)),t.$watch("value",(function(e,o){n&&"string"==typeof e&&e!==o&&e!==n.getContent({format:t.$props.outputFormat})&&n.setContent(e)})),t.$listeners.input&&i(t,n),s(e,t.$listeners,n),t.initialized=!0};var r=0;t.uuid=function(e){var t=Date.now();return e+"_"+Math.floor(1e9*Math.random())+ ++r+String(t)};t.isTextarea=function(e){return null!==e&&"textarea"===e.tagName.toLowerCase()};var a=function(e){return void 0===e||""===e?[]:Array.isArray(e)?e:e.split(" ")};t.mergePlugins=function(e,t){return a(e).concat(a(t))};t.isNullOrUndefined=function(e){return null==e}},2282:function(e,t,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s=n(434),i=n(8537),r=n(4082),a=n(7431),l=function(e){return function(){var t=o(o({},e.$props.init),{readonly:e.$props.disabled,selector:"#"+e.elementId,plugins:r.mergePlugins(e.$props.init&&e.$props.init.plugins,e.$props.plugins),toolbar:e.$props.toolbar||e.$props.init&&e.$props.init.toolbar,inline:e.inlineEditor,setup:function(t){e.editor=t,t.on("init",(function(n){return r.initEditor(n,e,t)})),e.$props.init&&"function"==typeof e.$props.init.setup&&e.$props.init.setup(t)}});r.isTextarea(e.element)&&(e.element.style.visibility="",e.element.style.display=""),i.getTinymce().init(t)}};t.Editor={props:a.editorProps,created:function(){this.elementId=this.$props.id||r.uuid("tiny-vue"),this.inlineEditor=this.$props.init&&this.$props.init.inline||this.$props.inline,this.initialized=!1},watch:{disabled:function(){this.editor.setMode(this.disabled?"readonly":"design")}},mounted:function(){if(this.element=this.$el,null!==i.getTinymce())l(this)();else if(this.element&&this.element.ownerDocument){var e=this.$props.cloudChannel?this.$props.cloudChannel:"5",t=this.$props.apiKey?this.$props.apiKey:"no-api-key",n=r.isNullOrUndefined(this.$props.tinymceScriptSrc)?"https://cdn.tiny.cloud/1/"+t+"/tinymce/"+e+"/tinymce.min.js":this.$props.tinymceScriptSrc;s.ScriptLoader.load(this.element.ownerDocument,n,l(this))}},beforeDestroy:function(){null!==i.getTinymce()&&i.getTinymce().remove(this.editor)},deactivated:function(){var e;this.inlineEditor||(this.cache=this.editor.getContent(),null===(e=i.getTinymce())||void 0===e||e.remove(this.editor))},activated:function(){!this.inlineEditor&&this.initialized&&l(this)()},render:function(e){return this.inlineEditor?function(e,t,n){return e(n||"div",{attrs:{id:t}})}(e,this.elementId,this.$props.tagName):function(e,t){return e("textarea",{attrs:{id:t},style:{visibility:"hidden"}})}(e,this.elementId)}}},7431:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.editorProps={apiKey:String,cloudChannel:String,id:String,init:Object,initialValue:String,inline:Boolean,modelEvents:[String,Array],plugins:[String,Array],tagName:String,toolbar:[String,Array],value:String,disabled:Boolean,tinymceScriptSrc:String,outputFormat:{type:String,validator:function(e){return"html"===e||"text"===e}}}},5846:(e,t,n)=>{"use strict";var o=n(2282);t.Z=o.Editor},4247:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n(4015),s=n.n(o),i=n(3645),r=n.n(i)()(s());r.push([e.id,".photo-input[data-v-595d1e4d]{position:absolute;visibility:hidden}.user-photo[data-v-595d1e4d]{border-radius:200px;width:300px;height:auto;max-height:500px;border:1px solid #01aefe}.user-photo-module[data-v-595d1e4d]{display:flex;flex-direction:column;justify-content:center;align-items:center}","",{version:3,sources:["webpack://./resources/js/components/photo-loader.vue"],names:[],mappings:"AA2FA,8BACA,iBAAA,CACA,iBACA,CAEA,6BACA,mBAAA,CACA,WAAA,CACA,WAAA,CACA,gBAAA,CACA,wBACA,CAEA,oCACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBACA",sourcesContent:['<template>\n    <v-card class="d-flex flex-column" justify-center align-center elevation="0">\n        <input\n                type="file"\n                id="files"\n                @change="addPhoto"\n                class="photo-input"\n                placeholder="azaz"\n                accept="image/jpeg,image/png,image/jpg"\n        />\n\n        <v-btn class="btn my-2" @click="clickOnInput" v-if="!one || !carouselPhotos.length">Добавить фотографию</v-btn>\n        <div v-if="one && loadedPhotos.length" class="text-center">{{loadedPhotos[0].name}}</div>\n        <div v-if="!one && carouselPhotos.length" class="user-photo-module">\n            <v-carousel v-model="n">\n                <v-carousel-item\n                        v-for="(photo, i) in carouselPhotos"\n                        :key="i"\n                        :src="photo"\n                        contain\n                >\n                </v-carousel-item>\n            </v-carousel>\n        </div>\n    </v-card>\n</template>\n\n<script>\n\n    export default {\n        name: \'photo-loader\',\n        props: {\n            radius: {\n                type: Number,\n            },\n            one: {\n                type: Boolean,\n                default: false,\n            }\n        },\n        components: {},\n        data() {\n            return {\n                n: 0,\n                photo: \'\',\n                loadedPhotos: [],\n                carouselPhotos:[],\n                fileImg: null,\n            }\n        },\n        methods: {\n            getPhotos() {\n                return this.loadedPhotos;\n            },\n            getFirst() {\n                return this.loadedPhotos[0];\n            },\n            returnFormData(val) {\n                this.$emit(\'save-photo\', val)\n            },\n            updatePhoto(val) {\n                this.photo = val\n                this.showCropperDialog = false\n            },\n            clickOnInput() {\n                document.getElementById(\'files\').files = (new DataTransfer()).files;\n                document.getElementById(\'files\').click()\n\n            },\n            addPhoto(event) {\n                this.fileImg = event.target.files[0]\n                if (this.fileImg.size > 5024000) {\n                    this.$root.$children[0].snackbarText = \'Размер файла не может быть больше 5МБ\'\n                    this.$root.$children[0].snackbar = true\n                    return;\n                }\n                if(this.loadedPhotos.length > 10) {\n                    this.$root.$children[0].snackbarText = \'Вы не можете загрузить больше 10 фотографий\'\n                    this.$root.$children[0].snackbar = true\n                    return;\n                }\n                this.carouselPhotos.push(URL.createObjectURL(this.fileImg))\n                this.loadedPhotos.push(this.fileImg)\n                this.n = this.loadedPhotos.length-1\n                this.fileImg = null;\n            },\n        },\n    }\n<\/script>\n\n<style scoped>\n    .photo-input {\n        position: absolute;\n        visibility: hidden;\n    }\n\n    .user-photo {\n        border-radius: 200px;\n        width: 300px;\n        height: auto;\n        max-height: 500px;\n        border: 1px solid #01aefe;\n    }\n\n    .user-photo-module {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n</style>\n'],sourceRoot:""}]);const a=r},4298:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n(4015),s=n.n(o),i=n(3645),r=n.n(i)()(s());r.push([e.id,".description.v-text-field>.v-input__control>.v-input__slot:after,.description.v-text-field>.v-input__control>.v-input__slot:before,.description .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/RequestEdit.vue"],names:[],mappings:"AAyGA,6KAEA,sBACA",sourcesContent:['<template>\n    <v-container\n            class="cover">\n        <v-toolbar-title align="center" justify="center" class="mb-2"\n        v-text="\'Новый запрос\' ">\n        </v-toolbar-title>\n        <v-combobox\n                v-model="request.role"\n                :erro-messages="messages.role"\n                :items="roles"\n                label="Куда"\n                dense\n        ></v-combobox>\n        <v-combobox\n                v-model="request.type"\n                :erro-messages="messages.type"\n                :items="types"\n                label="Тип заявления"\n                dense\n        ></v-combobox>\n        <v-textarea\n            type="text"\n            name="title"\n            label="Текст заявления"\n            v-model="request.text"\n            :error-messages="messages.text"\n            >\n        </v-textarea>\n\n        <v-btn class="save-btn"\n               v-if="$route.params.id == 0"\n               color="success"\n               fab\n               @click="create"\n               :disabled="!(request.role && request.type && request.text)"\n               dark>\n            <v-icon>mdi-check-outline</v-icon>\n        </v-btn>\n    </v-container>\n</template>\n\n<script>\n    import Editor from \'@tinymce/tinymce-vue\';\n    import PhotoLoader from \'@/components/photo-loader\'\n    export default {\n        name: "RequestEdit",\n        components: {\n            Editor,\n            PhotoLoader\n        },\n        data: (vm) => {\n            return {\n                request: {\n                    id: vm.$route.params.id,\n                    type: null,\n                    role: null,\n                    text: \'\',\n                },\n                roles: [\n                    {\n                        value: 128,\n                        text: \'В библиотеку\'\n                    },\n                    {\n                        value: 1024,\n                        text: \'В администрацию\'\n                    },\n                ],\n                types : vm.$store.state.types,\n                messages: {\n                    type: \'\',\n                    text: \'\',\n                    role: \'\',\n                }\n            }\n        },\n        mounted() {\n        },\n        methods: {\n            create() {\n                if (!(this.request.id > 0))\n                    window.axios.post(\'/request\', {\n                        text: this.request.text,\n                        role: this.request.role?.value || null,\n                        type: this.request.type?.value || null,\n                    })\n                    .then((r) => {\n                        this.$router.push({name: "requests"});\n                    }).catch((e) => {\n                        if (e.response && e.response.status === 422) {\n                            let errors = e.response.data.errors\n                            Object.keys(this.messages).forEach((k)=> {\n                                this.messages[k] = errors[k]?.[0] || \'\';\n                            });\n                    }\n                })\n            }\n        }\n    }\n<\/script>\n\n<style>\n    .description .v-text-field__slot textarea {\n        display: none !important;\n    }\n    .description.v-text-field>.v-input__control>.v-input__slot:after ,\n    .description.v-text-field>.v-input__control>.v-input__slot:before{\n        display: none !important;\n    }\n</style>'],sourceRoot:""}]);const a=r},7136:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});const o={name:"photo-loader",props:{radius:{type:Number},one:{type:Boolean,default:!1}},components:{},data:function(){return{n:0,photo:"",loadedPhotos:[],carouselPhotos:[],fileImg:null}},methods:{getPhotos:function(){return this.loadedPhotos},getFirst:function(){return this.loadedPhotos[0]},returnFormData:function(e){this.$emit("save-photo",e)},updatePhoto:function(e){this.photo=e,this.showCropperDialog=!1},clickOnInput:function(){document.getElementById("files").files=(new DataTransfer).files,document.getElementById("files").click()},addPhoto:function(e){return this.fileImg=e.target.files[0],this.fileImg.size>5024e3?(this.$root.$children[0].snackbarText="Размер файла не может быть больше 5МБ",void(this.$root.$children[0].snackbar=!0)):this.loadedPhotos.length>10?(this.$root.$children[0].snackbarText="Вы не можете загрузить больше 10 фотографий",void(this.$root.$children[0].snackbar=!0)):(this.carouselPhotos.push(URL.createObjectURL(this.fileImg)),this.loadedPhotos.push(this.fileImg),this.n=this.loadedPhotos.length-1,void(this.fileImg=null))}}};n(8258);const s=(0,n(1900).Z)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-card",{staticClass:"d-flex flex-column",attrs:{"justify-center":"","align-center":"",elevation:"0"}},[n("input",{staticClass:"photo-input",attrs:{type:"file",id:"files",placeholder:"azaz",accept:"image/jpeg,image/png,image/jpg"},on:{change:e.addPhoto}}),e._v(" "),e.one&&e.carouselPhotos.length?e._e():n("v-btn",{staticClass:"btn my-2",on:{click:e.clickOnInput}},[e._v("Добавить фотографию")]),e._v(" "),e.one&&e.loadedPhotos.length?n("div",{staticClass:"text-center"},[e._v(e._s(e.loadedPhotos[0].name))]):e._e(),e._v(" "),!e.one&&e.carouselPhotos.length?n("div",{staticClass:"user-photo-module"},[n("v-carousel",{model:{value:e.n,callback:function(t){e.n=t},expression:"n"}},e._l(e.carouselPhotos,(function(e,t){return n("v-carousel-item",{key:t,attrs:{src:e,contain:""}})})),1)],1):e._e()],1)}),[],!1,null,"595d1e4d",null).exports},4093:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n(5846),s=n(7136);const i={name:"RequestEdit",components:{Editor:o.Z,PhotoLoader:s.Z},data:function(e){return{request:{id:e.$route.params.id,type:null,role:null,text:""},roles:[{value:128,text:"В библиотеку"},{value:1024,text:"В администрацию"}],types:e.$store.state.types,messages:{type:"",text:"",role:""}}},mounted:function(){},methods:{create:function(){var e,t,n=this;this.request.id>0||window.axios.post("/request",{text:this.request.text,role:(null===(e=this.request.role)||void 0===e?void 0:e.value)||null,type:(null===(t=this.request.type)||void 0===t?void 0:t.value)||null}).then((function(e){n.$router.push({name:"requests"})})).catch((function(e){if(e.response&&422===e.response.status){var t=e.response.data.errors;Object.keys(n.messages).forEach((function(e){var o;n.messages[e]=(null===(o=t[e])||void 0===o?void 0:o[0])||""}))}}))}}};n(2633);const r=(0,n(1900).Z)(i,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s("Новый запрос")}}),e._v(" "),n("v-combobox",{attrs:{"erro-messages":e.messages.role,items:e.roles,label:"Куда",dense:""},model:{value:e.request.role,callback:function(t){e.$set(e.request,"role",t)},expression:"request.role"}}),e._v(" "),n("v-combobox",{attrs:{"erro-messages":e.messages.type,items:e.types,label:"Тип заявления",dense:""},model:{value:e.request.type,callback:function(t){e.$set(e.request,"type",t)},expression:"request.type"}}),e._v(" "),n("v-textarea",{attrs:{type:"text",name:"title",label:"Текст заявления","error-messages":e.messages.text},model:{value:e.request.text,callback:function(t){e.$set(e.request,"text",t)},expression:"request.text"}}),e._v(" "),0==e.$route.params.id?n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!(e.request.role&&e.request.type&&e.request.text),dark:""},on:{click:e.create}},[n("v-icon",[e._v("mdi-check-outline")])],1):e._e()],1)}),[],!1,null,null,null).exports},8258:(e,t,n)=>{var o=n(4247);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals);(0,n(5346).Z)("34d8856a",o,!0,{})},2633:(e,t,n)=>{var o=n(4298);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals);(0,n(5346).Z)("7f44e0e5",o,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRpbnltY2UvdGlueW1jZS12dWUvbGliL2Nqcy9tYWluL3RzL1NjcmlwdExvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRpbnltY2UvdGlueW1jZS12dWUvbGliL2Nqcy9tYWluL3RzL1RpbnlNQ0UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0aW55bWNlL3RpbnltY2UtdnVlL2xpYi9janMvbWFpbi90cy9VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRpbnltY2UvdGlueW1jZS12dWUvbGliL2Nqcy9tYWluL3RzL2NvbXBvbmVudHMvRWRpdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdGlueW1jZS90aW55bWNlLXZ1ZS9saWIvY2pzL21haW4vdHMvY29tcG9uZW50cy9FZGl0b3JQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0aW55bWNlL3RpbnltY2UtdnVlL2xpYi9janMvbWFpbi90cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9waG90by1sb2FkZXIudnVlP2IxNzMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BhZ2VzL1JlcXVlc3RFZGl0LnZ1ZT9jMDI4Iiwid2VicGFjazovLy9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9waG90by1sb2FkZXIudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3Bob3RvLWxvYWRlci52dWU/MjZlYSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9waG90by1sb2FkZXIudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3Bob3RvLWxvYWRlci52dWU/YmQ2NyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvUmVxdWVzdEVkaXQudnVlP2MyMWYiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9qcy9wYWdlcy9SZXF1ZXN0RWRpdC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BhZ2VzL1JlcXVlc3RFZGl0LnZ1ZT9jMDhjIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9wYWdlcy9SZXF1ZXN0RWRpdC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGhvdG8tbG9hZGVyLnZ1ZT9mMjc4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9wYWdlcy9SZXF1ZXN0RWRpdC52dWU/YjE3YyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInN0YXRlIiwiVXRpbHNfMSIsImNyZWF0ZVN0YXRlIiwibGlzdGVuZXJzIiwic2NyaXB0SWQiLCJ1dWlkIiwic2NyaXB0TG9hZGVkIiwiU2NyaXB0TG9hZGVyIiwibG9hZCIsImRvYyIsInVybCIsImNhbGxiYWNrIiwicHVzaCIsImdldEVsZW1lbnRCeUlkIiwic2NyaXB0VGFnIiwiY3JlYXRlRWxlbWVudCIsInJlZmVycmVyUG9saWN5IiwidHlwZSIsImlkIiwic3JjIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiaW5qZWN0U2NyaXB0VGFnIiwiZm9yRWFjaCIsImZuIiwicmVpbml0aWFsaXplIiwiZ2V0VGlueW1jZSIsImdsb2JhbCIsIndpbmRvdyIsImciLCJ0aW55bWNlIiwidmFsaWRFdmVudHMiLCJpc1ZhbGlkS2V5Iiwia2V5IiwibWFwIiwiZXZlbnQiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJiaW5kSGFuZGxlcnMiLCJpbml0RXZlbnQiLCJlZGl0b3IiLCJrZXlzIiwiZmlsdGVyIiwib24iLCJzdWJzdHJpbmciLCJlIiwiYmluZE1vZGVsSGFuZGxlcnMiLCJjdHgiLCJtb2RlbEV2ZW50cyIsIiRwcm9wcyIsIm5vcm1hbGl6ZWRFdmVudHMiLCJBcnJheSIsImlzQXJyYXkiLCJqb2luIiwiJGVtaXQiLCJnZXRDb250ZW50IiwiZm9ybWF0Iiwib3V0cHV0Rm9ybWF0IiwiaW5pdEVkaXRvciIsImluaXRpYWxWYWx1ZSIsInNldENvbnRlbnQiLCJpbml0aWFsaXplZCIsImNhY2hlIiwiJHdhdGNoIiwidmFsIiwicHJldlZhbCIsIiRsaXN0ZW5lcnMiLCJpbnB1dCIsInVuaXF1ZSIsInByZWZpeCIsInRpbWUiLCJEYXRlIiwibm93IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiU3RyaW5nIiwiaXNUZXh0YXJlYSIsImVsZW1lbnQiLCJ0YWdOYW1lIiwibm9ybWFsaXplUGx1Z2luQXJyYXkiLCJwbHVnaW5zIiwic3BsaXQiLCJtZXJnZVBsdWdpbnMiLCJpbml0UGx1Z2lucyIsImlucHV0UGx1Z2lucyIsImNvbmNhdCIsImlzTnVsbE9yVW5kZWZpbmVkIiwiX19hc3NpZ24iLCJ0aGlzIiwiYXNzaWduIiwidCIsInMiLCJpIiwibiIsImFyZ3VtZW50cyIsImxlbmd0aCIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIlNjcmlwdExvYWRlcl8xIiwiVGlueU1DRV8xIiwiRWRpdG9yUHJvcFR5cGVzXzEiLCJpbml0aWFsaXNlIiwiZmluYWxJbml0IiwiaW5pdCIsInJlYWRvbmx5IiwiZGlzYWJsZWQiLCJzZWxlY3RvciIsImVsZW1lbnRJZCIsInRvb2xiYXIiLCJpbmxpbmUiLCJpbmxpbmVFZGl0b3IiLCJzZXR1cCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImRpc3BsYXkiLCJFZGl0b3IiLCJwcm9wcyIsImVkaXRvclByb3BzIiwiY3JlYXRlZCIsIndhdGNoIiwic2V0TW9kZSIsIm1vdW50ZWQiLCIkZWwiLCJvd25lckRvY3VtZW50IiwiY2hhbm5lbCIsImNsb3VkQ2hhbm5lbCIsImFwaUtleSIsInNjcmlwdFNyYyIsInRpbnltY2VTY3JpcHRTcmMiLCJiZWZvcmVEZXN0cm95IiwicmVtb3ZlIiwiZGVhY3RpdmF0ZWQiLCJfYSIsImFjdGl2YXRlZCIsInJlbmRlciIsImgiLCJhdHRycyIsInJlbmRlcklubGluZSIsInJlbmRlcklmcmFtZSIsIkJvb2xlYW4iLCJ2YWxpZGF0b3IiLCJwcm9wIiwiRWRpdG9yXzEiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIm1vZHVsZSIsIl92bSIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJhZGRQaG90byIsIl92Iiwib25lIiwiY2Fyb3VzZWxQaG90b3MiLCJfZSIsImNsaWNrT25JbnB1dCIsImxvYWRlZFBob3RvcyIsIl9zIiwibmFtZSIsIm1vZGVsIiwiJCR2IiwiZXhwcmVzc2lvbiIsIl9sIiwicGhvdG8iLCJkb21Qcm9wcyIsIm1lc3NhZ2VzIiwicm9sZSIsInJvbGVzIiwicmVxdWVzdCIsIiRzZXQiLCJ0eXBlcyIsInRleHQiLCIkcm91dGUiLCJwYXJhbXMiLCJjcmVhdGUiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJsb2NhbHMiLCJhZGQiXSwibWFwcGluZ3MiOiJpRkFRQUEsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdEQsSUFTUUMsRUFUSkMsRUFBVSxFQUFRLE1BQ2xCQyxFQUFjLFdBQ2QsTUFBTyxDQUNIQyxVQUFXLEdBQ1hDLFNBQVVILEVBQVFJLEtBQUssZUFDdkJDLGNBQWMsSUEyQ2xCQyxHQXZDSVAsRUFBUUUsSUFrQ0wsQ0FDSE0sS0FuQk8sU0FBVUMsRUFBS0MsRUFBS0MsR0FDdkJYLEVBQU1NLGFBQ05LLEtBR0FYLEVBQU1HLFVBQVVTLEtBQUtELEdBQ2hCRixFQUFJSSxlQUFlYixFQUFNSSxXQXJCaEIsU0FBVUEsRUFBVUssRUFBS0MsRUFBS0MsR0FDaEQsSUFBSUcsRUFBWUwsRUFBSU0sY0FBYyxVQUNsQ0QsRUFBVUUsZUFBaUIsU0FDM0JGLEVBQVVHLEtBQU8seUJBQ2pCSCxFQUFVSSxHQUFLZCxFQUNmVSxFQUFVSyxJQUFN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UUFBUS9KLE1BQVF1SSxFQUFJd0IsUUFBUUcsTUFBTSxLQUFPLElBQUlySSxHQUFHLENBQUMsTUFBUTBHLEVBQUk4QixTQUFTLENBQUMzQixFQUFHLFNBQVMsQ0FBQ0gsRUFBSU8sR0FBRyx3QkFBd0IsR0FBR1AsRUFBSVUsTUFBTSxLQUN4dUMsSUdXcEIsRUFDQSxLQUNBLEtBQ0EsTSx3QkNaRixJQUFJcUIsRUFBVSxFQUFRLE1BQ25CQSxFQUFRQyxhQUFZRCxFQUFVQSxFQUFRRSxTQUNuQixpQkFBWkYsSUFBc0JBLEVBQVUsQ0FBQyxDQUFDaEMsRUFBT3JJLEdBQUlxSyxFQUFTLE1BQzdEQSxFQUFRRyxTQUFRbkMsRUFBT3pKLFFBQVV5TCxFQUFRRyxTQUcvQkMsRUFESCxXQUNPLFdBQVlKLEdBQVMsRUFBTSxLLGVDTjVDLElBQUlBLEVBQVUsRUFBUSxNQUNuQkEsRUFBUUMsYUFBWUQsRUFBVUEsRUFBUUUsU0FDbkIsaUJBQVpGLElBQXNCQSxFQUFVLENBQUMsQ0FBQ2hDLEVBQU9ySSxHQUFJcUssRUFBUyxNQUM3REEsRUFBUUcsU0FBUW5DLEVBQU96SixRQUFVeUwsRUFBUUcsU0FHL0JDLEVBREgsV0FDTyxXQUFZSixHQUFTLEVBQU0iLCJmaWxlIjoianMvY2h1bmtzLzkzYTU2N2FjMzQ5ZTJiMzk5ZDczOWYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4LXByZXNlbnQsIEVwaG94LCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBVdGlsc18xID0gcmVxdWlyZShcIi4vVXRpbHNcIik7XG52YXIgY3JlYXRlU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbGlzdGVuZXJzOiBbXSxcbiAgICAgICAgc2NyaXB0SWQ6IFV0aWxzXzEudXVpZCgndGlueS1zY3JpcHQnKSxcbiAgICAgICAgc2NyaXB0TG9hZGVkOiBmYWxzZVxuICAgIH07XG59O1xudmFyIENyZWF0ZVNjcmlwdExvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBjcmVhdGVTdGF0ZSgpO1xuICAgIHZhciBpbmplY3RTY3JpcHRUYWcgPSBmdW5jdGlvbiAoc2NyaXB0SWQsIGRvYywgdXJsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgc2NyaXB0VGFnID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBzY3JpcHRUYWcucmVmZXJyZXJQb2xpY3kgPSAnb3JpZ2luJztcbiAgICAgICAgc2NyaXB0VGFnLnR5cGUgPSAnYXBwbGljYXRpb24vamF2YXNjcmlwdCc7XG4gICAgICAgIHNjcmlwdFRhZy5pZCA9IHNjcmlwdElkO1xuICAgICAgICBzY3JpcHRUYWcuc3JjID0gdXJsO1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNjcmlwdFRhZy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgaGFuZGxlcik7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9O1xuICAgICAgICBzY3JpcHRUYWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGhhbmRsZXIpO1xuICAgICAgICBpZiAoZG9jLmhlYWQpIHtcbiAgICAgICAgICAgIGRvYy5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdFRhZyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBsb2FkID0gZnVuY3Rpb24gKGRvYywgdXJsLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAoc3RhdGUuc2NyaXB0TG9hZGVkKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKCFkb2MuZ2V0RWxlbWVudEJ5SWQoc3RhdGUuc2NyaXB0SWQpKSB7XG4gICAgICAgICAgICAgICAgaW5qZWN0U2NyaXB0VGFnKHN0YXRlLnNjcmlwdElkLCBkb2MsIHVybCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zY3JpcHRMb2FkZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBPbmx5IHRvIGJlIHVzZWQgYnkgdGVzdHMuXG4gICAgdmFyIHJlaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhdGUgPSBjcmVhdGVTdGF0ZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9hZDogbG9hZCxcbiAgICAgICAgcmVpbml0aWFsaXplOiByZWluaXRpYWxpemVcbiAgICB9O1xufTtcbnZhciBTY3JpcHRMb2FkZXIgPSBDcmVhdGVTY3JpcHRMb2FkZXIoKTtcbmV4cG9ydHMuU2NyaXB0TG9hZGVyID0gU2NyaXB0TG9hZGVyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxOC1wcmVzZW50LCBFcGhveCwgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogZ2xvYmFsKTsgfTtcbnZhciBnZXRUaW55bWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBnbG9iYWwgPSBnZXRHbG9iYWwoKTtcbiAgICByZXR1cm4gZ2xvYmFsICYmIGdsb2JhbC50aW55bWNlID8gZ2xvYmFsLnRpbnltY2UgOiBudWxsO1xufTtcbmV4cG9ydHMuZ2V0VGlueW1jZSA9IGdldFRpbnltY2U7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE4LXByZXNlbnQsIEVwaG94LCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIDIgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB2YWxpZEV2ZW50cyA9IFtcbiAgICAnb25BY3RpdmF0ZScsXG4gICAgJ29uQWRkVW5kbycsXG4gICAgJ29uQmVmb3JlQWRkVW5kbycsXG4gICAgJ29uQmVmb3JlRXhlY0NvbW1hbmQnLFxuICAgICdvbkJlZm9yZUdldENvbnRlbnQnLFxuICAgICdvbkJlZm9yZVJlbmRlclVJJyxcbiAgICAnb25CZWZvcmVTZXRDb250ZW50JyxcbiAgICAnb25CZWZvcmVQYXN0ZScsXG4gICAgJ29uQmx1cicsXG4gICAgJ29uQ2hhbmdlJyxcbiAgICAnb25DbGVhclVuZG9zJyxcbiAgICAnb25DbGljaycsXG4gICAgJ29uQ29udGV4dE1lbnUnLFxuICAgICdvbkNvcHknLFxuICAgICdvbkN1dCcsXG4gICAgJ29uRGJsY2xpY2snLFxuICAgICdvbkRlYWN0aXZhdGUnLFxuICAgICdvbkRpcnR5JyxcbiAgICAnb25EcmFnJyxcbiAgICAnb25EcmFnRHJvcCcsXG4gICAgJ29uRHJhZ0VuZCcsXG4gICAgJ29uRHJhZ0dlc3R1cmUnLFxuICAgICdvbkRyYWdPdmVyJyxcbiAgICAnb25Ecm9wJyxcbiAgICAnb25FeGVjQ29tbWFuZCcsXG4gICAgJ29uRm9jdXMnLFxuICAgICdvbkZvY3VzSW4nLFxuICAgICdvbkZvY3VzT3V0JyxcbiAgICAnb25HZXRDb250ZW50JyxcbiAgICAnb25IaWRlJyxcbiAgICAnb25Jbml0JyxcbiAgICAnb25LZXlEb3duJyxcbiAgICAnb25LZXlQcmVzcycsXG4gICAgJ29uS2V5VXAnLFxuICAgICdvbkxvYWRDb250ZW50JyxcbiAgICAnb25Nb3VzZURvd24nLFxuICAgICdvbk1vdXNlRW50ZXInLFxuICAgICdvbk1vdXNlTGVhdmUnLFxuICAgICdvbk1vdXNlTW92ZScsXG4gICAgJ29uTW91c2VPdXQnLFxuICAgICdvbk1vdXNlT3ZlcicsXG4gICAgJ29uTW91c2VVcCcsXG4gICAgJ29uTm9kZUNoYW5nZScsXG4gICAgJ29uT2JqZWN0UmVzaXplU3RhcnQnLFxuICAgICdvbk9iamVjdFJlc2l6ZWQnLFxuICAgICdvbk9iamVjdFNlbGVjdGVkJyxcbiAgICAnb25QYXN0ZScsXG4gICAgJ29uUG9zdFByb2Nlc3MnLFxuICAgICdvblBvc3RSZW5kZXInLFxuICAgICdvblByZVByb2Nlc3MnLFxuICAgICdvblByb2dyZXNzU3RhdGUnLFxuICAgICdvblJlZG8nLFxuICAgICdvblJlbW92ZScsXG4gICAgJ29uUmVzZXQnLFxuICAgICdvblNhdmVDb250ZW50JyxcbiAgICAnb25TZWxlY3Rpb25DaGFuZ2UnLFxuICAgICdvblNldEF0dHJpYicsXG4gICAgJ29uU2V0Q29udGVudCcsXG4gICAgJ29uU2hvdycsXG4gICAgJ29uU3VibWl0JyxcbiAgICAnb25VbmRvJyxcbiAgICAnb25WaXN1YWxBaWQnXG5dO1xudmFyIGlzVmFsaWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB2YWxpZEV2ZW50cy5tYXAoZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBldmVudC50b0xvd2VyQ2FzZSgpOyB9KS5pbmRleE9mKGtleS50b0xvd2VyQ2FzZSgpKSAhPT0gLTE7IH07XG5leHBvcnRzLmlzVmFsaWRLZXkgPSBpc1ZhbGlkS2V5O1xudmFyIGJpbmRIYW5kbGVycyA9IGZ1bmN0aW9uIChpbml0RXZlbnQsIGxpc3RlbmVycywgZWRpdG9yKSB7XG4gICAgT2JqZWN0LmtleXMobGlzdGVuZXJzKVxuICAgICAgICAuZmlsdGVyKGlzVmFsaWRLZXkpXG4gICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBsaXN0ZW5lcnNba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoa2V5ID09PSAnb25Jbml0Jykge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIoaW5pdEV2ZW50LCBlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLm9uKGtleS5zdWJzdHJpbmcoMiksIGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVyKGUsIGVkaXRvcik7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5iaW5kSGFuZGxlcnMgPSBiaW5kSGFuZGxlcnM7XG52YXIgYmluZE1vZGVsSGFuZGxlcnMgPSBmdW5jdGlvbiAoY3R4LCBlZGl0b3IpIHtcbiAgICB2YXIgbW9kZWxFdmVudHMgPSBjdHguJHByb3BzLm1vZGVsRXZlbnRzID8gY3R4LiRwcm9wcy5tb2RlbEV2ZW50cyA6IG51bGw7XG4gICAgdmFyIG5vcm1hbGl6ZWRFdmVudHMgPSBBcnJheS5pc0FycmF5KG1vZGVsRXZlbnRzKSA/IG1vZGVsRXZlbnRzLmpvaW4oJyAnKSA6IG1vZGVsRXZlbnRzO1xuICAgIGVkaXRvci5vbihub3JtYWxpemVkRXZlbnRzID8gbm9ybWFsaXplZEV2ZW50cyA6ICdjaGFuZ2UgaW5wdXQgdW5kbyByZWRvJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjdHguJGVtaXQoJ2lucHV0JywgZWRpdG9yLmdldENvbnRlbnQoeyBmb3JtYXQ6IGN0eC4kcHJvcHMub3V0cHV0Rm9ybWF0IH0pKTtcbiAgICB9KTtcbn07XG5leHBvcnRzLmJpbmRNb2RlbEhhbmRsZXJzID0gYmluZE1vZGVsSGFuZGxlcnM7XG52YXIgaW5pdEVkaXRvciA9IGZ1bmN0aW9uIChpbml0RXZlbnQsIGN0eCwgZWRpdG9yKSB7XG4gICAgdmFyIHZhbHVlID0gY3R4LiRwcm9wcy52YWx1ZSA/IGN0eC4kcHJvcHMudmFsdWUgOiAnJztcbiAgICB2YXIgaW5pdGlhbFZhbHVlID0gY3R4LiRwcm9wcy5pbml0aWFsVmFsdWUgPyBjdHguJHByb3BzLmluaXRpYWxWYWx1ZSA6ICcnO1xuICAgIGVkaXRvci5zZXRDb250ZW50KHZhbHVlIHx8IChjdHguaW5pdGlhbGl6ZWQgPyBjdHguY2FjaGUgOiBpbml0aWFsVmFsdWUpKTtcbiAgICAvLyBBbHdheXMgYmluZCB0aGUgdmFsdWUgbGlzdGVuZXIgaW4gY2FzZSB1c2VycyB1c2UgOnZhbHVlIGluc3RlYWQgb2Ygdi1tb2RlbFxuICAgIGN0eC4kd2F0Y2goJ3ZhbHVlJywgZnVuY3Rpb24gKHZhbCwgcHJldlZhbCkge1xuICAgICAgICBpZiAoZWRpdG9yICYmIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIHZhbCAhPT0gcHJldlZhbCAmJiB2YWwgIT09IGVkaXRvci5nZXRDb250ZW50KHsgZm9ybWF0OiBjdHguJHByb3BzLm91dHB1dEZvcm1hdCB9KSkge1xuICAgICAgICAgICAgZWRpdG9yLnNldENvbnRlbnQodmFsKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGNoZWNrcyBpZiB0aGUgdi1tb2RlbCBzaG9ydGhhbmQgaXMgdXNlZCAod2hpY2ggc2V0cyBhbiB2LW9uOmlucHV0IGxpc3RlbmVyKSBhbmQgdGhlbiBiaW5kcyBlaXRoZXJcbiAgICAvLyBzcGVjaWZpZWQgdGhlIGV2ZW50cyBvciBkZWZhdWx0cyB0byBcImNoYW5nZSBrZXl1cFwiIGV2ZW50IGFuZCBlbWl0cyB0aGUgZWRpdG9yIGNvbnRlbnQgb24gdGhhdCBldmVudFxuICAgIGlmIChjdHguJGxpc3RlbmVycy5pbnB1dCkge1xuICAgICAgICBiaW5kTW9kZWxIYW5kbGVycyhjdHgsIGVkaXRvcik7XG4gICAgfVxuICAgIGJpbmRIYW5kbGVycyhpbml0RXZlbnQsIGN0eC4kbGlzdGVuZXJzLCBlZGl0b3IpO1xuICAgIGN0eC5pbml0aWFsaXplZCA9IHRydWU7XG59O1xuZXhwb3J0cy5pbml0RWRpdG9yID0gaW5pdEVkaXRvcjtcbnZhciB1bmlxdWUgPSAwO1xudmFyIHV1aWQgPSBmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgdmFyIHRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZhciByYW5kb20gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwMDAwKTtcbiAgICB1bmlxdWUrKztcbiAgICByZXR1cm4gcHJlZml4ICsgJ18nICsgcmFuZG9tICsgdW5pcXVlICsgU3RyaW5nKHRpbWUpO1xufTtcbmV4cG9ydHMudXVpZCA9IHV1aWQ7XG52YXIgaXNUZXh0YXJlYSA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgIT09IG51bGwgJiYgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICd0ZXh0YXJlYSc7XG59O1xuZXhwb3J0cy5pc1RleHRhcmVhID0gaXNUZXh0YXJlYTtcbnZhciBub3JtYWxpemVQbHVnaW5BcnJheSA9IGZ1bmN0aW9uIChwbHVnaW5zKSB7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW5zID09PSAndW5kZWZpbmVkJyB8fCBwbHVnaW5zID09PSAnJykge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHBsdWdpbnMpID8gcGx1Z2lucyA6IHBsdWdpbnMuc3BsaXQoJyAnKTtcbn07XG52YXIgbWVyZ2VQbHVnaW5zID0gZnVuY3Rpb24gKGluaXRQbHVnaW5zLCBpbnB1dFBsdWdpbnMpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplUGx1Z2luQXJyYXkoaW5pdFBsdWdpbnMpLmNvbmNhdChub3JtYWxpemVQbHVnaW5BcnJheShpbnB1dFBsdWdpbnMpKTtcbn07XG5leHBvcnRzLm1lcmdlUGx1Z2lucyA9IG1lcmdlUGx1Z2lucztcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZDsgfTtcbmV4cG9ydHMuaXNOdWxsT3JVbmRlZmluZWQgPSBpc051bGxPclVuZGVmaW5lZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgtcHJlc2VudCwgRXBob3gsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMiBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBTY3JpcHRMb2FkZXJfMSA9IHJlcXVpcmUoXCIuLi9TY3JpcHRMb2FkZXJcIik7XG52YXIgVGlueU1DRV8xID0gcmVxdWlyZShcIi4uL1RpbnlNQ0VcIik7XG52YXIgVXRpbHNfMSA9IHJlcXVpcmUoXCIuLi9VdGlsc1wiKTtcbnZhciBFZGl0b3JQcm9wVHlwZXNfMSA9IHJlcXVpcmUoXCIuL0VkaXRvclByb3BUeXBlc1wiKTtcbnZhciByZW5kZXJJbmxpbmUgPSBmdW5jdGlvbiAoaCwgaWQsIHRhZ05hbWUpIHtcbiAgICByZXR1cm4gaCh0YWdOYW1lID8gdGFnTmFtZSA6ICdkaXYnLCB7XG4gICAgICAgIGF0dHJzOiB7IGlkOiBpZCB9XG4gICAgfSk7XG59O1xudmFyIHJlbmRlcklmcmFtZSA9IGZ1bmN0aW9uIChoLCBpZCkge1xuICAgIHJldHVybiBoKCd0ZXh0YXJlYScsIHtcbiAgICAgICAgYXR0cnM6IHsgaWQ6IGlkIH0sXG4gICAgICAgIHN0eWxlOiB7IHZpc2liaWxpdHk6ICdoaWRkZW4nIH1cbiAgICB9KTtcbn07XG52YXIgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uIChjdHgpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZmluYWxJbml0ID0gX19hc3NpZ24oX19hc3NpZ24oe30sIGN0eC4kcHJvcHMuaW5pdCksIHsgcmVhZG9ubHk6IGN0eC4kcHJvcHMuZGlzYWJsZWQsIHNlbGVjdG9yOiBcIiNcIiArIGN0eC5lbGVtZW50SWQsIHBsdWdpbnM6IFV0aWxzXzEubWVyZ2VQbHVnaW5zKGN0eC4kcHJvcHMuaW5pdCAmJiBjdHguJHByb3BzLmluaXQucGx1Z2lucywgY3R4LiRwcm9wcy5wbHVnaW5zKSwgdG9vbGJhcjogY3R4LiRwcm9wcy50b29sYmFyIHx8IChjdHguJHByb3BzLmluaXQgJiYgY3R4LiRwcm9wcy5pbml0LnRvb2xiYXIpLCBpbmxpbmU6IGN0eC5pbmxpbmVFZGl0b3IsIHNldHVwOiBmdW5jdGlvbiAoZWRpdG9yKSB7XG4gICAgICAgICAgICBjdHguZWRpdG9yID0gZWRpdG9yO1xuICAgICAgICAgICAgZWRpdG9yLm9uKCdpbml0JywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIFV0aWxzXzEuaW5pdEVkaXRvcihlLCBjdHgsIGVkaXRvcik7IH0pO1xuICAgICAgICAgICAgaWYgKGN0eC4kcHJvcHMuaW5pdCAmJiB0eXBlb2YgY3R4LiRwcm9wcy5pbml0LnNldHVwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY3R4LiRwcm9wcy5pbml0LnNldHVwKGVkaXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gfSk7XG4gICAgaWYgKFV0aWxzXzEuaXNUZXh0YXJlYShjdHguZWxlbWVudCkpIHtcbiAgICAgICAgY3R4LmVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICcnO1xuICAgICAgICBjdHguZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIFRpbnlNQ0VfMS5nZXRUaW55bWNlKCkuaW5pdChmaW5hbEluaXQpO1xufTsgfTtcbmV4cG9ydHMuRWRpdG9yID0ge1xuICAgIHByb3BzOiBFZGl0b3JQcm9wVHlwZXNfMS5lZGl0b3JQcm9wcyxcbiAgICBjcmVhdGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudElkID0gdGhpcy4kcHJvcHMuaWQgfHwgVXRpbHNfMS51dWlkKCd0aW55LXZ1ZScpO1xuICAgICAgICB0aGlzLmlubGluZUVkaXRvciA9ICh0aGlzLiRwcm9wcy5pbml0ICYmIHRoaXMuJHByb3BzLmluaXQuaW5saW5lKSB8fCB0aGlzLiRwcm9wcy5pbmxpbmU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRvci5zZXRNb2RlKHRoaXMuZGlzYWJsZWQgPyAncmVhZG9ubHknIDogJ2Rlc2lnbicpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuJGVsO1xuICAgICAgICBpZiAoVGlueU1DRV8xLmdldFRpbnltY2UoKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaW5pdGlhbGlzZSh0aGlzKSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZWxlbWVudCAmJiB0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudCkge1xuICAgICAgICAgICAgdmFyIGNoYW5uZWwgPSB0aGlzLiRwcm9wcy5jbG91ZENoYW5uZWwgPyB0aGlzLiRwcm9wcy5jbG91ZENoYW5uZWwgOiAnNSc7XG4gICAgICAgICAgICB2YXIgYXBpS2V5ID0gdGhpcy4kcHJvcHMuYXBpS2V5ID8gdGhpcy4kcHJvcHMuYXBpS2V5IDogJ25vLWFwaS1rZXknO1xuICAgICAgICAgICAgdmFyIHNjcmlwdFNyYyA9IFV0aWxzXzEuaXNOdWxsT3JVbmRlZmluZWQodGhpcy4kcHJvcHMudGlueW1jZVNjcmlwdFNyYykgP1xuICAgICAgICAgICAgICAgIFwiaHR0cHM6Ly9jZG4udGlueS5jbG91ZC8xL1wiICsgYXBpS2V5ICsgXCIvdGlueW1jZS9cIiArIGNoYW5uZWwgKyBcIi90aW55bWNlLm1pbi5qc1wiIDpcbiAgICAgICAgICAgICAgICB0aGlzLiRwcm9wcy50aW55bWNlU2NyaXB0U3JjO1xuICAgICAgICAgICAgU2NyaXB0TG9hZGVyXzEuU2NyaXB0TG9hZGVyLmxvYWQodGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQsIHNjcmlwdFNyYywgaW5pdGlhbGlzZSh0aGlzKSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKFRpbnlNQ0VfMS5nZXRUaW55bWNlKCkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIFRpbnlNQ0VfMS5nZXRUaW55bWNlKCkucmVtb3ZlKHRoaXMuZWRpdG9yKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVhY3RpdmF0ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIXRoaXMuaW5saW5lRWRpdG9yKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlID0gdGhpcy5lZGl0b3IuZ2V0Q29udGVudCgpO1xuICAgICAgICAgICAgKF9hID0gVGlueU1DRV8xLmdldFRpbnltY2UoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlbW92ZSh0aGlzLmVkaXRvcik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGFjdGl2YXRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuaW5saW5lRWRpdG9yICYmIHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGluaXRpYWxpc2UodGhpcykoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmxpbmVFZGl0b3IgPyByZW5kZXJJbmxpbmUoaCwgdGhpcy5lbGVtZW50SWQsIHRoaXMuJHByb3BzLnRhZ05hbWUpIDogcmVuZGVySWZyYW1lKGgsIHRoaXMuZWxlbWVudElkKTtcbiAgICB9XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxOC1wcmVzZW50LCBFcGhveCwgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSAyIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVkaXRvclByb3BzID0ge1xuICAgIGFwaUtleTogU3RyaW5nLFxuICAgIGNsb3VkQ2hhbm5lbDogU3RyaW5nLFxuICAgIGlkOiBTdHJpbmcsXG4gICAgaW5pdDogT2JqZWN0LFxuICAgIGluaXRpYWxWYWx1ZTogU3RyaW5nLFxuICAgIGlubGluZTogQm9vbGVhbixcbiAgICBtb2RlbEV2ZW50czogW1N0cmluZywgQXJyYXldLFxuICAgIHBsdWdpbnM6IFtTdHJpbmcsIEFycmF5XSxcbiAgICB0YWdOYW1lOiBTdHJpbmcsXG4gICAgdG9vbGJhcjogW1N0cmluZywgQXJyYXldLFxuICAgIHZhbHVlOiBTdHJpbmcsXG4gICAgZGlzYWJsZWQ6IEJvb2xlYW4sXG4gICAgdGlueW1jZVNjcmlwdFNyYzogU3RyaW5nLFxuICAgIG91dHB1dEZvcm1hdDoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIHByb3AgPT09ICdodG1sJyB8fCBwcm9wID09PSAndGV4dCc7IH1cbiAgICB9LFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTgtcHJlc2VudCwgRXBob3gsIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgMiBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEVkaXRvcl8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9FZGl0b3JcIik7XG5leHBvcnRzLmRlZmF1bHQgPSBFZGl0b3JfMS5FZGl0b3I7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5waG90by1pbnB1dFtkYXRhLXYtNTk1ZDFlNGRde3Bvc2l0aW9uOmFic29sdXRlO3Zpc2liaWxpdHk6aGlkZGVufS51c2VyLXBob3RvW2RhdGEtdi01OTVkMWU0ZF17Ym9yZGVyLXJhZGl1czoyMDBweDt3aWR0aDozMDBweDtoZWlnaHQ6YXV0bzttYXgtaGVpZ2h0OjUwMHB4O2JvcmRlcjoxcHggc29saWQgIzAxYWVmZX0udXNlci1waG90by1tb2R1bGVbZGF0YS12LTU5NWQxZTRkXXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3Bob3RvLWxvYWRlci52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBMkZBLDhCQUNBLGlCQUFBLENBQ0EsaUJBQ0EsQ0FFQSw2QkFDQSxtQkFBQSxDQUNBLFdBQUEsQ0FDQSxXQUFBLENBQ0EsZ0JBQUEsQ0FDQSx3QkFDQSxDQUVBLG9DQUNBLFlBQUEsQ0FDQSxxQkFBQSxDQUNBLHNCQUFBLENBQ0Esa0JBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcbiAgICA8di1jYXJkIGNsYXNzPVxcXCJkLWZsZXggZmxleC1jb2x1bW5cXFwiIGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciBlbGV2YXRpb249XFxcIjBcXFwiPlxcbiAgICAgICAgPGlucHV0XFxuICAgICAgICAgICAgICAgIHR5cGU9XFxcImZpbGVcXFwiXFxuICAgICAgICAgICAgICAgIGlkPVxcXCJmaWxlc1xcXCJcXG4gICAgICAgICAgICAgICAgQGNoYW5nZT1cXFwiYWRkUGhvdG9cXFwiXFxuICAgICAgICAgICAgICAgIGNsYXNzPVxcXCJwaG90by1pbnB1dFxcXCJcXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XFxcImF6YXpcXFwiXFxuICAgICAgICAgICAgICAgIGFjY2VwdD1cXFwiaW1hZ2UvanBlZyxpbWFnZS9wbmcsaW1hZ2UvanBnXFxcIlxcbiAgICAgICAgLz5cXG5cXG4gICAgICAgIDx2LWJ0biBjbGFzcz1cXFwiYnRuIG15LTJcXFwiIEBjbGljaz1cXFwiY2xpY2tPbklucHV0XFxcIiB2LWlmPVxcXCIhb25lIHx8ICFjYXJvdXNlbFBob3Rvcy5sZW5ndGhcXFwiPtCU0L7QsdCw0LLQuNGC0Ywg0YTQvtGC0L7Qs9GA0LDRhNC40Y48L3YtYnRuPlxcbiAgICAgICAgPGRpdiB2LWlmPVxcXCJvbmUgJiYgbG9hZGVkUGhvdG9zLmxlbmd0aFxcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIj57e2xvYWRlZFBob3Rvc1swXS5uYW1lfX08L2Rpdj5cXG4gICAgICAgIDxkaXYgdi1pZj1cXFwiIW9uZSAmJiBjYXJvdXNlbFBob3Rvcy5sZW5ndGhcXFwiIGNsYXNzPVxcXCJ1c2VyLXBob3RvLW1vZHVsZVxcXCI+XFxuICAgICAgICAgICAgPHYtY2Fyb3VzZWwgdi1tb2RlbD1cXFwiblxcXCI+XFxuICAgICAgICAgICAgICAgIDx2LWNhcm91c2VsLWl0ZW1cXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj1cXFwiKHBob3RvLCBpKSBpbiBjYXJvdXNlbFBob3Rvc1xcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICA6a2V5PVxcXCJpXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9XFxcInBob3RvXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5cXG4gICAgICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8L3YtY2Fyb3VzZWwtaXRlbT5cXG4gICAgICAgICAgICA8L3YtY2Fyb3VzZWw+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC92LWNhcmQ+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcblxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxuICAgICAgICBuYW1lOiAncGhvdG8tbG9hZGVyJyxcXG4gICAgICAgIHByb3BzOiB7XFxuICAgICAgICAgICAgcmFkaXVzOiB7XFxuICAgICAgICAgICAgICAgIHR5cGU6IE51bWJlcixcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIG9uZToge1xcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgY29tcG9uZW50czoge30sXFxuICAgICAgICBkYXRhKCkge1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIG46IDAsXFxuICAgICAgICAgICAgICAgIHBob3RvOiAnJyxcXG4gICAgICAgICAgICAgICAgbG9hZGVkUGhvdG9zOiBbXSxcXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxQaG90b3M6W10sXFxuICAgICAgICAgICAgICAgIGZpbGVJbWc6IG51bGwsXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIG1ldGhvZHM6IHtcXG4gICAgICAgICAgICBnZXRQaG90b3MoKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRlZFBob3RvcztcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGdldEZpcnN0KCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWRQaG90b3NbMF07XFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICByZXR1cm5Gb3JtRGF0YSh2YWwpIHtcXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2F2ZS1waG90bycsIHZhbClcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIHVwZGF0ZVBob3RvKHZhbCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLnBob3RvID0gdmFsXFxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Nyb3BwZXJEaWFsb2cgPSBmYWxzZVxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgY2xpY2tPbklucHV0KCkge1xcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZXMnKS5maWxlcyA9IChuZXcgRGF0YVRyYW5zZmVyKCkpLmZpbGVzO1xcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZXMnKS5jbGljaygpXFxuXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBhZGRQaG90byhldmVudCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVJbWcgPSBldmVudC50YXJnZXQuZmlsZXNbMF1cXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsZUltZy5zaXplID4gNTAyNDAwMCkge1xcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXJUZXh0ID0gJ9Cg0LDQt9C80LXRgCDRhNCw0LnQu9CwINC90LUg0LzQvtC20LXRgiDQsdGL0YLRjCDQsdC+0LvRjNGI0LUgNdCc0JEnXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRjaGlsZHJlblswXS5zbmFja2JhciA9IHRydWVcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZih0aGlzLmxvYWRlZFBob3Rvcy5sZW5ndGggPiAxMCkge1xcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXJUZXh0ID0gJ9CS0Ysg0L3QtSDQvNC+0LbQtdGC0LUg0LfQsNCz0YDRg9C30LjRgtGMINCx0L7Qu9GM0YjQtSAxMCDRhNC+0YLQvtCz0YDQsNGE0LjQuSdcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyID0gdHJ1ZVxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWxQaG90b3MucHVzaChVUkwuY3JlYXRlT2JqZWN0VVJMKHRoaXMuZmlsZUltZykpXFxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkUGhvdG9zLnB1c2godGhpcy5maWxlSW1nKVxcbiAgICAgICAgICAgICAgICB0aGlzLm4gPSB0aGlzLmxvYWRlZFBob3Rvcy5sZW5ndGgtMVxcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVJbWcgPSBudWxsO1xcbiAgICAgICAgICAgIH0sXFxuICAgICAgICB9LFxcbiAgICB9XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlIHNjb3BlZD5cXG4gICAgLnBob3RvLWlucHV0IHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gICAgfVxcblxcbiAgICAudXNlci1waG90byB7XFxuICAgICAgICBib3JkZXItcmFkaXVzOiAyMDBweDtcXG4gICAgICAgIHdpZHRoOiAzMDBweDtcXG4gICAgICAgIGhlaWdodDogYXV0bztcXG4gICAgICAgIG1heC1oZWlnaHQ6IDUwMHB4O1xcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgIzAxYWVmZTtcXG4gICAgfVxcblxcbiAgICAudXNlci1waG90by1tb2R1bGUge1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIH1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5kZXNjcmlwdGlvbi52LXRleHQtZmllbGQ+LnYtaW5wdXRfX2NvbnRyb2w+LnYtaW5wdXRfX3Nsb3Q6YWZ0ZXIsLmRlc2NyaXB0aW9uLnYtdGV4dC1maWVsZD4udi1pbnB1dF9fY29udHJvbD4udi1pbnB1dF9fc2xvdDpiZWZvcmUsLmRlc2NyaXB0aW9uIC52LXRleHQtZmllbGRfX3Nsb3QgdGV4dGFyZWF7ZGlzcGxheTpub25lIWltcG9ydGFudH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9yZXNvdXJjZXMvanMvcGFnZXMvUmVxdWVzdEVkaXQudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQXlHQSw2S0FFQSxzQkFDQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICAgIDx2LWNvbnRhaW5lclxcbiAgICAgICAgICAgIGNsYXNzPVxcXCJjb3ZlclxcXCI+XFxuICAgICAgICA8di10b29sYmFyLXRpdGxlIGFsaWduPVxcXCJjZW50ZXJcXFwiIGp1c3RpZnk9XFxcImNlbnRlclxcXCIgY2xhc3M9XFxcIm1iLTJcXFwiXFxuICAgICAgICB2LXRleHQ9XFxcIifQndC+0LLRi9C5INC30LDQv9GA0L7RgScgXFxcIj5cXG4gICAgICAgIDwvdi10b29sYmFyLXRpdGxlPlxcbiAgICAgICAgPHYtY29tYm9ib3hcXG4gICAgICAgICAgICAgICAgdi1tb2RlbD1cXFwicmVxdWVzdC5yb2xlXFxcIlxcbiAgICAgICAgICAgICAgICA6ZXJyby1tZXNzYWdlcz1cXFwibWVzc2FnZXMucm9sZVxcXCJcXG4gICAgICAgICAgICAgICAgOml0ZW1zPVxcXCJyb2xlc1xcXCJcXG4gICAgICAgICAgICAgICAgbGFiZWw9XFxcItCa0YPQtNCwXFxcIlxcbiAgICAgICAgICAgICAgICBkZW5zZVxcbiAgICAgICAgPjwvdi1jb21ib2JveD5cXG4gICAgICAgIDx2LWNvbWJvYm94XFxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XFxcInJlcXVlc3QudHlwZVxcXCJcXG4gICAgICAgICAgICAgICAgOmVycm8tbWVzc2FnZXM9XFxcIm1lc3NhZ2VzLnR5cGVcXFwiXFxuICAgICAgICAgICAgICAgIDppdGVtcz1cXFwidHlwZXNcXFwiXFxuICAgICAgICAgICAgICAgIGxhYmVsPVxcXCLQotC40L8g0LfQsNGP0LLQu9C10L3QuNGPXFxcIlxcbiAgICAgICAgICAgICAgICBkZW5zZVxcbiAgICAgICAgPjwvdi1jb21ib2JveD5cXG4gICAgICAgIDx2LXRleHRhcmVhXFxuICAgICAgICAgICAgdHlwZT1cXFwidGV4dFxcXCJcXG4gICAgICAgICAgICBuYW1lPVxcXCJ0aXRsZVxcXCJcXG4gICAgICAgICAgICBsYWJlbD1cXFwi0KLQtdC60YHRgiDQt9Cw0Y/QstC70LXQvdC40Y9cXFwiXFxuICAgICAgICAgICAgdi1tb2RlbD1cXFwicmVxdWVzdC50ZXh0XFxcIlxcbiAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cXFwibWVzc2FnZXMudGV4dFxcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICA8L3YtdGV4dGFyZWE+XFxuXFxuICAgICAgICA8di1idG4gY2xhc3M9XFxcInNhdmUtYnRuXFxcIlxcbiAgICAgICAgICAgICAgIHYtaWY9XFxcIiRyb3V0ZS5wYXJhbXMuaWQgPT0gMFxcXCJcXG4gICAgICAgICAgICAgICBjb2xvcj1cXFwic3VjY2Vzc1xcXCJcXG4gICAgICAgICAgICAgICBmYWJcXG4gICAgICAgICAgICAgICBAY2xpY2s9XFxcImNyZWF0ZVxcXCJcXG4gICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XFxcIiEocmVxdWVzdC5yb2xlICYmIHJlcXVlc3QudHlwZSAmJiByZXF1ZXN0LnRleHQpXFxcIlxcbiAgICAgICAgICAgICAgIGRhcms+XFxuICAgICAgICAgICAgPHYtaWNvbj5tZGktY2hlY2stb3V0bGluZTwvdi1pY29uPlxcbiAgICAgICAgPC92LWJ0bj5cXG4gICAgPC92LWNvbnRhaW5lcj5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuICAgIGltcG9ydCBFZGl0b3IgZnJvbSAnQHRpbnltY2UvdGlueW1jZS12dWUnO1xcbiAgICBpbXBvcnQgUGhvdG9Mb2FkZXIgZnJvbSAnQC9jb21wb25lbnRzL3Bob3RvLWxvYWRlcidcXG4gICAgZXhwb3J0IGRlZmF1bHQge1xcbiAgICAgICAgbmFtZTogXFxcIlJlcXVlc3RFZGl0XFxcIixcXG4gICAgICAgIGNvbXBvbmVudHM6IHtcXG4gICAgICAgICAgICBFZGl0b3IsXFxuICAgICAgICAgICAgUGhvdG9Mb2FkZXJcXG4gICAgICAgIH0sXFxuICAgICAgICBkYXRhOiAodm0pID0+IHtcXG4gICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICByZXF1ZXN0OiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogdm0uJHJvdXRlLnBhcmFtcy5pZCxcXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXFxuICAgICAgICAgICAgICAgICAgICByb2xlOiBudWxsLFxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJycsXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIHJvbGVzOiBbXFxuICAgICAgICAgICAgICAgICAgICB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEyOCxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAn0JIg0LHQuNCx0LvQuNC+0YLQtdC60YMnXFxuICAgICAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICAgICAge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxMDI0LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfQkiDQsNC00LzQuNC90LjRgdGC0YDQsNGG0LjRjidcXG4gICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIF0sXFxuICAgICAgICAgICAgICAgIHR5cGVzIDogdm0uJHN0b3JlLnN0YXRlLnR5cGVzLFxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczoge1xcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJycsXFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcXG4gICAgICAgICAgICAgICAgICAgIHJvbGU6ICcnLFxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIG1vdW50ZWQoKSB7XFxuICAgICAgICB9LFxcbiAgICAgICAgbWV0aG9kczoge1xcbiAgICAgICAgICAgIGNyZWF0ZSgpIHtcXG4gICAgICAgICAgICAgICAgaWYgKCEodGhpcy5yZXF1ZXN0LmlkID4gMCkpXFxuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYXhpb3MucG9zdCgnL3JlcXVlc3QnLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdGhpcy5yZXF1ZXN0LnRleHQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogdGhpcy5yZXF1ZXN0LnJvbGU/LnZhbHVlIHx8IG51bGwsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdGhpcy5yZXF1ZXN0LnR5cGU/LnZhbHVlIHx8IG51bGwsXFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHIpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb3V0ZXIucHVzaCh7bmFtZTogXFxcInJlcXVlc3RzXFxcIn0pO1xcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZXNwb25zZSAmJiBlLnJlc3BvbnNlLnN0YXR1cyA9PT0gNDIyKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBlLnJlc3BvbnNlLmRhdGEuZXJyb3JzXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMubWVzc2FnZXMpLmZvckVhY2goKGspPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNzYWdlc1trXSA9IGVycm9yc1trXT8uWzBdIHx8ICcnO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG48L3NjcmlwdD5cXG5cXG48c3R5bGU+XFxuICAgIC5kZXNjcmlwdGlvbiAudi10ZXh0LWZpZWxkX19zbG90IHRleHRhcmVhIHtcXG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gICAgfVxcbiAgICAuZGVzY3JpcHRpb24udi10ZXh0LWZpZWxkPi52LWlucHV0X19jb250cm9sPi52LWlucHV0X19zbG90OmFmdGVyICxcXG4gICAgLmRlc2NyaXB0aW9uLnYtdGV4dC1maWVsZD4udi1pbnB1dF9fY29udHJvbD4udi1pbnB1dF9fc2xvdDpiZWZvcmV7XFxuICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICAgIH1cXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCI8dGVtcGxhdGU+XG4gICAgPHYtY2FyZCBjbGFzcz1cImQtZmxleCBmbGV4LWNvbHVtblwiIGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciBlbGV2YXRpb249XCIwXCI+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIHR5cGU9XCJmaWxlXCJcbiAgICAgICAgICAgICAgICBpZD1cImZpbGVzXCJcbiAgICAgICAgICAgICAgICBAY2hhbmdlPVwiYWRkUGhvdG9cIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwicGhvdG8taW5wdXRcIlxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiYXphelwiXG4gICAgICAgICAgICAgICAgYWNjZXB0PVwiaW1hZ2UvanBlZyxpbWFnZS9wbmcsaW1hZ2UvanBnXCJcbiAgICAgICAgLz5cblxuICAgICAgICA8di1idG4gY2xhc3M9XCJidG4gbXktMlwiIEBjbGljaz1cImNsaWNrT25JbnB1dFwiIHYtaWY9XCIhb25lIHx8ICFjYXJvdXNlbFBob3Rvcy5sZW5ndGhcIj7QlNC+0LHQsNCy0LjRgtGMINGE0L7RgtC+0LPRgNCw0YTQuNGOPC92LWJ0bj5cbiAgICAgICAgPGRpdiB2LWlmPVwib25lICYmIGxvYWRlZFBob3Rvcy5sZW5ndGhcIiBjbGFzcz1cInRleHQtY2VudGVyXCI+e3tsb2FkZWRQaG90b3NbMF0ubmFtZX19PC9kaXY+XG4gICAgICAgIDxkaXYgdi1pZj1cIiFvbmUgJiYgY2Fyb3VzZWxQaG90b3MubGVuZ3RoXCIgY2xhc3M9XCJ1c2VyLXBob3RvLW1vZHVsZVwiPlxuICAgICAgICAgICAgPHYtY2Fyb3VzZWwgdi1tb2RlbD1cIm5cIj5cbiAgICAgICAgICAgICAgICA8di1jYXJvdXNlbC1pdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWZvcj1cIihwaG90bywgaSkgaW4gY2Fyb3VzZWxQaG90b3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmtleT1cImlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz1cInBob3RvXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPC92LWNhcm91c2VsLWl0ZW0+XG4gICAgICAgICAgICA8L3YtY2Fyb3VzZWw+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvdi1jYXJkPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cblxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogJ3Bob3RvLWxvYWRlcicsXG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25lOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29tcG9uZW50czoge30sXG4gICAgICAgIGRhdGEoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG46IDAsXG4gICAgICAgICAgICAgICAgcGhvdG86ICcnLFxuICAgICAgICAgICAgICAgIGxvYWRlZFBob3RvczogW10sXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxQaG90b3M6W10sXG4gICAgICAgICAgICAgICAgZmlsZUltZzogbnVsbCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWV0aG9kczoge1xuICAgICAgICAgICAgZ2V0UGhvdG9zKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRlZFBob3RvcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRGaXJzdCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWRQaG90b3NbMF07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmV0dXJuRm9ybURhdGEodmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2F2ZS1waG90bycsIHZhbClcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGRhdGVQaG90byh2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBob3RvID0gdmFsXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Q3JvcHBlckRpYWxvZyA9IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xpY2tPbklucHV0KCkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlcycpLmZpbGVzID0gKG5ldyBEYXRhVHJhbnNmZXIoKSkuZmlsZXM7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVzJykuY2xpY2soKVxuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRkUGhvdG8oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVJbWcgPSBldmVudC50YXJnZXQuZmlsZXNbMF1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlSW1nLnNpemUgPiA1MDI0MDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyVGV4dCA9ICfQoNCw0LfQvNC10YAg0YTQsNC50LvQsCDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0LHQvtC70YzRiNC1IDXQnNCRJ1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRjaGlsZHJlblswXS5zbmFja2JhciA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih0aGlzLmxvYWRlZFBob3Rvcy5sZW5ndGggPiAxMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRjaGlsZHJlblswXS5zbmFja2JhclRleHQgPSAn0JLRiyDQvdC1INC80L7QttC10YLQtSDQt9Cw0LPRgNGD0LfQuNGC0Ywg0LHQvtC70YzRiNC1IDEwINGE0L7RgtC+0LPRgNCw0YTQuNC5J1xuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRjaGlsZHJlblswXS5zbmFja2JhciA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsUGhvdG9zLnB1c2goVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLmZpbGVJbWcpKVxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkUGhvdG9zLnB1c2godGhpcy5maWxlSW1nKVxuICAgICAgICAgICAgICAgIHRoaXMubiA9IHRoaXMubG9hZGVkUGhvdG9zLmxlbmd0aC0xXG4gICAgICAgICAgICAgICAgdGhpcy5maWxlSW1nID0gbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLnBob3RvLWlucHV0IHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuXG4gICAgLnVzZXItcGhvdG8ge1xuICAgICAgICBib3JkZXItcmFkaXVzOiAyMDBweDtcbiAgICAgICAgd2lkdGg6IDMwMHB4O1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICAgIG1heC1oZWlnaHQ6IDUwMHB4O1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjMDFhZWZlO1xuICAgIH1cblxuICAgIC51c2VyLXBob3RvLW1vZHVsZSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTVbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vcGhvdG8tbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3Bob3RvLWxvYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL3Bob3RvLWxvYWRlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTk1ZDFlNGQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vcGhvdG8tbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vcGhvdG8tbG9hZGVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9waG90by1sb2FkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTk1ZDFlNGQmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjU5NWQxZTRkXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3YtY2FyZCcse3N0YXRpY0NsYXNzOlwiZC1mbGV4IGZsZXgtY29sdW1uXCIsYXR0cnM6e1wianVzdGlmeS1jZW50ZXJcIjpcIlwiLFwiYWxpZ24tY2VudGVyXCI6XCJcIixcImVsZXZhdGlvblwiOlwiMFwifX0sW19jKCdpbnB1dCcse3N0YXRpY0NsYXNzOlwicGhvdG8taW5wdXRcIixhdHRyczp7XCJ0eXBlXCI6XCJmaWxlXCIsXCJpZFwiOlwiZmlsZXNcIixcInBsYWNlaG9sZGVyXCI6XCJhemF6XCIsXCJhY2NlcHRcIjpcImltYWdlL2pwZWcsaW1hZ2UvcG5nLGltYWdlL2pwZ1wifSxvbjp7XCJjaGFuZ2VcIjpfdm0uYWRkUGhvdG99fSksX3ZtLl92KFwiIFwiKSwoIV92bS5vbmUgfHwgIV92bS5jYXJvdXNlbFBob3Rvcy5sZW5ndGgpP19jKCd2LWJ0bicse3N0YXRpY0NsYXNzOlwiYnRuIG15LTJcIixvbjp7XCJjbGlja1wiOl92bS5jbGlja09uSW5wdXR9fSxbX3ZtLl92KFwi0JTQvtCx0LDQstC40YLRjCDRhNC+0YLQvtCz0YDQsNGE0LjRjlwiKV0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksKF92bS5vbmUgJiYgX3ZtLmxvYWRlZFBob3Rvcy5sZW5ndGgpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtY2VudGVyXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5sb2FkZWRQaG90b3NbMF0ubmFtZSkpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5vbmUgJiYgX3ZtLmNhcm91c2VsUGhvdG9zLmxlbmd0aCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidXNlci1waG90by1tb2R1bGVcIn0sW19jKCd2LWNhcm91c2VsJyx7bW9kZWw6e3ZhbHVlOihfdm0ubiksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5uPSQkdn0sZXhwcmVzc2lvbjpcIm5cIn19LF92bS5fbCgoX3ZtLmNhcm91c2VsUGhvdG9zKSxmdW5jdGlvbihwaG90byxpKXtyZXR1cm4gX2MoJ3YtY2Fyb3VzZWwtaXRlbScse2tleTppLGF0dHJzOntcInNyY1wiOnBob3RvLFwiY29udGFpblwiOlwiXCJ9fSl9KSwxKV0sMSk6X3ZtLl9lKCldLDEpfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygndi1jb250YWluZXInLHtzdGF0aWNDbGFzczpcImNvdmVyXCJ9LFtfYygndi10b29sYmFyLXRpdGxlJyx7c3RhdGljQ2xhc3M6XCJtYi0yXCIsYXR0cnM6e1wiYWxpZ25cIjpcImNlbnRlclwiLFwianVzdGlmeVwiOlwiY2VudGVyXCJ9LGRvbVByb3BzOntcInRleHRDb250ZW50XCI6X3ZtLl9zKCfQndC+0LLRi9C5INC30LDQv9GA0L7RgScgKX19KSxfdm0uX3YoXCIgXCIpLF9jKCd2LWNvbWJvYm94Jyx7YXR0cnM6e1wiZXJyby1tZXNzYWdlc1wiOl92bS5tZXNzYWdlcy5yb2xlLFwiaXRlbXNcIjpfdm0ucm9sZXMsXCJsYWJlbFwiOlwi0JrRg9C00LBcIixcImRlbnNlXCI6XCJcIn0sbW9kZWw6e3ZhbHVlOihfdm0ucmVxdWVzdC5yb2xlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLnJlcXVlc3QsIFwicm9sZVwiLCAkJHYpfSxleHByZXNzaW9uOlwicmVxdWVzdC5yb2xlXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygndi1jb21ib2JveCcse2F0dHJzOntcImVycm8tbWVzc2FnZXNcIjpfdm0ubWVzc2FnZXMudHlwZSxcIml0ZW1zXCI6X3ZtLnR5cGVzLFwibGFiZWxcIjpcItCi0LjQvyDQt9Cw0Y/QstC70LXQvdC40Y9cIixcImRlbnNlXCI6XCJcIn0sbW9kZWw6e3ZhbHVlOihfdm0ucmVxdWVzdC50eXBlKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLiRzZXQoX3ZtLnJlcXVlc3QsIFwidHlwZVwiLCAkJHYpfSxleHByZXNzaW9uOlwicmVxdWVzdC50eXBlXCJ9fSksX3ZtLl92KFwiIFwiKSxfYygndi10ZXh0YXJlYScse2F0dHJzOntcInR5cGVcIjpcInRleHRcIixcIm5hbWVcIjpcInRpdGxlXCIsXCJsYWJlbFwiOlwi0KLQtdC60YHRgiDQt9Cw0Y/QstC70LXQvdC40Y9cIixcImVycm9yLW1lc3NhZ2VzXCI6X3ZtLm1lc3NhZ2VzLnRleHR9LG1vZGVsOnt2YWx1ZTooX3ZtLnJlcXVlc3QudGV4dCksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS4kc2V0KF92bS5yZXF1ZXN0LCBcInRleHRcIiwgJCR2KX0sZXhwcmVzc2lvbjpcInJlcXVlc3QudGV4dFwifX0pLF92bS5fdihcIiBcIiksKF92bS4kcm91dGUucGFyYW1zLmlkID09IDApP19jKCd2LWJ0bicse3N0YXRpY0NsYXNzOlwic2F2ZS1idG5cIixhdHRyczp7XCJjb2xvclwiOlwic3VjY2Vzc1wiLFwiZmFiXCI6XCJcIixcImRpc2FibGVkXCI6IShfdm0ucmVxdWVzdC5yb2xlICYmIF92bS5yZXF1ZXN0LnR5cGUgJiYgX3ZtLnJlcXVlc3QudGV4dCksXCJkYXJrXCI6XCJcIn0sb246e1wiY2xpY2tcIjpfdm0uY3JlYXRlfX0sW19jKCd2LWljb24nLFtfdm0uX3YoXCJtZGktY2hlY2stb3V0bGluZVwiKV0pXSwxKTpfdm0uX2UoKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgICA8di1jb250YWluZXJcbiAgICAgICAgICAgIGNsYXNzPVwiY292ZXJcIj5cbiAgICAgICAgPHYtdG9vbGJhci10aXRsZSBhbGlnbj1cImNlbnRlclwiIGp1c3RpZnk9XCJjZW50ZXJcIiBjbGFzcz1cIm1iLTJcIlxuICAgICAgICB2LXRleHQ9XCIn0J3QvtCy0YvQuSDQt9Cw0L/RgNC+0YEnIFwiPlxuICAgICAgICA8L3YtdG9vbGJhci10aXRsZT5cbiAgICAgICAgPHYtY29tYm9ib3hcbiAgICAgICAgICAgICAgICB2LW1vZGVsPVwicmVxdWVzdC5yb2xlXCJcbiAgICAgICAgICAgICAgICA6ZXJyby1tZXNzYWdlcz1cIm1lc3NhZ2VzLnJvbGVcIlxuICAgICAgICAgICAgICAgIDppdGVtcz1cInJvbGVzXCJcbiAgICAgICAgICAgICAgICBsYWJlbD1cItCa0YPQtNCwXCJcbiAgICAgICAgICAgICAgICBkZW5zZVxuICAgICAgICA+PC92LWNvbWJvYm94PlxuICAgICAgICA8di1jb21ib2JveFxuICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJyZXF1ZXN0LnR5cGVcIlxuICAgICAgICAgICAgICAgIDplcnJvLW1lc3NhZ2VzPVwibWVzc2FnZXMudHlwZVwiXG4gICAgICAgICAgICAgICAgOml0ZW1zPVwidHlwZXNcIlxuICAgICAgICAgICAgICAgIGxhYmVsPVwi0KLQuNC/INC30LDRj9Cy0LvQtdC90LjRj1wiXG4gICAgICAgICAgICAgICAgZGVuc2VcbiAgICAgICAgPjwvdi1jb21ib2JveD5cbiAgICAgICAgPHYtdGV4dGFyZWFcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIG5hbWU9XCJ0aXRsZVwiXG4gICAgICAgICAgICBsYWJlbD1cItCi0LXQutGB0YIg0LfQsNGP0LLQu9C10L3QuNGPXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJyZXF1ZXN0LnRleHRcIlxuICAgICAgICAgICAgOmVycm9yLW1lc3NhZ2VzPVwibWVzc2FnZXMudGV4dFwiXG4gICAgICAgICAgICA+XG4gICAgICAgIDwvdi10ZXh0YXJlYT5cblxuICAgICAgICA8di1idG4gY2xhc3M9XCJzYXZlLWJ0blwiXG4gICAgICAgICAgICAgICB2LWlmPVwiJHJvdXRlLnBhcmFtcy5pZCA9PSAwXCJcbiAgICAgICAgICAgICAgIGNvbG9yPVwic3VjY2Vzc1wiXG4gICAgICAgICAgICAgICBmYWJcbiAgICAgICAgICAgICAgIEBjbGljaz1cImNyZWF0ZVwiXG4gICAgICAgICAgICAgICA6ZGlzYWJsZWQ9XCIhKHJlcXVlc3Qucm9sZSAmJiByZXF1ZXN0LnR5cGUgJiYgcmVxdWVzdC50ZXh0KVwiXG4gICAgICAgICAgICAgICBkYXJrPlxuICAgICAgICAgICAgPHYtaWNvbj5tZGktY2hlY2stb3V0bGluZTwvdi1pY29uPlxuICAgICAgICA8L3YtYnRuPlxuICAgIDwvdi1jb250YWluZXI+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGltcG9ydCBFZGl0b3IgZnJvbSAnQHRpbnltY2UvdGlueW1jZS12dWUnO1xuICAgIGltcG9ydCBQaG90b0xvYWRlciBmcm9tICdAL2NvbXBvbmVudHMvcGhvdG8tbG9hZGVyJ1xuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogXCJSZXF1ZXN0RWRpdFwiLFxuICAgICAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICAgICBFZGl0b3IsXG4gICAgICAgICAgICBQaG90b0xvYWRlclxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiAodm0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdDoge1xuICAgICAgICAgICAgICAgICAgICBpZDogdm0uJHJvdXRlLnBhcmFtcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByb2xlczogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTI4LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ9CSINCx0LjQsdC70LjQvtGC0LXQutGDJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMTAyNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICfQkiDQsNC00LzQuNC90LjRgdGC0YDQsNGG0LjRjidcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIHR5cGVzIDogdm0uJHN0b3JlLnN0YXRlLnR5cGVzLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2VzOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgICAgICAgICAgICAgcm9sZTogJycsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb3VudGVkKCkge1xuICAgICAgICB9LFxuICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICBjcmVhdGUoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEodGhpcy5yZXF1ZXN0LmlkID4gMCkpXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5heGlvcy5wb3N0KCcvcmVxdWVzdCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMucmVxdWVzdC50ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogdGhpcy5yZXF1ZXN0LnJvbGU/LnZhbHVlIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnJlcXVlc3QudHlwZT8udmFsdWUgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvdXRlci5wdXNoKHtuYW1lOiBcInJlcXVlc3RzXCJ9KTtcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnJlc3BvbnNlICYmIGUucmVzcG9uc2Uuc3RhdHVzID09PSA0MjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3JzID0gZS5yZXNwb25zZS5kYXRhLmVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMubWVzc2FnZXMpLmZvckVhY2goKGspPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VzW2tdID0gZXJyb3JzW2tdPy5bMF0gfHwgJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgICAuZGVzY3JpcHRpb24gLnYtdGV4dC1maWVsZF9fc2xvdCB0ZXh0YXJlYSB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICB9XG4gICAgLmRlc2NyaXB0aW9uLnYtdGV4dC1maWVsZD4udi1pbnB1dF9fY29udHJvbD4udi1pbnB1dF9fc2xvdDphZnRlciAsXG4gICAgLmRlc2NyaXB0aW9uLnYtdGV4dC1maWVsZD4udi1pbnB1dF9fY29udHJvbD4udi1pbnB1dF9fc2xvdDpiZWZvcmV7XG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICB9XG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNVswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SZXF1ZXN0RWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNVswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SZXF1ZXN0RWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1JlcXVlc3RFZGl0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yYmE1MmRjYyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9SZXF1ZXN0RWRpdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1JlcXVlc3RFZGl0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9SZXF1ZXN0RWRpdC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTlbMF0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOVswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9waG90by1sb2FkZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTk1ZDFlNGQmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjM0ZDg4NTZhXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOVswXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05WzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlcXVlc3RFZGl0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI3ZjQ0ZTBlNVwiLCBjb250ZW50LCB0cnVlLCB7fSk7Il0sInNvdXJjZVJvb3QiOiIifQ==