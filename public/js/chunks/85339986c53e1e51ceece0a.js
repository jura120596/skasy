(self.webpackChunk=self.webpackChunk||[]).push([[853],{4539:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>s});var n=t(4015),o=t.n(n),a=t(3645),i=t.n(a)()(o());i.push([e.id,".drop-area[data-v-ee4fed0c]:not(.drop-sm){position:relative;width:100%;display:flex;justify-content:center;align-items:center;height:200px;background:#fff;border:1px dashed #afafaf;border-radius:8px;overflow:hidden}#drop-area.focus[data-v-ee4fed0c]{background:#f8f8f8}.hover[data-v-ee4fed0c]{display:none}.focus .hide[data-v-ee4fed0c]{display:none!important}.focus .hover[data-v-ee4fed0c]{display:block!important}p[data-v-ee4fed0c]{margin-top:0}.drop-area:not(.drop-sm) .drop-form[data-v-ee4fed0c]{position:absolute;display:flex;flex-direction:column;justify-content:center;align-items:center;width:100%;height:100%;z-index:50}.drop-btn[data-v-ee4fed0c]{display:inline-block;cursor:pointer;min-width:150px;border-radius:4px;height:35px;padding:10px;background:#f8f8f8;font-weight:400;font-style:normal;line-height:17px;font-size:18px;margin-bottom:10px;text-align:center}.drop-sm .drop-btn[data-v-ee4fed0c]{min-width:100%}#fileElem[data-v-ee4fed0c]{display:none}.file-desc[data-v-ee4fed0c]{font-style:normal;font-weight:500;font-size:16px;line-height:22px;color:#4a4a4a}.drop-sm .file-desc[data-v-ee4fed0c]{display:none}.format-file-desc[data-v-ee4fed0c]{font-style:normal;font-weight:500;font-size:14px;line-height:19px;text-align:center;color:#afafaf}","",{version:3,sources:["webpack://./resources/js/components/DropArea.vue"],names:[],mappings:"AA2DA,0CACA,iBAAA,CACA,UAAA,CACA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,YAAA,CACA,eAAA,CACA,yBAAA,CACA,iBAAA,CACA,eACA,CAEA,kCACA,kBACA,CAEA,wBACA,YACA,CAEA,8BACA,sBACA,CAEA,+BACA,uBACA,CAEA,mBACA,YACA,CAEA,qDACA,iBAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,UAAA,CACA,WAAA,CACA,UACA,CAGA,2BACA,oBAAA,CACA,cAAA,CACA,eAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,eAAA,CACA,iBAAA,CACA,gBAAA,CACA,cAAA,CACA,kBAAA,CACA,iBACA,CACA,oCACA,cACA,CAEA,2BACA,YACA,CAEA,4BAEA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,aACA,CAEA,qCACA,YACA,CACA,mCACA,iBAAA,CACA,eAAA,CACA,cAAA,CACA,gBAAA,CACA,iBAAA,CACA,aACA",sourcesContent:["<template>\r\n    <div id=\"drop-area\" class=\"drop-area\" :class=\"$vuetify.breakpoint.smAndDown ? ['drop-sm'] : []\">\r\n        <form class=\"drop-form\">\r\n            <input type=\"file\" id=\"fileElem\" multiple accept=\"image/*\"\r\n                   @change=\"(e) => $emit('change', e)\" class=\"hide\">\r\n            <label class=\"drop-btn\" for=\"fileElem\">{{!yet ? 'Загрузить фото' : 'Загрузить еще'}}</label>\r\n            <p class=\"format-file-desc\">Формат – jpg, png</p>\r\n            <p class=\"file-desc hover\">Отпустите фотографию сюда</p>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        name: \"DropArea\",\r\n        data: (vm) => ({vm}),\r\n        props: ['yet'],\r\n        mounted(vm) {\r\n            let dropArea = document.getElementById('drop-area');\r\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\r\n                dropArea.addEventListener(eventName, preventDefaults, false)\r\n            })\r\n\r\n            function preventDefaults(e) {\r\n                e.preventDefault()\r\n                e.stopPropagation()\r\n            }\r\n\r\n            ['dragenter', 'dragover'].forEach(eventName => {\r\n                dropArea.addEventListener(eventName, focus, false)\r\n            });\r\n            ['dragleave', 'drop'].forEach(eventName => {\r\n                dropArea.addEventListener(eventName, unfocus, false)\r\n            });\r\n\r\n            function focus(e) {\r\n                dropArea.classList.add('focus')\r\n            }\r\n\r\n            function unfocus(e) {\r\n                dropArea.classList.remove('focus')\r\n            }\r\n\r\n            const handleDrop = (e) => {\r\n                let dt = e.dataTransfer\r\n                let files = dt.files\r\n                this.handleFiles(files)\r\n            }\r\n            dropArea.addEventListener('drop', handleDrop, false);\r\n        },\r\n        methods: {\r\n            handleFiles(files) {\r\n                this.$emit('change', {target:{files}});\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .drop-area:not(.drop-sm) {\r\n        position: relative;\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        height: 200px;\r\n        background: #FFFFFF;\r\n        border: 1px dashed #AFAFAF;\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    #drop-area.focus {\r\n        background: #F8F8F8;\r\n    }\r\n\r\n    .hover {\r\n        display: none;\r\n    }\r\n\r\n    .focus .hide {\r\n        display: none !important;\r\n    }\r\n\r\n    .focus .hover {\r\n        display: block !important;\r\n    }\r\n\r\n    p {\r\n        margin-top: 0;\r\n    }\r\n\r\n    .drop-area:not(.drop-sm) .drop-form {\r\n        position: absolute;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        width: 100%;\r\n        height: 100%;\r\n        z-index: 50;\r\n    }\r\n\r\n\r\n    .drop-btn {\r\n        display: inline-block;\r\n        cursor: pointer;\r\n        min-width: 150px;\r\n        border-radius: 4px;\r\n        height: 35px;\r\n        padding: 10px;\r\n        background: #F8F8F8;\r\n        font-weight: 400;\r\n        font-style: normal;\r\n        line-height: 17px;\r\n        font-size: 18px;\r\n        margin-bottom: 10px;\r\n        text-align: center;\r\n    }\r\n    .drop-sm .drop-btn{\r\n        min-width: 100%;\r\n    }\r\n\r\n    #fileElem {\r\n        display: none;\r\n    }\r\n\r\n    .file-desc {\r\n\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 16px;\r\n        line-height: 22px;\r\n        color: #4A4A4A;\r\n    }\r\n\r\n    .drop-sm .file-desc {\r\n        display: none\r\n    }\r\n    .format-file-desc {\r\n        font-style: normal;\r\n        font-weight: 500;\r\n        font-size: 14px;\r\n        line-height: 19px;\r\n        text-align: center;\r\n        color: #AFAFAF;\r\n    }\r\n</style>\r\n"],sourceRoot:""}]);const s=i},3934:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>s});var n=t(4015),o=t.n(n),a=t(3645),i=t.n(a)()(o());i.push([e.id,'.site-photo-card[data-v-503f2afb]{position:relative;width:100%;background:#fff;border-radius:8px;overflow:hidden}.site-photo-card.filled[data-v-503f2afb]{background-color:#f8f8f8}.site-photo-card.focused[data-v-503f2afb],.site-photo-card[data-v-503f2afb]:hover{box-shadow:0 0 9px hsla(0,0%,54.9%,.49);border-radius:8px}.site-photo-card[data-v-503f2afb]:after{content:"";display:block;padding-bottom:56%}.site-photo-card-actions[data-v-503f2afb]{position:absolute;right:0;cursor:pointer}.site-photo-card-content[data-v-503f2afb]{position:absolute;width:100%;height:100%;display:flex;justify-content:center;flex-direction:column;cursor:pointer}.edit-photo-icon[data-v-503f2afb]{margin-left:8px}',"",{version:3,sources:["webpack://./resources/js/components/EditPhotoCard.vue"],names:[],mappings:"AAoJA,kCACA,iBAAA,CACA,UAAA,CACA,eAAA,CAGA,iBAAA,CACA,eACA,CAEA,yCACA,wBACA,CAEA,kFACA,uCAAA,CACA,iBACA,CAEA,wCACA,UAAA,CACA,aAAA,CACA,kBACA,CAEA,0CACA,iBAAA,CACA,OAAA,CACA,cACA,CAEA,0CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,sBAAA,CACA,qBAAA,CACA,cACA,CAEA,kCACA,eACA",sourcesContent:['<template>\r\n    <div class="site-photo-card"\r\n         :class="{focused: focus, filled}">\r\n        <div class="site-photo-card-content" style="z-index: 1;">\r\n            <slot name="default">\r\n                <v-img v-if="loaded && src" :src="src" cover\r\n                       height="100%" @click="$emit(\'click\', $attrs[\'value\']); open=true"/>\r\n                <v-row v-else-if="!loaded && !error" xs="12" class="pa-8" style="align-items: center">\r\n                    <progress-bar :progress="progress"/>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <div class="site-photo-card-actions" style="z-index: 2;">\r\n            <slot name="actions">\r\n                <v-row xs="12" class="pl-5 pr-5 pt-2 justify-end">\r\n                    <v-btn fab\r\n                           small\r\n                           @click="$emit(\'delete\')"\r\n                           class="mr-3">\r\n                        <v-icon>mdi-delete</v-icon>\r\n                    </v-btn>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <v-dialog v-model="open" v-if="open" content-class="sm-photo-dialog"\r\n                  :fullscreen="true">\r\n            <div class="dialog-image">\r\n                <v-img v-if="loaded && src" :src="src" max-height="90vh" contain/>\r\n                <v-btn icon @click="$emit(\'focusOut\'); open=false;"\r\n                       color="gray"\r\n                       class="close-btn" ><v-icon>mdi-close</v-icon></v-btn>\r\n            </div>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {b64ToBlob, compress} from "../../image";\r\n    import ProgressBar from "./ProgressBar";\r\n\r\n    export default {\r\n        name: "EditPhotoCard",\r\n        components: {ProgressBar},\r\n        props: {\r\n            focus: {type: Boolean, default: false,},\r\n            preload: {type: Boolean, default: true,},\r\n            cover: {type: String, default: ""},\r\n            filled: {type: Boolean, default: false},\r\n            file: {type: File | String}\r\n        },\r\n        data: (vm) => ({\r\n            open: false,\r\n            focused: !!vm.$attrs[\'focus\'],\r\n            src: \'\',\r\n            loaded: false,\r\n            error: false,\r\n            progress: 0,\r\n            rotateTimeout: null,\r\n        }),\r\n        mounted() {\r\n            this.upload(this.file)\r\n        },\r\n        computed: {\r\n            isCover() {\r\n                return this.cover && this.src.indexOf(this.cover) !== -1\r\n            }\r\n        },\r\n        methods: {\r\n            rotate() {\r\n                if (this.rotateTimeout) {\r\n                    clearTimeout(this.rotateTimeout);\r\n                    this.rotateTimeout = null;\r\n                }\r\n                this.rotateTimeout = setTimeout(() => {\r\n                    let img = new Image();\r\n                    img.crossOrigin = "anonymous"\r\n                    img.onload = () => {\r\n                        let compressUrl = compress(img, (ctx, canvas) => {\r\n                            ctx.save();\r\n                            ctx.translate(canvas.width / 2, canvas.height / 2);\r\n                            ctx.rotate(90 * Math.PI / 180);\r\n                            ctx.drawImage(img, -img.width / 2, -img.width / 2);\r\n                            ctx.restore();\r\n                        });\r\n                        let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                        this.upload(blob, this.src.split(\'/\').reverse()[0]);\r\n                    };\r\n                    img.src = this.src;\r\n                }, 1000)\r\n            },\r\n            readLocalSrc(file) {\r\n                if (this.file instanceof Blob) {\r\n                    let reader = new FileReader();\r\n                    reader.readAsDataURL(file);\r\n                    reader.onloadend = () => {\r\n                        this.src = reader.result;\r\n                        this.$emit(\'change\', this.src)\r\n                    }\r\n                } else this.src = file;\r\n                this.loaded = true;\r\n            },\r\n            upload(file, canvasFileName) {\r\n                if (!this.preload || !(file instanceof Blob)) {\r\n                    this.readLocalSrc(file);\r\n                    return;\r\n                }\r\n                var xhr = new XMLHttpRequest()\r\n                xhr.responseType = \'json\';\r\n                var formData = new FormData()\r\n                formData.append(\'file\', file, canvasFileName || file.name)\r\n                xhr.open(\'POST\', \'/photo/upload\', true)\r\n                xhr.upload.addEventListener("progress", (e) => {\r\n                    this.progress = (e.loaded * 100.0 / e.total) || 100;\r\n                })\r\n                xhr.addEventListener(\'readystatechange\', (e) => {\r\n                    if (xhr.readyState == 4 && xhr.status == 200) {\r\n                        this.src = e.target.response.url;\r\n                        this.$emit(\'change\', e.target.response.url);\r\n                        this.loaded = true;\r\n                    } else if (xhr.readyState == 4 && xhr.status != 200) {\r\n                        if (xhr.status == 400 && !canvasFileName) {\r\n                            //Для файлов с битым маймтипом рисуем на канве и отправляем результат\r\n                            let img = new Image();\r\n                            img.onload = () => {\r\n                                let compressUrl = compress(img);\r\n                                let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                                this.upload(blob, file.name);\r\n                            };\r\n                            img.src = URL.createObjectURL(file);\r\n                            return;\r\n                        }\r\n                        this.readLocalSrc(file)\r\n                        this.error = this.loaded = true;\r\n                    }\r\n\r\n                })\r\n                xhr.send(formData)\r\n            }\r\n        },\r\n        watch: {\r\n            file(nv) {\r\n                if (typeof nv === \'string\') this.src = nv;\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .site-photo-card {\r\n        position: relative;\r\n        width: 100%;\r\n        background: #FFFFFF;\r\n        /* Grey 800 */\r\n\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .site-photo-card.filled {\r\n        background-color: #F8F8F8;\r\n    }\r\n\r\n    .site-photo-card.focused, .site-photo-card:hover {\r\n        box-shadow: 0px 0px 9px rgba(140, 140, 140, 0.49);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    .site-photo-card:after {\r\n        content: "";\r\n        display: block;\r\n        padding-bottom: 56%; /* 16/9 */\r\n    }\r\n\r\n    .site-photo-card-actions {\r\n        position: absolute;\r\n        right: 0;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .site-photo-card-content {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .edit-photo-icon {\r\n        margin-left: 8px;\r\n    }\r\n</style>\r\n<style>\r\n\r\n    .sm-photo-dialog .photo-cover {\r\n        position: absolute;\r\n        top: 32px;\r\n        left: 32px;\r\n        z-index: 101;\r\n    }\r\n\r\n    .sm-photo-dialog .close-btn {\r\n        position: absolute;\r\n        top: 32px;\r\n        right: 32px;\r\n    }\r\n\r\n    .sm-photo-dialog .bottom {\r\n        right: 32px;\r\n        bottom: 32px;\r\n        position: absolute;\r\n        width: fit-content;\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    .sm-photo-dialog {\r\n        position: absolute;\r\n        z-index: 100;\r\n        display: flex;\r\n        box-shadow: none !important;\r\n        background: rgba(105, 109, 116, 0.6);\r\n        backdrop-filter: blur(10px);\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .dialog-image .v-image{\r\n        border-radius: 8px;\r\n    }\r\n    .dialog-image {\r\n        width: fit-content;\r\n        height: fit-content;\r\n        max-width: 100%;\r\n        position: relative;\r\n        padding: 16px;\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const s=i},2446:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>s});var n=t(4015),o=t.n(n),a=t(3645),i=t.n(a)()(o());i.push([e.id,".sm-photo-dialog .photo-cover{position:absolute;top:32px;left:32px;z-index:101}.sm-photo-dialog .close-btn{position:absolute;top:32px;right:32px}.sm-photo-dialog .bottom{right:32px;bottom:32px;position:absolute;width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;display:flex;flex-direction:row}.sm-photo-dialog{position:absolute;z-index:100;display:flex;box-shadow:none!important;background:rgba(105,109,116,.6);-webkit-backdrop-filter:blur(10px);backdrop-filter:blur(10px);align-items:center;justify-content:center}.dialog-image,.dialog-image .v-image{border-radius:8px}.dialog-image{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content;height:-webkit-fit-content;height:-moz-fit-content;height:fit-content;max-width:100%;position:relative;padding:16px;overflow:hidden}","",{version:3,sources:["webpack://./resources/js/components/EditPhotoCard.vue"],names:[],mappings:"AAmMA,8BACA,iBAAA,CACA,QAAA,CACA,SAAA,CACA,WACA,CAEA,4BACA,iBAAA,CACA,QAAA,CACA,UACA,CAEA,yBACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,yBAAA,CAAA,sBAAA,CAAA,iBAAA,CACA,YAAA,CACA,kBACA,CAEA,iBACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,yBAAA,CACA,+BAAA,CACA,kCAAA,CAAA,0BAAA,CACA,kBAAA,CACA,sBACA,CAKA,qCAFA,iBAUA,CARA,cACA,yBAAA,CAAA,sBAAA,CAAA,iBAAA,CACA,0BAAA,CAAA,uBAAA,CAAA,kBAAA,CACA,cAAA,CACA,iBAAA,CACA,YAAA,CAEA,eACA",sourcesContent:['<template>\r\n    <div class="site-photo-card"\r\n         :class="{focused: focus, filled}">\r\n        <div class="site-photo-card-content" style="z-index: 1;">\r\n            <slot name="default">\r\n                <v-img v-if="loaded && src" :src="src" cover\r\n                       height="100%" @click="$emit(\'click\', $attrs[\'value\']); open=true"/>\r\n                <v-row v-else-if="!loaded && !error" xs="12" class="pa-8" style="align-items: center">\r\n                    <progress-bar :progress="progress"/>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <div class="site-photo-card-actions" style="z-index: 2;">\r\n            <slot name="actions">\r\n                <v-row xs="12" class="pl-5 pr-5 pt-2 justify-end">\r\n                    <v-btn fab\r\n                           small\r\n                           @click="$emit(\'delete\')"\r\n                           class="mr-3">\r\n                        <v-icon>mdi-delete</v-icon>\r\n                    </v-btn>\r\n                </v-row>\r\n            </slot>\r\n        </div>\r\n        <v-dialog v-model="open" v-if="open" content-class="sm-photo-dialog"\r\n                  :fullscreen="true">\r\n            <div class="dialog-image">\r\n                <v-img v-if="loaded && src" :src="src" max-height="90vh" contain/>\r\n                <v-btn icon @click="$emit(\'focusOut\'); open=false;"\r\n                       color="gray"\r\n                       class="close-btn" ><v-icon>mdi-close</v-icon></v-btn>\r\n            </div>\r\n        </v-dialog>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import {b64ToBlob, compress} from "../../image";\r\n    import ProgressBar from "./ProgressBar";\r\n\r\n    export default {\r\n        name: "EditPhotoCard",\r\n        components: {ProgressBar},\r\n        props: {\r\n            focus: {type: Boolean, default: false,},\r\n            preload: {type: Boolean, default: true,},\r\n            cover: {type: String, default: ""},\r\n            filled: {type: Boolean, default: false},\r\n            file: {type: File | String}\r\n        },\r\n        data: (vm) => ({\r\n            open: false,\r\n            focused: !!vm.$attrs[\'focus\'],\r\n            src: \'\',\r\n            loaded: false,\r\n            error: false,\r\n            progress: 0,\r\n            rotateTimeout: null,\r\n        }),\r\n        mounted() {\r\n            this.upload(this.file)\r\n        },\r\n        computed: {\r\n            isCover() {\r\n                return this.cover && this.src.indexOf(this.cover) !== -1\r\n            }\r\n        },\r\n        methods: {\r\n            rotate() {\r\n                if (this.rotateTimeout) {\r\n                    clearTimeout(this.rotateTimeout);\r\n                    this.rotateTimeout = null;\r\n                }\r\n                this.rotateTimeout = setTimeout(() => {\r\n                    let img = new Image();\r\n                    img.crossOrigin = "anonymous"\r\n                    img.onload = () => {\r\n                        let compressUrl = compress(img, (ctx, canvas) => {\r\n                            ctx.save();\r\n                            ctx.translate(canvas.width / 2, canvas.height / 2);\r\n                            ctx.rotate(90 * Math.PI / 180);\r\n                            ctx.drawImage(img, -img.width / 2, -img.width / 2);\r\n                            ctx.restore();\r\n                        });\r\n                        let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                        this.upload(blob, this.src.split(\'/\').reverse()[0]);\r\n                    };\r\n                    img.src = this.src;\r\n                }, 1000)\r\n            },\r\n            readLocalSrc(file) {\r\n                if (this.file instanceof Blob) {\r\n                    let reader = new FileReader();\r\n                    reader.readAsDataURL(file);\r\n                    reader.onloadend = () => {\r\n                        this.src = reader.result;\r\n                        this.$emit(\'change\', this.src)\r\n                    }\r\n                } else this.src = file;\r\n                this.loaded = true;\r\n            },\r\n            upload(file, canvasFileName) {\r\n                if (!this.preload || !(file instanceof Blob)) {\r\n                    this.readLocalSrc(file);\r\n                    return;\r\n                }\r\n                var xhr = new XMLHttpRequest()\r\n                xhr.responseType = \'json\';\r\n                var formData = new FormData()\r\n                formData.append(\'file\', file, canvasFileName || file.name)\r\n                xhr.open(\'POST\', \'/photo/upload\', true)\r\n                xhr.upload.addEventListener("progress", (e) => {\r\n                    this.progress = (e.loaded * 100.0 / e.total) || 100;\r\n                })\r\n                xhr.addEventListener(\'readystatechange\', (e) => {\r\n                    if (xhr.readyState == 4 && xhr.status == 200) {\r\n                        this.src = e.target.response.url;\r\n                        this.$emit(\'change\', e.target.response.url);\r\n                        this.loaded = true;\r\n                    } else if (xhr.readyState == 4 && xhr.status != 200) {\r\n                        if (xhr.status == 400 && !canvasFileName) {\r\n                            //Для файлов с битым маймтипом рисуем на канве и отправляем результат\r\n                            let img = new Image();\r\n                            img.onload = () => {\r\n                                let compressUrl = compress(img);\r\n                                let blob = b64ToBlob(compressUrl.split(\',\')[1], \'image/jpeg\');\r\n                                this.upload(blob, file.name);\r\n                            };\r\n                            img.src = URL.createObjectURL(file);\r\n                            return;\r\n                        }\r\n                        this.readLocalSrc(file)\r\n                        this.error = this.loaded = true;\r\n                    }\r\n\r\n                })\r\n                xhr.send(formData)\r\n            }\r\n        },\r\n        watch: {\r\n            file(nv) {\r\n                if (typeof nv === \'string\') this.src = nv;\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .site-photo-card {\r\n        position: relative;\r\n        width: 100%;\r\n        background: #FFFFFF;\r\n        /* Grey 800 */\r\n\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .site-photo-card.filled {\r\n        background-color: #F8F8F8;\r\n    }\r\n\r\n    .site-photo-card.focused, .site-photo-card:hover {\r\n        box-shadow: 0px 0px 9px rgba(140, 140, 140, 0.49);\r\n        border-radius: 8px;\r\n    }\r\n\r\n    .site-photo-card:after {\r\n        content: "";\r\n        display: block;\r\n        padding-bottom: 56%; /* 16/9 */\r\n    }\r\n\r\n    .site-photo-card-actions {\r\n        position: absolute;\r\n        right: 0;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .site-photo-card-content {\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: flex;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .edit-photo-icon {\r\n        margin-left: 8px;\r\n    }\r\n</style>\r\n<style>\r\n\r\n    .sm-photo-dialog .photo-cover {\r\n        position: absolute;\r\n        top: 32px;\r\n        left: 32px;\r\n        z-index: 101;\r\n    }\r\n\r\n    .sm-photo-dialog .close-btn {\r\n        position: absolute;\r\n        top: 32px;\r\n        right: 32px;\r\n    }\r\n\r\n    .sm-photo-dialog .bottom {\r\n        right: 32px;\r\n        bottom: 32px;\r\n        position: absolute;\r\n        width: fit-content;\r\n        display: flex;\r\n        flex-direction: row;\r\n    }\r\n\r\n    .sm-photo-dialog {\r\n        position: absolute;\r\n        z-index: 100;\r\n        display: flex;\r\n        box-shadow: none !important;\r\n        background: rgba(105, 109, 116, 0.6);\r\n        backdrop-filter: blur(10px);\r\n        align-items: center;\r\n        justify-content: center;\r\n    }\r\n\r\n    .dialog-image .v-image{\r\n        border-radius: 8px;\r\n    }\r\n    .dialog-image {\r\n        width: fit-content;\r\n        height: fit-content;\r\n        max-width: 100%;\r\n        position: relative;\r\n        padding: 16px;\r\n        border-radius: 8px;\r\n        overflow: hidden;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const s=i},7609:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>s});var n=t(4015),o=t.n(n),a=t(3645),i=t.n(a)()(o());i.push([e.id,".full[data-v-6ebf4eaa]{width:100%;position:relative;background:#e1e1e1}.active[data-v-6ebf4eaa],.full[data-v-6ebf4eaa]{height:4px;border-radius:2px}.active[data-v-6ebf4eaa]{background:#2e3e4e!important}","",{version:3,sources:["webpack://./resources/js/components/ProgressBar.vue"],names:[],mappings:"AAgBA,uBACA,UAAA,CACA,iBAAA,CAEA,kBAEA,CACA,gDAJA,UAAA,CAEA,iBAMA,CAJA,yBAEA,4BAEA",sourcesContent:['<template>\r\n    <v-row class="ma-0">\r\n        <div class="full">\r\n            <div class="active" :style="{width: progress+\'%\'}"/>\r\n        </div>\r\n    </v-row>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        props: [\'progress\'],\r\n        name: "ProgressBar"\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .full{\r\n        width: 100%;\r\n        position: relative;\r\n        height: 4px;\r\n        background: #E1E1E1;\r\n        border-radius: 2px;\r\n    }\r\n    .active{\r\n        height: 4px;\r\n        background: #2e3e4e !important;\r\n        border-radius: 2px;\r\n    }\r\n</style>'],sourceRoot:""}]);const s=i},2473:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>s});var n=t(4015),o=t.n(n),a=t(3645),i=t.n(a)()(o());i.push([e.id,".photo-input[data-v-710130a2]{position:absolute;visibility:hidden}","",{version:3,sources:["webpack://./resources/js/components/photo-loader.vue"],names:[],mappings:"AA2HA,8BACA,iBAAA,CACA,iBACA",sourcesContent:['<template>\r\n    <v-card class="d-flex flex-column pt-4 pb-4" justify-center align-center elevation="0">\r\n        <div v-if="one && loadedPhotos.length" class="text-center">{{loadedPhotos[0].name}}</div>\r\n        <v-row v-if="!one" class="">\r\n            <v-col xs="6" md="3" sm="6" v-for="(photo, i) in carouselPhotos" :key="i" v-if="!!carouselPhotos[i]">\r\n                <edit-photo-card\r\n                        :preload="preload"\r\n                        :filled="true"\r\n                        :file="photo"\r\n                        @delete="() => deletePhoto(photo, i)"\r\n                        contain\r\n                />\r\n            </v-col>\r\n            <v-col xs="6" md="3" sm="6">\r\n                <edit-photo-card\r\n                    @click="() => $refs.btn.click()">\r\n                    <drop-area @change="addPhoto" :yet="carouselPhotos.length"/>\r\n                    <template v-slot:actions>\r\n                        <div class="hidden"></div>\r\n                    </template>\r\n                </edit-photo-card>\r\n            </v-col>\r\n        </v-row>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\n\r\n    import EditPhotoCard from "./EditPhotoCard";\r\n    import DropArea from "./DropArea";\r\n\r\n    export default {\r\n        name: \'photo-loader\',\r\n        props: {\r\n            radius: {\r\n                type: Number,\r\n            },\r\n            one: {\r\n                type: Boolean,\r\n                default: false,\r\n            },\r\n            photos: {\r\n                type: Array,\r\n                default: () => ([]),\r\n            },\r\n            preload: {\r\n                type: Boolean,\r\n                default: false,\r\n            }\r\n        },\r\n        components: {DropArea, EditPhotoCard},\r\n        data: (vm) => ({\r\n                n: 0,\r\n                photo: \'\',\r\n                loadedPhotos: [],\r\n                deleted: [],\r\n                carouselPhotos: vm.photos,\r\n                fileImg: null,\r\n        }),\r\n        updated() {\r\n        },\r\n        methods: {\r\n            deletePhoto(photo, cpi) {\r\n                if (photo.name) {\r\n                    this.loadedPhotos.forEach((file, i) => {\r\n                        if (file.name === photo.name) delete this.loadedPhotos[i];\r\n                    });\r\n                } else {\r\n                    this.deleted.push(this.photos[cpi].id);\r\n                }\r\n                delete this.carouselPhotos[cpi];\r\n                this.carouselPhotos = [...this.carouselPhotos];\r\n            },\r\n            getPhotos() {\r\n                return this.loadedPhotos.concat(this.deleted);\r\n            },\r\n            getFirst() {\r\n                return this.loadedPhotos[0];\r\n            },\r\n            returnFormData(val) {\r\n                this.$emit(\'save-photo\', val)\r\n            },\r\n            updatePhoto(val) {\r\n                this.photo = val\r\n                this.showCropperDialog = false\r\n            },\r\n            clickOnInput() {\r\n                document.getElementById(\'files\').files = (new DataTransfer()).files;\r\n                document.getElementById(\'files\').click()\r\n\r\n            },\r\n            addPhoto(event) {\r\n                [...event.target.files].forEach((photo) => {\r\n                    this.fileImg = photo;\r\n                    if (this.fileImg.size > 5024000) {\r\n                        this.$root.$children[0].snackbarText = \'Размер файла не может быть больше 5МБ\'\r\n                        this.$root.$children[0].snackbar = true\r\n                        return;\r\n                    }\r\n                    if (this.loadedPhotos.length > 10) {\r\n                        this.$root.$children[0].snackbarText = \'Вы не можете загрузить больше 10 фотографий\'\r\n                        this.$root.$children[0].snackbar = true\r\n                        return;\r\n                    }\r\n                    this.carouselPhotos = [\r\n                        ...this.carouselPhotos,\r\n                        this.preload ? URL.createObjectURL(this.fileImg) : this.fileImg\r\n                    ];\r\n                    this.loadedPhotos.push(this.fileImg)\r\n                    this.n = this.loadedPhotos.length - 1\r\n                    this.fileImg = null;\r\n                })\r\n            },\r\n        },\r\n        watch: {\r\n            photos(nv) {\r\n                this.carouselPhotos = nv.map((file) => file.file);\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .photo-input {\r\n        position: absolute;\r\n        visibility: hidden;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const s=i},4208:(e,r,t)=>{"use strict";t.d(r,{Z:()=>h});var n=function(e,r){var t=document.createElement("canvas"),n=t.getContext("2d"),o=e.width,a=e.height;t.width=o,t.height=a,n.fillStyle="#fff",n.fillRect(0,0,t.width,t.height),r?r(n,t):n.drawImage(e,0,0,t.width,t.height);var i=t.toDataURL("image/jpeg",.4);return t=n=null,e=null,i},o=function(e,r){r=r||"";for(var t=atob(e),n=[],o=new ArrayBuffer(t.length),a=new Uint8Array(o),i=0;i<t.length;i++)a[i]=t.charCodeAt(i);return n.push(a),new Blob(n,{type:r})};const a={props:["progress"],name:"ProgressBar"};t(4865);var i=t(1900);const s={name:"EditPhotoCard",components:{ProgressBar:(0,i.Z)(a,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("v-row",{staticClass:"ma-0"},[t("div",{staticClass:"full"},[t("div",{staticClass:"active",style:{width:e.progress+"%"}})])])}),[],!1,null,"6ebf4eaa",null).exports},props:{focus:{type:Boolean,default:!1},preload:{type:Boolean,default:!0},cover:{type:String,default:""},filled:{type:Boolean,default:!1},file:{type:File|String}},data:function(e){return{open:!1,focused:!!e.$attrs.focus,src:"",loaded:!1,error:!1,progress:0,rotateTimeout:null}},mounted:function(){this.upload(this.file)},computed:{isCover:function(){return this.cover&&-1!==this.src.indexOf(this.cover)}},methods:{rotate:function(){var e=this;this.rotateTimeout&&(clearTimeout(this.rotateTimeout),this.rotateTimeout=null),this.rotateTimeout=setTimeout((function(){var r=new Image;r.crossOrigin="anonymous",r.onload=function(){var t=n(r,(function(e,t){e.save(),e.translate(t.width/2,t.height/2),e.rotate(90*Math.PI/180),e.drawImage(r,-r.width/2,-r.width/2),e.restore()})),a=o(t.split(",")[1],"image/jpeg");e.upload(a,e.src.split("/").reverse()[0])},r.src=e.src}),1e3)},readLocalSrc:function(e){var r=this;if(this.file instanceof Blob){var t=new FileReader;t.readAsDataURL(e),t.onloadend=function(){r.src=t.result,r.$emit("change",r.src)}}else this.src=e;this.loaded=!0},upload:function(e,r){var t=this;if(this.preload&&e instanceof Blob){var a=new XMLHttpRequest;a.responseType="json";var i=new FormData;i.append("file",e,r||e.name),a.open("POST","/photo/upload",!0),a.upload.addEventListener("progress",(function(e){t.progress=100*e.loaded/e.total||100})),a.addEventListener("readystatechange",(function(i){if(4==a.readyState&&200==a.status)t.src=i.target.response.url,t.$emit("change",i.target.response.url),t.loaded=!0;else if(4==a.readyState&&200!=a.status){if(400==a.status&&!r){var s=new Image;return s.onload=function(){var r=n(s),a=o(r.split(",")[1],"image/jpeg");t.upload(a,e.name)},void(s.src=URL.createObjectURL(e))}t.readLocalSrc(e),t.error=t.loaded=!0}})),a.send(i)}else this.readLocalSrc(e)}},watch:{file:function(e){"string"==typeof e&&(this.src=e)}}};t(2380),t(4552);const l=(0,i.Z)(s,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"site-photo-card",class:{focused:e.focus,filled:e.filled}},[t("div",{staticClass:"site-photo-card-content",staticStyle:{"z-index":"1"}},[e._t("default",(function(){return[e.loaded&&e.src?t("v-img",{attrs:{src:e.src,cover:"",height:"100%"},on:{click:function(r){e.$emit("click",e.$attrs.value),e.open=!0}}}):e.loaded||e.error?e._e():t("v-row",{staticClass:"pa-8",staticStyle:{"align-items":"center"},attrs:{xs:"12"}},[t("progress-bar",{attrs:{progress:e.progress}})],1)]}))],2),e._v(" "),t("div",{staticClass:"site-photo-card-actions",staticStyle:{"z-index":"2"}},[e._t("actions",(function(){return[t("v-row",{staticClass:"pl-5 pr-5 pt-2 justify-end",attrs:{xs:"12"}},[t("v-btn",{staticClass:"mr-3",attrs:{fab:"",small:""},on:{click:function(r){return e.$emit("delete")}}},[t("v-icon",[e._v("mdi-delete")])],1)],1)]}))],2),e._v(" "),e.open?t("v-dialog",{attrs:{"content-class":"sm-photo-dialog",fullscreen:!0},model:{value:e.open,callback:function(r){e.open=r},expression:"open"}},[t("div",{staticClass:"dialog-image"},[e.loaded&&e.src?t("v-img",{attrs:{src:e.src,"max-height":"90vh",contain:""}}):e._e(),e._v(" "),t("v-btn",{staticClass:"close-btn",attrs:{icon:"",color:"gray"},on:{click:function(r){e.$emit("focusOut"),e.open=!1}}},[t("v-icon",[e._v("mdi-close")])],1)],1)]):e._e()],1)}),[],!1,null,"503f2afb",null).exports;const d={name:"DropArea",data:function(e){return{vm:e}},props:["yet"],mounted:function(e){var r=this,t=document.getElementById("drop-area");function n(e){e.preventDefault(),e.stopPropagation()}function o(e){t.classList.add("focus")}function a(e){t.classList.remove("focus")}["dragenter","dragover","dragleave","drop"].forEach((function(e){t.addEventListener(e,n,!1)})),["dragenter","dragover"].forEach((function(e){t.addEventListener(e,o,!1)})),["dragleave","drop"].forEach((function(e){t.addEventListener(e,a,!1)}));t.addEventListener("drop",(function(e){var t=e.dataTransfer.files;r.handleFiles(t)}),!1)},methods:{handleFiles:function(e){this.$emit("change",{target:{files:e}})}}};t(8671);const c=(0,i.Z)(d,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",{staticClass:"drop-area",class:e.$vuetify.breakpoint.smAndDown?["drop-sm"]:[],attrs:{id:"drop-area"}},[t("form",{staticClass:"drop-form"},[t("input",{staticClass:"hide",attrs:{type:"file",id:"fileElem",multiple:"",accept:"image/*"},on:{change:function(r){return e.$emit("change",r)}}}),e._v(" "),t("label",{staticClass:"drop-btn",attrs:{for:"fileElem"}},[e._v(e._s(e.yet?"Загрузить еще":"Загрузить фото"))]),e._v(" "),t("p",{staticClass:"format-file-desc"},[e._v("Формат – jpg, png")]),e._v(" "),t("p",{staticClass:"file-desc hover"},[e._v("Отпустите фотографию сюда")])])])}),[],!1,null,"ee4fed0c",null).exports;function p(e){return function(e){if(Array.isArray(e))return A(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,r){if(!e)return;if("string"==typeof e)return A(e,r);var t=Object.prototype.toString.call(e).slice(8,-1);"Object"===t&&e.constructor&&(t=e.constructor.name);if("Map"===t||"Set"===t)return Array.from(e);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return A(e,r)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(e,r){(null==r||r>e.length)&&(r=e.length);for(var t=0,n=new Array(r);t<r;t++)n[t]=e[t];return n}const f={name:"photo-loader",props:{radius:{type:Number},one:{type:Boolean,default:!1},photos:{type:Array,default:function(){return[]}},preload:{type:Boolean,default:!1}},components:{DropArea:c,EditPhotoCard:l},data:function(e){return{n:0,photo:"",loadedPhotos:[],deleted:[],carouselPhotos:e.photos,fileImg:null}},updated:function(){},methods:{deletePhoto:function(e,r){var t=this;e.name?this.loadedPhotos.forEach((function(r,n){r.name===e.name&&delete t.loadedPhotos[n]})):this.deleted.push(this.photos[r].id),delete this.carouselPhotos[r],this.carouselPhotos=p(this.carouselPhotos)},getPhotos:function(){return this.loadedPhotos.concat(this.deleted)},getFirst:function(){return this.loadedPhotos[0]},returnFormData:function(e){this.$emit("save-photo",e)},updatePhoto:function(e){this.photo=e,this.showCropperDialog=!1},clickOnInput:function(){document.getElementById("files").files=(new DataTransfer).files,document.getElementById("files").click()},addPhoto:function(e){var r=this;p(e.target.files).forEach((function(e){return r.fileImg=e,r.fileImg.size>5024e3?(r.$root.$children[0].snackbarText="Размер файла не может быть больше 5МБ",void(r.$root.$children[0].snackbar=!0)):r.loadedPhotos.length>10?(r.$root.$children[0].snackbarText="Вы не можете загрузить больше 10 фотографий",void(r.$root.$children[0].snackbar=!0)):(r.carouselPhotos=[].concat(p(r.carouselPhotos),[r.preload?URL.createObjectURL(r.fileImg):r.fileImg]),r.loadedPhotos.push(r.fileImg),r.n=r.loadedPhotos.length-1,void(r.fileImg=null))}))}},watch:{photos:function(e){this.carouselPhotos=e.map((function(e){return e.file}))}}};t(8126);const h=(0,i.Z)(f,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("v-card",{staticClass:"d-flex flex-column pt-4 pb-4",attrs:{"justify-center":"","align-center":"",elevation:"0"}},[e.one&&e.loadedPhotos.length?t("div",{staticClass:"text-center"},[e._v(e._s(e.loadedPhotos[0].name))]):e._e(),e._v(" "),e.one?e._e():t("v-row",{},[e._l(e.carouselPhotos,(function(r,n){return e.carouselPhotos[n]?t("v-col",{key:n,attrs:{xs:"6",md:"3",sm:"6"}},[t("edit-photo-card",{attrs:{preload:e.preload,filled:!0,file:r,contain:""},on:{delete:function(){return e.deletePhoto(r,n)}}})],1):e._e()})),e._v(" "),t("v-col",{attrs:{xs:"6",md:"3",sm:"6"}},[t("edit-photo-card",{on:{click:function(){return e.$refs.btn.click()}},scopedSlots:e._u([{key:"actions",fn:function(){return[t("div",{staticClass:"hidden"})]},proxy:!0}],null,!1,810021170)},[t("drop-area",{attrs:{yet:e.carouselPhotos.length},on:{change:e.addPhoto}})],1)],1)],2)],1)}),[],!1,null,"710130a2",null).exports},7853:(e,r,t)=>{"use strict";t.r(r),t.d(r,{default:()=>o});const n={name:"Files",components:{PhotoLoader:t(4208).Z},data:function(e){return{l:1,file:{title:"",file:null},files:[],page:1,delete_id:0,show:!1,titleError:""}},mounted:function(){this.getPage()},methods:{openDialog:function(){this.show=!0},closeDialog:function(){this.show=!1},getPage:function(){var e=this;window.axios.get("file?",{params:{page:this.page,user_id:this.$route.params.user_id>0?this.$route.params.user_id:null}}).then((function(r){e.files=r.data.data,e.l=r.data.last_page}))},upload:function(){var e=this,r=[this.$refs.loader.getFirst()];if(r.length){var t=new FormData;r.forEach((function(e,r){t.append("file",e,e.name)})),t.append("title",this.file.title);try{window.axios.post("/file",t).then((function(r){e.getPage()}))}catch(e){console.log(e),this.$root.$children[0].snackbarText="Ошибка сохранения фотографии",this.$root.$children[0].snackbar=!0}}this.closeDialog()},download:function(e){window.axios.get("file/"+e,{method:"GET",responseType:"blob"}).then((function(e){var r=window.URL.createObjectURL(new Blob([e.data])),t=document.createElement("a");t.href=r,t.setAttribute("download",decodeURIComponent(e.headers["content-disposition"].split(";")[2].split("utf-8''")[1])),document.body.appendChild(t),t.click()}))},delete:function(){var e=this;try{window.axios.delete("/file/"+this.delete_id).then((function(r){e.getPage()}))}catch(e){console.log(e),this.$root.$children[0].snackbarText="Ошибка сохранения фотографии",this.$root.$children[0].snackbar=!0}}},watch:{page:function(){this.getPage()},delete_id:function(e){e>0&&this.delete()}}};const o=(0,t(1900).Z)(n,(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("v-container",{staticClass:"cover"},[t("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s(e.$route.params.user_id>0?"Файлы пользователя":"Мои файлы")}}),e._v(" "),e.files.length>0?t("div",[t("v-container",[e._l(e.files,(function(r,n){return t("v-card",{key:n,staticClass:"ma-2",staticStyle:{position:"relative"},attrs:{elevation:"0"}},[t("div",{staticClass:"d-flex crud",staticStyle:{position:"absolute",right:"5px",top:"-10px","font-size":"10px"}},[t("v-btn",{staticClass:"mr-3",attrs:{color:"red",fab:"",small:"",dark:""},on:{click:function(t){e.delete_id=r.id}}},[t("v-icon",[e._v("mdi-delete")])],1),e._v(" "),t("v-btn",{attrs:{color:"green",fab:"",small:"",dark:""},on:{click:function(t){return e.download(r.id)}}},[t("v-icon",[e._v("mdi-download")])],1)],1),e._v(" "),t("h4",{staticStyle:{"max-width":"60%"}},[e._v(e._s(r.title))])])})),e._v(" "),e.l>1?t("div",{staticClass:"text-center xs-12"},[t("v-pagination",{attrs:{length:e.l,"total-visible":3},model:{value:e.page,callback:function(r){e.page=r},expression:"page"}})],1):e._e()],2)],1):t("div",[t("div",{staticClass:"text-center my-3"},[e._v("Файлов пока нет")])]),e._v(" "),t("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",dark:""},on:{click:e.openDialog}},[t("v-icon",[e._v("mdi-paperclip")])],1),e._v(" "),e.show?t("v-dialog",{attrs:{value:e.show,fullscreen:e.$vuetify.breakpoint.mobile},on:{close:e.closeDialog}},[[t("v-card",[t("v-toolbar",{staticClass:"container py-1 my-0 justify-space-between",attrs:{elevation:"1"}},[t("v-toolbar-title",[t("span",{staticClass:"headline"},[e._v("Загрузка файла")])]),e._v(" "),t("v-spacer"),e._v(" "),t("v-toolbar-title",[t("v-icon",{staticClass:"flex-grow-0",attrs:{text:""},on:{click:e.closeDialog}},[e._v("X")])],1)],1),e._v(" "),t("v-card-text",[t("v-container",[t("v-col",[t("v-card-text",[e._v("\n                                Выберите файл для загрузки, и обозначте его\n                            ")]),e._v(" "),t("v-form",{nativeOn:{keyup:function(r){return!r.type.indexOf("key")&&e._k(r.keyCode,"enter",13,r.key,"Enter")?null:e.upload.apply(null,arguments)}}},[t("v-text-field",{attrs:{label:"Обозначение(Инн, паспорт)","error-messages":e.titleError,name:"title",type:"text",required:""},model:{value:e.file.title,callback:function(r){e.$set(e.file,"title",r)},expression:"file.title"}}),e._v(" "),t("photo-loader",{ref:"loader",attrs:{one:!0}}),e._v(" "),t("v-card",{staticClass:"d-flex justify-center align-center",attrs:{flat:"",height:"auto",tile:""}},[t("v-btn",{attrs:{color:"dark",disabled:""==e.file.title},on:{click:e.upload}},[e._v("\n                                        Подтвердить\n                                    ")])],1)],1)],1)],1)],1)],1)]],2):e._e()],1)}),[],!1,null,null,null).exports},8671:(e,r,t)=>{var n=t(4539);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("01e09b4c",n,!0,{})},2380:(e,r,t)=>{var n=t(3934);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("736a53c3",n,!0,{})},4552:(e,r,t)=>{var n=t(2446);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("08c2778c",n,!0,{})},4865:(e,r,t)=>{var n=t(7609);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("10dd9cee",n,!0,{})},8126:(e,r,t)=>{var n=t(2473);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[e.id,n,""]]),n.locals&&(e.exports=n.locals);(0,t(5346).Z)("11ea50ce",n,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Ecm9wQXJlYS52dWU/YzE4NSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9FZGl0UGhvdG9DYXJkLnZ1ZT8wYTQ2Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0VkaXRQaG90b0NhcmQudnVlP2IwMTQiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUHJvZ3Jlc3NCYXIudnVlP2JjMjQiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGhvdG8tbG9hZGVyLnZ1ZT80NzM4Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3Bob3RvLWxvYWRlci52dWU/ODIxMyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvaW1hZ2UuanMiLCJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL1Byb2dyZXNzQmFyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Qcm9ncmVzc0Jhci52dWU/YmI1OCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Qcm9ncmVzc0Jhci52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRWRpdFBob3RvQ2FyZC52dWU/NTgxZiIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRWRpdFBob3RvQ2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvUHJvZ3Jlc3NCYXIudnVlP2I1NmIiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRWRpdFBob3RvQ2FyZC52dWUiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRWRpdFBob3RvQ2FyZC52dWU/NTJhNiIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRHJvcEFyZWEudnVlIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0Ryb3BBcmVhLnZ1ZT84YWI0Iiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0Ryb3BBcmVhLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Ecm9wQXJlYS52dWU/Y2FhOSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGhvdG8tbG9hZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9waG90by1sb2FkZXIudnVlPzI2ZWEiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvcGhvdG8tbG9hZGVyLnZ1ZSIsIndlYnBhY2s6Ly8vcmVzb3VyY2VzL2pzL3BhZ2VzL0ZpbGVzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvRmlsZXMudnVlPzhkOGQiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL3BhZ2VzL0ZpbGVzLnZ1ZSIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvcGFnZXMvRmlsZXMudnVlPzVlMzMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRHJvcEFyZWEudnVlP2Q0ODAiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvRWRpdFBob3RvQ2FyZC52dWU/NDNlMCIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9FZGl0UGhvdG9DYXJkLnZ1ZT9hNDJmIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL1Byb2dyZXNzQmFyLnZ1ZT9lMjFiIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3Bob3RvLWxvYWRlci52dWU/MmQ1NSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImNvbXByZXNzIiwiaW1nIiwibW9kaWZ5Q29udGV4dCIsImNhbnZhcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNvbnRleHQiLCJnZXRDb250ZXh0Iiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImRyYXdJbWFnZSIsImJhc2U2NERhdGEiLCJ0b0RhdGFVUkwiLCJiNjRUb0Jsb2IiLCJiNjREYXRhIiwiY29udGVudFR5cGUiLCJieXRlQ2hhcmFjdGVycyIsImF0b2IiLCJidWZmZXIiLCJhQnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJsZW5ndGgiLCJ1QnVmZmVyIiwiVWludDhBcnJheSIsImkiLCJjaGFyQ29kZUF0IiwiQmxvYiIsInR5cGUiLCJfdm0iLCJ0aGlzIiwiX2giLCIkY3JlYXRlRWxlbWVudCIsIl9jIiwiX3NlbGYiLCJzdGF0aWNDbGFzcyIsInN0eWxlIiwicHJvZ3Jlc3MiLCJjbGFzcyIsImZvY3VzZWQiLCJmb2N1cyIsImZpbGxlZCIsInN0YXRpY1N0eWxlIiwiX3QiLCJsb2FkZWQiLCJzcmMiLCJhdHRycyIsIm9uIiwiJGV2ZW50IiwiJGVtaXQiLCIkYXR0cnMiLCJvcGVuIiwiZXJyb3IiLCJfZSIsIl92IiwibW9kZWwiLCJ2YWx1ZSIsImNhbGxiYWNrIiwiJCR2IiwiZXhwcmVzc2lvbiIsIiR2dWV0aWZ5IiwiYnJlYWtwb2ludCIsInNtQW5kRG93biIsImUiLCJfcyIsInlldCIsIm9uZSIsImxvYWRlZFBob3RvcyIsIm5hbWUiLCJfbCIsInBob3RvIiwiY2Fyb3VzZWxQaG90b3MiLCJrZXkiLCJwcmVsb2FkIiwiZGVsZXRlUGhvdG8iLCIkcmVmcyIsImJ0biIsImNsaWNrIiwic2NvcGVkU2xvdHMiLCJfdSIsImZuIiwicHJveHkiLCJhZGRQaG90byIsImRvbVByb3BzIiwiJHJvdXRlIiwicGFyYW1zIiwidXNlcl9pZCIsImZpbGVzIiwiZW50cnkiLCJpbmRleCIsImRlbGV0ZV9pZCIsImRvd25sb2FkIiwidGl0bGUiLCJsIiwicGFnZSIsIm9wZW5EaWFsb2ciLCJzaG93IiwibW9iaWxlIiwiY2xvc2VEaWFsb2ciLCJuYXRpdmVPbiIsImluZGV4T2YiLCJfayIsImtleUNvZGUiLCJ1cGxvYWQiLCJhcHBseSIsImFyZ3VtZW50cyIsInRpdGxlRXJyb3IiLCJmaWxlIiwiJHNldCIsInJlZiIsImNvbnRlbnQiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImxvY2FscyIsImV4cG9ydHMiLCJhZGQiXSwibWFwcGluZ3MiOiJrSkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSx3dUNBQXl1QyxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxvREFBb0QsTUFBUSxHQUFHLFNBQVcsNmxCQUE2bEIsZUFBaUIsQ0FBQyxnaklBQStpSSxXQUFhLE1BRWxpTSxXLDJGQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLHVyQkFBMHJCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlEQUF5RCxNQUFRLEdBQUcsU0FBVyxtUkFBbVIsZUFBaUIsQ0FBQyxpOFFBQXcrUSxXQUFhLE1BRXZtVCxXLDJGQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLG15QkFBb3lCLEdBQUcsQ0FBQyxRQUFVLEVBQUUsUUFBVSxDQUFDLHlEQUF5RCxNQUFRLEdBQUcsU0FBVywwWkFBMFosZUFBaUIsQ0FBQyxpOFFBQXcrUSxXQUFhLE1BRXgxVCxXLDJGQ0pJSCxFLE1BQTBCLEdBQTRCLEtBRTFEQSxFQUF3QkMsS0FBSyxDQUFDQyxFQUFPQyxHQUFJLDZNQUE4TSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx1REFBdUQsTUFBUSxHQUFHLFNBQVcscUZBQXFGLGVBQWlCLENBQUMsaW9CQUFzb0IsV0FBYSxNQUV6bEMsVywyRkNKSUgsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSxxRUFBc0UsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsd0RBQXdELE1BQVEsR0FBRyxTQUFXLCtCQUErQixlQUFpQixDQUFDLDZwSkFBZ3NKLFdBQWEsTUFFdDlKLFcsNkNDUEEsSUNDYUMsRUFBVyxTQUFDQyxFQUFLQyxHQUMxQixJQUFJQyxFQUFTQyxTQUFTQyxjQUFjLFVBQ2hDQyxFQUFVSCxFQUFPSSxXQUFXLE1BQzVCQyxFQUFRUCxFQUFJTyxNQUNaQyxFQUFTUixFQUFJUSxPQUdqQk4sRUFBT0ssTUFBUUEsRUFDZkwsRUFBT00sT0FBU0EsRUFDaEJILEVBQVFJLFVBQVksT0FDcEJKLEVBQVFLLFNBQVMsRUFBRyxFQUFHUixFQUFPSyxNQUFPTCxFQUFPTSxRQUN4Q1AsRUFBZUEsRUFBY0ksRUFBU0gsR0FDckNHLEVBQVFNLFVBQVVYLEVBQUssRUFBRyxFQUFHRSxFQUFPSyxNQUFPTCxFQUFPTSxRQUN2RCxJQUFJSSxFQUFhVixFQUFPVyxVQUFVLGFBQWMsSUFJaEQsT0FIQVgsRUFBU0csRUFBVSxLQUVuQkwsRUFBTSxLQUNDWSxHQUlFRSxFQUFZLFNBQUNDLEVBQVNDLEdBQy9CQSxFQUFjQSxHQUFlLEdBUTdCLElBTkEsSUFBSUMsRUFBaUJDLEtBQUtILEdBQ3RCSSxFQUFTLEdBR1RDLEVBQVUsSUFBSUMsWUFBWUosRUFBZUssUUFDekNDLEVBQVUsSUFBSUMsV0FBV0osR0FDcEJLLEVBQUksRUFBR0EsRUFBSVIsRUFBZUssT0FBUUcsSUFDdkNGLEVBQVFFLEdBQUtSLEVBQWVTLFdBQVdELEdBSTNDLE9BRkFOLEVBQU92QixLQUFLMkIsR0FFTCxJQUFJSSxLQUFLUixFQUFRLENBQ3BCUyxLQUFNWixLQzVCZCxNQ1RzTixFRFN0TixDQUNFLE1BQUYsYUFDRSxLQUFGLGUsc0JFUUEsTUNuQndOLEVDd0N4TixDQUNFLEtBQUYsZ0JBQ0UsV0FBRixDQUFJLGFGbENZLE9BQ2QsR0dUVyxXQUFhLElBQUlhLEVBQUlDLEtBQVNDLEVBQUdGLEVBQUlHLGVBQW1CQyxFQUFHSixFQUFJSyxNQUFNRCxJQUFJRixFQUFHLE9BQU9FLEVBQUcsUUFBUSxDQUFDRSxZQUFZLFFBQVEsQ0FBQ0YsRUFBRyxNQUFNLENBQUNFLFlBQVksUUFBUSxDQUFDRixFQUFHLE1BQU0sQ0FBQ0UsWUFBWSxTQUFTQyxNQUFNLENBQUU3QixNQUFPc0IsRUFBSVEsU0FBUyxhQUNyTSxJSFdwQixFQUNBLEtBQ0EsV0FDQSxNLFNFNEJBLE1BQUYsQ0FDSSxNQUFKLENBQU0sS0FBTixRQUFNLFNBQU4sR0FDSSxRQUFKLENBQU0sS0FBTixRQUFNLFNBQU4sR0FDSSxNQUFKLENBQU0sS0FBTixPQUFNLFFBQU4sSUFDSSxPQUFKLENBQU0sS0FBTixRQUFNLFNBQU4sR0FDSSxLQUFKLENBQU0sS0FBTixjQUVFLEtBQUYsWUFBSSxNQUFKLENBQ00sTUFBTixFQUNNLFVBQU4sZUFDTSxJQUFOLEdBQ00sUUFBTixFQUNNLE9BQU4sRUFDTSxTQUFOLEVBQ00sY0FBTixPQUVFLFFBbkJGLFdBb0JJLEtBQUosbUJBRUUsU0FBRixDQUNJLFFBREosV0FFTSxPQUFOLGdEQUdFLFFBQUYsQ0FDSSxPQURKLFdBQ00sSUFBTixPQUNBLHFCQUNRLGFBQVIsb0JBQ1EsS0FBUixvQkFFTSxLQUFOLHFDQUNRLElBQVIsWUFDUSxFQUFSLHdCQUNRLEVBQVIsa0JBQ1UsSUFBVixxQkFDWSxFQUFaLE9BQ1ksRUFBWixnQ0FDWSxFQUFaLHVCQUNZLEVBQVosbUNBQ1ksRUFBWixhQUVBLGtDQUNVLEVBQVYseUNBRVEsRUFBUixZQUNBLE1BRUksYUF2QkosU0F1QkEsR0FBTSxJQUFOLE9BQ00sR0FBTiwyQkFDUSxJQUFSLGlCQUNRLEVBQVIsaUJBQ1EsRUFBUixxQkFDVSxFQUFWLGFBQ1UsRUFBViw0QkFFQSxXQUNNLEtBQU4sV0FFSSxPQWxDSixTQWtDQSxLQUFNLElBQU4sT0FDTSxHQUFOLGdDQUFNLENBSUEsSUFBTixxQkFDTSxFQUFOLG9CQUNNLElBQU4sZUFDTSxFQUFOLDJCQUNNLEVBQU4sZ0NBQ00sRUFBTixnREFDUSxFQUFSLHNDQUVNLEVBQU4saURBQ1EsR0FBUiwrQkFDVSxFQUFWLDBCQUNVLEVBQVYsc0NBQ1UsRUFBVixlQUNBLG1DQUNVLEdBQVYsbUJBRVksSUFBWixZQU9ZLE9BTkEsRUFBWixrQkFDYyxJQUFkLE9BQ0Esa0NBQ2MsRUFBZCx1QkFFWSxFQUFaLDRCQUdVLEVBQVYsZ0JBQ1UsRUFBVixzQkFJTSxFQUFOLGFBakNRLEtBQVIsa0JBb0NFLE1BQUYsQ0FDSSxLQURKLFNBQ0EsR0FDQSxvQyxnQkV6SEEsU0FYZ0IsT0FDZCxHQ1ZXLFdBQWEsSUFBSVIsRUFBSUMsS0FBU0MsRUFBR0YsRUFBSUcsZUFBbUJDLEVBQUdKLEVBQUlLLE1BQU1ELElBQUlGLEVBQUcsT0FBT0UsRUFBRyxNQUFNLENBQUNFLFlBQVksa0JBQWtCRyxNQUFNLENBQUNDLFFBQVNWLEVBQUlXLE1BQU9DLE9BQVFaLEVBQUlZLFNBQVMsQ0FBQ1IsRUFBRyxNQUFNLENBQUNFLFlBQVksMEJBQTBCTyxZQUFZLENBQUMsVUFBVSxNQUFNLENBQUNiLEVBQUljLEdBQUcsV0FBVSxXQUFXLE1BQU8sQ0FBRWQsRUFBSWUsUUFBVWYsRUFBSWdCLElBQUtaLEVBQUcsUUFBUSxDQUFDYSxNQUFNLENBQUMsSUFBTWpCLEVBQUlnQixJQUFJLE1BQVEsR0FBRyxPQUFTLFFBQVFFLEdBQUcsQ0FBQyxNQUFRLFNBQVNDLEdBQVFuQixFQUFJb0IsTUFBTSxRQUFTcEIsRUFBSXFCLE9BQWMsT0FBSXJCLEVBQUlzQixNQUFLLE1BQVd0QixFQUFJZSxRQUFXZixFQUFJdUIsTUFBd0p2QixFQUFJd0IsS0FBckpwQixFQUFHLFFBQVEsQ0FBQ0UsWUFBWSxPQUFPTyxZQUFZLENBQUMsY0FBYyxVQUFVSSxNQUFNLENBQUMsR0FBSyxPQUFPLENBQUNiLEVBQUcsZUFBZSxDQUFDYSxNQUFNLENBQUMsU0FBV2pCLEVBQUlRLGFBQWEsUUFBZ0IsR0FBR1IsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsTUFBTSxDQUFDRSxZQUFZLDBCQUEwQk8sWUFBWSxDQUFDLFVBQVUsTUFBTSxDQUFDYixFQUFJYyxHQUFHLFdBQVUsV0FBVyxNQUFPLENBQUNWLEVBQUcsUUFBUSxDQUFDRSxZQUFZLDZCQUE2QlcsTUFBTSxDQUFDLEdBQUssT0FBTyxDQUFDYixFQUFHLFFBQVEsQ0FBQ0UsWUFBWSxPQUFPVyxNQUFNLENBQUMsSUFBTSxHQUFHLE1BQVEsSUFBSUMsR0FBRyxDQUFDLE1BQVEsU0FBU0MsR0FBUSxPQUFPbkIsRUFBSW9CLE1BQU0sYUFBYSxDQUFDaEIsRUFBRyxTQUFTLENBQUNKLEVBQUl5QixHQUFHLGlCQUFpQixJQUFJLFFBQU8sR0FBR3pCLEVBQUl5QixHQUFHLEtBQU16QixFQUFRLEtBQUVJLEVBQUcsV0FBVyxDQUFDYSxNQUFNLENBQUMsZ0JBQWdCLGtCQUFrQixZQUFhLEdBQU1TLE1BQU0sQ0FBQ0MsTUFBTzNCLEVBQVEsS0FBRTRCLFNBQVMsU0FBVUMsR0FBTTdCLEVBQUlzQixLQUFLTyxHQUFLQyxXQUFXLFNBQVMsQ0FBQzFCLEVBQUcsTUFBTSxDQUFDRSxZQUFZLGdCQUFnQixDQUFFTixFQUFJZSxRQUFVZixFQUFJZ0IsSUFBS1osRUFBRyxRQUFRLENBQUNhLE1BQU0sQ0FBQyxJQUFNakIsRUFBSWdCLElBQUksYUFBYSxPQUFPLFFBQVUsTUFBTWhCLEVBQUl3QixLQUFLeEIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsUUFBUSxDQUFDRSxZQUFZLFlBQVlXLE1BQU0sQ0FBQyxLQUFPLEdBQUcsTUFBUSxRQUFRQyxHQUFHLENBQUMsTUFBUSxTQUFTQyxHQUFRbkIsRUFBSW9CLE1BQU0sWUFBYXBCLEVBQUlzQixNQUFLLEtBQVUsQ0FBQ2xCLEVBQUcsU0FBUyxDQUFDSixFQUFJeUIsR0FBRyxnQkFBZ0IsSUFBSSxLQUFLekIsRUFBSXdCLE1BQU0sS0FDbmdELElEWXBCLEVBQ0EsS0FDQSxXQUNBLE0sUUVIRixNQ2JtTixFRGFuTixDQUNFLEtBQUYsV0FDRSxLQUFGLFlBQUksTUFBSixDQUFNLEdBQU4sSUFDRSxNQUFGLFFBQ0UsUUFKRixTQUlBLEdBQUksSUFBSixPQUNBLHVDQUtJLFNBQUosS0FDTSxFQUFOLGlCQUNNLEVBQU4sa0JBVUksU0FBSixLQUNNLEVBQU4sdUJBR0ksU0FBSixLQUNNLEVBQU4sMEJBckJJLENBQUosZ0VBQ00sRUFBTiw0QkFRSSxDQUFKLDZDQUNNLEVBQU4sNEJBRUksQ0FBSix5Q0FDTSxFQUFOLDRCQWdCSSxFQUFKLHlCQUxBLFlBQ00sSUFDTixFQURBLGVBQ0EsTUFDTSxFQUFOLGtCQUVBLElBRUUsUUFBRixDQUNJLFlBREosU0FDQSxHQUNNLEtBQU4sZ0JBQVEsT0FBUixDQUFVLE1BQVYsUSxRRWpDQSxTQVhnQixPQUNkLEdDVFcsV0FBYSxJQUFJeEIsRUFBSUMsS0FBU0MsRUFBR0YsRUFBSUcsZUFBbUJDLEVBQUdKLEVBQUlLLE1BQU1ELElBQUlGLEVBQUcsT0FBT0UsRUFBRyxNQUFNLENBQUNFLFlBQVksWUFBWUcsTUFBTVQsRUFBSStCLFNBQVNDLFdBQVdDLFVBQVksQ0FBQyxXQUFhLEdBQUdoQixNQUFNLENBQUMsR0FBSyxjQUFjLENBQUNiLEVBQUcsT0FBTyxDQUFDRSxZQUFZLGFBQWEsQ0FBQ0YsRUFBRyxRQUFRLENBQUNFLFlBQVksT0FBT1csTUFBTSxDQUFDLEtBQU8sT0FBTyxHQUFLLFdBQVcsU0FBVyxHQUFHLE9BQVMsV0FBV0MsR0FBRyxDQUFDLE9BQVMsU0FBVWdCLEdBQUssT0FBT2xDLEVBQUlvQixNQUFNLFNBQVVjLE9BQVNsQyxFQUFJeUIsR0FBRyxLQUFLckIsRUFBRyxRQUFRLENBQUNFLFlBQVksV0FBV1csTUFBTSxDQUFDLElBQU0sYUFBYSxDQUFDakIsRUFBSXlCLEdBQUd6QixFQUFJbUMsR0FBSW5DLEVBQUlvQyxJQUF5QixnQkFBbkIscUJBQXVDcEMsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsSUFBSSxDQUFDRSxZQUFZLG9CQUFvQixDQUFDTixFQUFJeUIsR0FBRyx1QkFBdUJ6QixFQUFJeUIsR0FBRyxLQUFLckIsRUFBRyxJQUFJLENBQUNFLFlBQVksbUJBQW1CLENBQUNOLEVBQUl5QixHQUFHLHFDQUNycUIsSURXcEIsRUFDQSxLQUNBLFdBQ0EsTSxxd0JFZ0JGLE1DL0J1TixFRCtCdk4sQ0FDRSxLQUFGLGVBQ0UsTUFBRixDQUNJLE9BQUosQ0FDTSxLQUFOLFFBRUksSUFBSixDQUNNLEtBQU4sUUFDTSxTQUFOLEdBRUksT0FBSixDQUNNLEtBQU4sTUFDTSxRQUFOLFdBQVEsTUFBUixLQUVJLFFBQUosQ0FDTSxLQUFOLFFBQ00sU0FBTixJQUdFLFdBQUYsQ0FBSSxTQUFKLEVBQUksY0FBSixHQUNFLEtBQUYsWUFBSSxNQUFKLENBQ00sRUFBTixFQUNNLE1BQU4sR0FDTSxhQUFOLEdBQ00sUUFBTixHQUNNLGVBQU4sU0FDTSxRQUFOLE9BRUUsUUE1QkYsYUE4QkUsUUFBRixDQUNJLFlBREosU0FDQSxLQUFNLElBQU4sT0FDQSxPQUNRLEtBQVIsb0NBQ0EsNkNBR1EsS0FBUix1Q0FFQSx1QkFDTSxLQUFOLHVDQUVJLFVBWkosV0FhTSxPQUFOLHdDQUVJLFNBZkosV0FnQk0sT0FBTixzQkFFSSxlQWxCSixTQWtCQSxHQUNNLEtBQU4sdUJBRUksWUFyQkosU0FxQkEsR0FDTSxLQUFOLFFBQ00sS0FBTixzQkFFSSxhQXpCSixXQTBCTSxTQUFOLHVEQUNNLFNBQU4saUNBR0ksU0E5QkosU0E4QkEsR0FBTSxJQUFOLE9BQ00sRUFBTixxQ0FFUSxPQURBLEVBQVIsVUFDQSx1QkFDVSxFQUFWLDZFQUNVLEVBQVYsaUNBR0EsMEJBQ1UsRUFBVixtRkFDVSxFQUFWLGtDQUdRLEVBQVIsMkJBQ0Esa0JBREEsQ0FFQSxxREFFUSxFQUFSLDZCQUNRLEVBQVIsK0JBQ1EsRUFBUixvQkFJRSxNQUFGLENBQ0ksT0FESixTQUNBLEdBQ00sS0FBTixrQ0FBUSxPQUFSLGEsUUVqR0EsU0FYZ0IsT0FDZCxHaEJUVyxXQUFhLElBQUl6QixFQUFJQyxLQUFTQyxFQUFHRixFQUFJRyxlQUFtQkMsRUFBR0osRUFBSUssTUFBTUQsSUFBSUYsRUFBRyxPQUFPRSxFQUFHLFNBQVMsQ0FBQ0UsWUFBWSwrQkFBK0JXLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxlQUFlLEdBQUcsVUFBWSxNQUFNLENBQUVqQixFQUFJcUMsS0FBT3JDLEVBQUlzQyxhQUFhN0MsT0FBUVcsRUFBRyxNQUFNLENBQUNFLFlBQVksZUFBZSxDQUFDTixFQUFJeUIsR0FBR3pCLEVBQUltQyxHQUFHbkMsRUFBSXNDLGFBQWEsR0FBR0MsU0FBU3ZDLEVBQUl3QixLQUFLeEIsRUFBSXlCLEdBQUcsS0FBT3pCLEVBQUlxQyxJQUF1ckJyQyxFQUFJd0IsS0FBdHJCcEIsRUFBRyxRQUFRLEdBQUcsQ0FBQ0osRUFBSXdDLEdBQUl4QyxFQUFrQixnQkFBRSxTQUFTeUMsRUFBTTdDLEdBQUcsT0FBVUksRUFBSTBDLGVBQWU5QyxHQUFJUSxFQUFHLFFBQVEsQ0FBQ3VDLElBQUkvQyxFQUFFcUIsTUFBTSxDQUFDLEdBQUssSUFBSSxHQUFLLElBQUksR0FBSyxNQUFNLENBQUNiLEVBQUcsa0JBQWtCLENBQUNhLE1BQU0sQ0FBQyxRQUFVakIsRUFBSTRDLFFBQVEsUUFBUyxFQUFLLEtBQU9ILEVBQU0sUUFBVSxJQUFJdkIsR0FBRyxDQUFDLE9BQVMsV0FBYyxPQUFPbEIsRUFBSTZDLFlBQVlKLEVBQU83QyxRQUFVLEdBQUdJLEVBQUl3QixRQUFPeEIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsUUFBUSxDQUFDYSxNQUFNLENBQUMsR0FBSyxJQUFJLEdBQUssSUFBSSxHQUFLLE1BQU0sQ0FBQ2IsRUFBRyxrQkFBa0IsQ0FBQ2MsR0FBRyxDQUFDLE1BQVEsV0FBYyxPQUFPbEIsRUFBSThDLE1BQU1DLElBQUlDLFVBQVlDLFlBQVlqRCxFQUFJa0QsR0FBRyxDQUFDLENBQUNQLElBQUksVUFBVVEsR0FBRyxXQUFXLE1BQU8sQ0FBQy9DLEVBQUcsTUFBTSxDQUFDRSxZQUFZLGFBQWE4QyxPQUFNLElBQU8sTUFBSyxFQUFNLFlBQVksQ0FBQ2hELEVBQUcsWUFBWSxDQUFDYSxNQUFNLENBQUMsSUFBTWpCLEVBQUkwQyxlQUFlakQsUUFBUXlCLEdBQUcsQ0FBQyxPQUFTbEIsRUFBSXFELGFBQWEsSUFBSSxJQUFJLElBQWEsS0FDcGhDLElnQldwQixFQUNBLEtBQ0EsV0FDQSxNLG1FQ2dHRixNQy9HZ04sRUQrR2hOLENBQ0UsS0FBRixRQUNFLFdBQUYsQ0FBSSxZLFFBQUosR0FDRSxLQUFGLFlBQ0ksTUFBSixDQUNNLEVBQU4sRUFDTSxLQUFOLENBQ1EsTUFBUixHQUNRLEtBQVIsTUFFTSxNQUFOLEdBQ00sS0FBTixFQUNNLFVBQU4sRUFDTSxNQUFOLEVBQ00sV0FBTixLQUdFLFFBakJGLFdBa0JJLEtBQUosV0FFRSxRQUFGLENBQ0ksV0FESixXQUVNLEtBQU4sU0FFSSxZQUpKLFdBS00sS0FBTixTQUVJLFFBUEosV0FPTSxJQUFOLE9BQ00sT0FBTixtQkFBUSxPQUFSLENBQ1UsS0FBVixVQUNVLFFBQVYsZ0VBQ0Esa0JBQ1EsRUFBUixrQkFDUSxFQUFSLHVCQUdJLE9BaEJKLFdBZ0JNLElBQU4sT0FDQSxpQ0FDTSxHQUFOLFVBQ1EsSUFBUixlQUNRLEVBQVIsdUJBQ1UsRUFBViwyQkFFUSxFQUFSLGdDQUNRLElBQ0UsT0FBVix3Q0FDWSxFQUFaLGFBR0EsU0FDVSxRQUFWLE9BQ1UsS0FBViwrREFDVSxLQUFWLGdDQUdNLEtBQU4sZUFFSSxTQXJDSixTQXFDQSxHQUNNLE9BQU4scUJBQ1EsT0FBUixNQUNRLGFBQVIsU0FDQSxrQkFDUSxJQUFSLGlEQUNBLDhCQUNRLEVBQVIsT0FDUSxFQUFSLGdIQUNRLFNBQVIsb0JBQ1EsRUFBUixZQS9DSSxPQUFKLFdBa0RNLElBQU4sT0FDTSxJQUNFLE9BQVIsd0RBQ1UsRUFBVixhQUVBLFNBQ1EsUUFBUixPQUNRLEtBQVIsK0RBQ1EsS0FBUixrQ0FJRSxNQUFGLENBQ0ksS0FESixXQUVNLEtBQU4sV0FFSSxVQUpKLFNBSUEsR0FDQSxzQkVwTEEsU0FYZ0IsRSxRQUFBLEdBQ2QsR0NSVyxXQUFhLElBQUlyRCxFQUFJQyxLQUFTQyxFQUFHRixFQUFJRyxlQUFtQkMsRUFBR0osRUFBSUssTUFBTUQsSUFBSUYsRUFBRyxPQUFPRSxFQUFHLGNBQWMsQ0FBQ0UsWUFBWSxTQUFTLENBQUNGLEVBQUcsa0JBQWtCLENBQUNFLFlBQVksT0FBT1csTUFBTSxDQUFDLE1BQVEsU0FBUyxRQUFVLFVBQVVxQyxTQUFTLENBQUMsWUFBY3RELEVBQUltQyxHQUFHbkMsRUFBSXVELE9BQU9DLE9BQU9DLFFBQVUsRUFBSSxxQkFBdUIsZ0JBQWdCekQsRUFBSXlCLEdBQUcsS0FBTXpCLEVBQUkwRCxNQUFNakUsT0FBUyxFQUFHVyxFQUFHLE1BQU0sQ0FBQ0EsRUFBRyxjQUFjLENBQUNKLEVBQUl3QyxHQUFJeEMsRUFBUyxPQUFFLFNBQVMyRCxFQUFNQyxHQUFPLE9BQU94RCxFQUFHLFNBQVMsQ0FBQ3VDLElBQUlpQixFQUFNdEQsWUFBWSxPQUFPTyxZQUFZLENBQUMsU0FBVyxZQUFZSSxNQUFNLENBQUMsVUFBWSxNQUFNLENBQUNiLEVBQUcsTUFBTSxDQUFDRSxZQUFZLGNBQWNPLFlBQVksQ0FBQyxTQUFXLFdBQVcsTUFBUSxNQUFNLElBQU0sUUFBUSxZQUFZLFNBQVMsQ0FBQ1QsRUFBRyxRQUFRLENBQUNFLFlBQVksT0FBT1csTUFBTSxDQUFDLE1BQVEsTUFBTSxJQUFNLEdBQUcsTUFBUSxHQUFHLEtBQU8sSUFBSUMsR0FBRyxDQUFDLE1BQVEsU0FBU0MsR0FBUW5CLEVBQUk2RCxVQUFZRixFQUFNMUYsTUFBTSxDQUFDbUMsRUFBRyxTQUFTLENBQUNKLEVBQUl5QixHQUFHLGlCQUFpQixHQUFHekIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsUUFBUSxDQUFDYSxNQUFNLENBQUMsTUFBUSxRQUFRLElBQU0sR0FBRyxNQUFRLEdBQUcsS0FBTyxJQUFJQyxHQUFHLENBQUMsTUFBUSxTQUFTQyxHQUFRLE9BQU9uQixFQUFJOEQsU0FBU0gsRUFBTTFGLE9BQU8sQ0FBQ21DLEVBQUcsU0FBUyxDQUFDSixFQUFJeUIsR0FBRyxtQkFBbUIsSUFBSSxHQUFHekIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsS0FBSyxDQUFDUyxZQUFZLENBQUMsWUFBWSxRQUFRLENBQUNiLEVBQUl5QixHQUFHekIsRUFBSW1DLEdBQUd3QixFQUFNSSxlQUFjL0QsRUFBSXlCLEdBQUcsS0FBTXpCLEVBQUlnRSxFQUFJLEVBQUc1RCxFQUFHLE1BQU0sQ0FBQ0UsWUFBWSxxQkFBcUIsQ0FBQ0YsRUFBRyxlQUFlLENBQUNhLE1BQU0sQ0FBQyxPQUFTakIsRUFBSWdFLEVBQUUsZ0JBQWdCLEdBQUd0QyxNQUFNLENBQUNDLE1BQU8zQixFQUFRLEtBQUU0QixTQUFTLFNBQVVDLEdBQU03QixFQUFJaUUsS0FBS3BDLEdBQUtDLFdBQVcsV0FBVyxHQUFHOUIsRUFBSXdCLE1BQU0sSUFBSSxHQUFHcEIsRUFBRyxNQUFNLENBQUNBLEVBQUcsTUFBTSxDQUFDRSxZQUFZLG9CQUFvQixDQUFDTixFQUFJeUIsR0FBRyx1QkFBdUJ6QixFQUFJeUIsR0FBRyxLQUFLckIsRUFBRyxRQUFRLENBQUNFLFlBQVksV0FBV1csTUFBTSxDQUFDLE1BQVEsVUFBVSxJQUFNLEdBQUcsS0FBTyxJQUFJQyxHQUFHLENBQUMsTUFBUWxCLEVBQUlrRSxhQUFhLENBQUM5RCxFQUFHLFNBQVMsQ0FBQ0osRUFBSXlCLEdBQUcsb0JBQW9CLEdBQUd6QixFQUFJeUIsR0FBRyxLQUFNekIsRUFBUSxLQUFFSSxFQUFHLFdBQVcsQ0FBQ2EsTUFBTSxDQUFDLE1BQVFqQixFQUFJbUUsS0FBSyxXQUFhbkUsRUFBSStCLFNBQVNDLFdBQVdvQyxRQUFRbEQsR0FBRyxDQUFDLE1BQVFsQixFQUFJcUUsY0FBYyxDQUFDLENBQUNqRSxFQUFHLFNBQVMsQ0FBQ0EsRUFBRyxZQUFZLENBQUNFLFlBQVksNENBQTRDVyxNQUFNLENBQUMsVUFBWSxNQUFNLENBQUNiLEVBQUcsa0JBQWtCLENBQUNBLEVBQUcsT0FBTyxDQUFDRSxZQUFZLFlBQVksQ0FBQ04sRUFBSXlCLEdBQUcsc0JBQXNCekIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsWUFBWUosRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsa0JBQWtCLENBQUNBLEVBQUcsU0FBUyxDQUFDRSxZQUFZLGNBQWNXLE1BQU0sQ0FBQyxLQUFPLElBQUlDLEdBQUcsQ0FBQyxNQUFRbEIsRUFBSXFFLGNBQWMsQ0FBQ3JFLEVBQUl5QixHQUFHLFFBQVEsSUFBSSxHQUFHekIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsY0FBYyxDQUFDQSxFQUFHLGNBQWMsQ0FBQ0EsRUFBRyxRQUFRLENBQUNBLEVBQUcsY0FBYyxDQUFDSixFQUFJeUIsR0FBRyxpSEFBaUh6QixFQUFJeUIsR0FBRyxLQUFLckIsRUFBRyxTQUFTLENBQUNrRSxTQUFTLENBQUMsTUFBUSxTQUFTbkQsR0FBUSxPQUFJQSxFQUFPcEIsS0FBS3dFLFFBQVEsUUFBUXZFLEVBQUl3RSxHQUFHckQsRUFBT3NELFFBQVEsUUFBUSxHQUFHdEQsRUFBT3dCLElBQUksU0FBa0IsS0FBYzNDLEVBQUkwRSxPQUFPQyxNQUFNLEtBQU1DLGNBQWMsQ0FBQ3hFLEVBQUcsZUFBZSxDQUFDYSxNQUFNLENBQUMsTUFBUSw0QkFBNEIsaUJBQWlCakIsRUFBSTZFLFdBQVcsS0FBTyxRQUFRLEtBQU8sT0FBTyxTQUFXLElBQUluRCxNQUFNLENBQUNDLE1BQU8zQixFQUFJOEUsS0FBVSxNQUFFbEQsU0FBUyxTQUFVQyxHQUFNN0IsRUFBSStFLEtBQUsvRSxFQUFJOEUsS0FBTSxRQUFTakQsSUFBTUMsV0FBVyxnQkFBZ0I5QixFQUFJeUIsR0FBRyxLQUFLckIsRUFBRyxlQUFlLENBQUM0RSxJQUFJLFNBQVMvRCxNQUFNLENBQUMsS0FBTSxLQUFRakIsRUFBSXlCLEdBQUcsS0FBS3JCLEVBQUcsU0FBUyxDQUFDRSxZQUFZLHFDQUFxQ1csTUFBTSxDQUFDLEtBQU8sR0FBRyxPQUFTLE9BQU8sS0FBTyxLQUFLLENBQUNiLEVBQUcsUUFBUSxDQUFDYSxNQUFNLENBQUMsTUFBUSxPQUFPLFNBQTZCLElBQWxCakIsRUFBSThFLEtBQUtmLE9BQWE3QyxHQUFHLENBQUMsTUFBUWxCLEVBQUkwRSxTQUFTLENBQUMxRSxFQUFJeUIsR0FBRyxrR0FBa0csSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssR0FBR3pCLEVBQUl3QixNQUFNLEtBQzFsRyxJRFVwQixFQUNBLEtBQ0EsS0FDQSxNLHdCRVhGLElBQUl5RCxFQUFVLEVBQVEsTUFDbkJBLEVBQVFDLGFBQVlELEVBQVVBLEVBQVFFLFNBQ25CLGlCQUFaRixJQUFzQkEsRUFBVSxDQUFDLENBQUNqSCxFQUFPQyxHQUFJZ0gsRUFBUyxNQUM3REEsRUFBUUcsU0FBUXBILEVBQU9xSCxRQUFVSixFQUFRRyxTQUcvQkUsRUFESCxXQUNPLFdBQVlMLEdBQVMsRUFBTSxLLGVDTjVDLElBQUlBLEVBQVUsRUFBUSxNQUNuQkEsRUFBUUMsYUFBWUQsRUFBVUEsRUFBUUUsU0FDbkIsaUJBQVpGLElBQXNCQSxFQUFVLENBQUMsQ0FBQ2pILEVBQU9DLEdBQUlnSCxFQUFTLE1BQzdEQSxFQUFRRyxTQUFRcEgsRUFBT3FILFFBQVVKLEVBQVFHLFNBRy9CRSxFQURILFdBQ08sV0FBWUwsR0FBUyxFQUFNLEssZUNONUMsSUFBSUEsRUFBVSxFQUFRLE1BQ25CQSxFQUFRQyxhQUFZRCxFQUFVQSxFQUFRRSxTQUNuQixpQkFBWkYsSUFBc0JBLEVBQVUsQ0FBQyxDQUFDakgsRUFBT0MsR0FBSWdILEVBQVMsTUFDN0RBLEVBQVFHLFNBQVFwSCxFQUFPcUgsUUFBVUosRUFBUUcsU0FHL0JFLEVBREgsV0FDTyxXQUFZTCxHQUFTLEVBQU0sSyxlQ041QyxJQUFJQSxFQUFVLEVBQVEsTUFDbkJBLEVBQVFDLGFBQVlELEVBQVVBLEVBQVFFLFNBQ25CLGlCQUFaRixJQUFzQkEsRUFBVSxDQUFDLENBQUNqSCxFQUFPQyxHQUFJZ0gsRUFBUyxNQUM3REEsRUFBUUcsU0FBUXBILEVBQU9xSCxRQUFVSixFQUFRRyxTQUcvQkUsRUFESCxXQUNPLFdBQVlMLEdBQVMsRUFBTSxLLGVDTjVDLElBQUlBLEVBQVUsRUFBUSxNQUNuQkEsRUFBUUMsYUFBWUQsRUFBVUEsRUFBUUUsU0FDbkIsaUJBQVpGLElBQXNCQSxFQUFVLENBQUMsQ0FBQ2pILEVBQU9DLEdBQUlnSCxFQUFTLE1BQzdEQSxFQUFRRyxTQUFRcEgsRUFBT3FILFFBQVVKLEVBQVFHLFNBRy9CRSxFQURILFdBQ08sV0FBWUwsR0FBUyxFQUFNIiwiZmlsZSI6ImpzL2NodW5rcy84NTMzOTk4NmM1M2UxZTUxY2VlY2UwYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmRyb3AtYXJlYVtkYXRhLXYtZWU0ZmVkMGNdOm5vdCguZHJvcC1zbSl7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OjIwMHB4O2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IGRhc2hlZCAjYWZhZmFmO2JvcmRlci1yYWRpdXM6OHB4O292ZXJmbG93OmhpZGRlbn0jZHJvcC1hcmVhLmZvY3VzW2RhdGEtdi1lZTRmZWQwY117YmFja2dyb3VuZDojZjhmOGY4fS5ob3ZlcltkYXRhLXYtZWU0ZmVkMGNde2Rpc3BsYXk6bm9uZX0uZm9jdXMgLmhpZGVbZGF0YS12LWVlNGZlZDBjXXtkaXNwbGF5Om5vbmUhaW1wb3J0YW50fS5mb2N1cyAuaG92ZXJbZGF0YS12LWVlNGZlZDBjXXtkaXNwbGF5OmJsb2NrIWltcG9ydGFudH1wW2RhdGEtdi1lZTRmZWQwY117bWFyZ2luLXRvcDowfS5kcm9wLWFyZWE6bm90KC5kcm9wLXNtKSAuZHJvcC1mb3JtW2RhdGEtdi1lZTRmZWQwY117cG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6NTB9LmRyb3AtYnRuW2RhdGEtdi1lZTRmZWQwY117ZGlzcGxheTppbmxpbmUtYmxvY2s7Y3Vyc29yOnBvaW50ZXI7bWluLXdpZHRoOjE1MHB4O2JvcmRlci1yYWRpdXM6NHB4O2hlaWdodDozNXB4O3BhZGRpbmc6MTBweDtiYWNrZ3JvdW5kOiNmOGY4Zjg7Zm9udC13ZWlnaHQ6NDAwO2ZvbnQtc3R5bGU6bm9ybWFsO2xpbmUtaGVpZ2h0OjE3cHg7Zm9udC1zaXplOjE4cHg7bWFyZ2luLWJvdHRvbToxMHB4O3RleHQtYWxpZ246Y2VudGVyfS5kcm9wLXNtIC5kcm9wLWJ0bltkYXRhLXYtZWU0ZmVkMGNde21pbi13aWR0aDoxMDAlfSNmaWxlRWxlbVtkYXRhLXYtZWU0ZmVkMGNde2Rpc3BsYXk6bm9uZX0uZmlsZS1kZXNjW2RhdGEtdi1lZTRmZWQwY117Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNnB4O2xpbmUtaGVpZ2h0OjIycHg7Y29sb3I6IzRhNGE0YX0uZHJvcC1zbSAuZmlsZS1kZXNjW2RhdGEtdi1lZTRmZWQwY117ZGlzcGxheTpub25lfS5mb3JtYXQtZmlsZS1kZXNjW2RhdGEtdi1lZTRmZWQwY117Zm9udC1zdHlsZTpub3JtYWw7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjE5cHg7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6I2FmYWZhZn1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Ecm9wQXJlYS52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBMkRBLDBDQUNBLGlCQUFBLENBQ0EsVUFBQSxDQUNBLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0EsWUFBQSxDQUNBLGVBQUEsQ0FDQSx5QkFBQSxDQUNBLGlCQUFBLENBQ0EsZUFDQSxDQUVBLGtDQUNBLGtCQUNBLENBRUEsd0JBQ0EsWUFDQSxDQUVBLDhCQUNBLHNCQUNBLENBRUEsK0JBQ0EsdUJBQ0EsQ0FFQSxtQkFDQSxZQUNBLENBRUEscURBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxzQkFBQSxDQUNBLGtCQUFBLENBQ0EsVUFBQSxDQUNBLFdBQUEsQ0FDQSxVQUNBLENBR0EsMkJBQ0Esb0JBQUEsQ0FDQSxjQUFBLENBQ0EsZUFBQSxDQUNBLGlCQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLGVBQUEsQ0FDQSxpQkFBQSxDQUNBLGdCQUFBLENBQ0EsY0FBQSxDQUNBLGtCQUFBLENBQ0EsaUJBQ0EsQ0FDQSxvQ0FDQSxjQUNBLENBRUEsMkJBQ0EsWUFDQSxDQUVBLDRCQUVBLGlCQUFBLENBQ0EsZUFBQSxDQUNBLGNBQUEsQ0FDQSxnQkFBQSxDQUNBLGFBQ0EsQ0FFQSxxQ0FDQSxZQUNBLENBQ0EsbUNBQ0EsaUJBQUEsQ0FDQSxlQUFBLENBQ0EsY0FBQSxDQUNBLGdCQUFBLENBQ0EsaUJBQUEsQ0FDQSxhQUNBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gICAgPGRpdiBpZD1cXFwiZHJvcC1hcmVhXFxcIiBjbGFzcz1cXFwiZHJvcC1hcmVhXFxcIiA6Y2xhc3M9XFxcIiR2dWV0aWZ5LmJyZWFrcG9pbnQuc21BbmREb3duID8gWydkcm9wLXNtJ10gOiBbXVxcXCI+XFxyXFxuICAgICAgICA8Zm9ybSBjbGFzcz1cXFwiZHJvcC1mb3JtXFxcIj5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwiZmlsZVxcXCIgaWQ9XFxcImZpbGVFbGVtXFxcIiBtdWx0aXBsZSBhY2NlcHQ9XFxcImltYWdlLypcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9XFxcIihlKSA9PiAkZW1pdCgnY2hhbmdlJywgZSlcXFwiIGNsYXNzPVxcXCJoaWRlXFxcIj5cXHJcXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XFxcImRyb3AtYnRuXFxcIiBmb3I9XFxcImZpbGVFbGVtXFxcIj57eyF5ZXQgPyAn0JfQsNCz0YDRg9C30LjRgtGMINGE0L7RgtC+JyA6ICfQl9Cw0LPRgNGD0LfQuNGC0Ywg0LXRidC1J319PC9sYWJlbD5cXHJcXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiZm9ybWF0LWZpbGUtZGVzY1xcXCI+0KTQvtGA0LzQsNGCIOKAkyBqcGcsIHBuZzwvcD5cXHJcXG4gICAgICAgICAgICA8cCBjbGFzcz1cXFwiZmlsZS1kZXNjIGhvdmVyXFxcIj7QntGC0L/Rg9GB0YLQuNGC0LUg0YTQvtGC0L7Qs9GA0LDRhNC40Y4g0YHRjtC00LA8L3A+XFxyXFxuICAgICAgICA8L2Zvcm0+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuXFxyXFxuPHNjcmlwdD5cXHJcXG4gICAgZXhwb3J0IGRlZmF1bHQge1xcclxcbiAgICAgICAgbmFtZTogXFxcIkRyb3BBcmVhXFxcIixcXHJcXG4gICAgICAgIGRhdGE6ICh2bSkgPT4gKHt2bX0pLFxcclxcbiAgICAgICAgcHJvcHM6IFsneWV0J10sXFxyXFxuICAgICAgICBtb3VudGVkKHZtKSB7XFxyXFxuICAgICAgICAgICAgbGV0IGRyb3BBcmVhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ryb3AtYXJlYScpO1xcclxcbiAgICAgICAgICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSlcXHJcXG4gICAgICAgICAgICB9KVxcclxcblxcclxcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0cyhlKSB7XFxyXFxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxcclxcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpXFxyXFxuICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xcclxcbiAgICAgICAgICAgICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm9jdXMsIGZhbHNlKVxcclxcbiAgICAgICAgICAgIH0pO1xcclxcbiAgICAgICAgICAgIFsnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmZvY3VzLCBmYWxzZSlcXHJcXG4gICAgICAgICAgICB9KTtcXHJcXG5cXHJcXG4gICAgICAgICAgICBmdW5jdGlvbiBmb2N1cyhlKSB7XFxyXFxuICAgICAgICAgICAgICAgIGRyb3BBcmVhLmNsYXNzTGlzdC5hZGQoJ2ZvY3VzJylcXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgZnVuY3Rpb24gdW5mb2N1cyhlKSB7XFxyXFxuICAgICAgICAgICAgICAgIGRyb3BBcmVhLmNsYXNzTGlzdC5yZW1vdmUoJ2ZvY3VzJylcXHJcXG4gICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgY29uc3QgaGFuZGxlRHJvcCA9IChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIGxldCBkdCA9IGUuZGF0YVRyYW5zZmVyXFxyXFxuICAgICAgICAgICAgICAgIGxldCBmaWxlcyA9IGR0LmZpbGVzXFxyXFxuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRmlsZXMoZmlsZXMpXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wLCBmYWxzZSk7XFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgbWV0aG9kczoge1xcclxcbiAgICAgICAgICAgIGhhbmRsZUZpbGVzKGZpbGVzKSB7XFxyXFxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHt0YXJnZXQ6e2ZpbGVzfX0pO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbjwvc2NyaXB0PlxcclxcblxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuICAgIC5kcm9wLWFyZWE6bm90KC5kcm9wLXNtKSB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBoZWlnaHQ6IDIwMHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogI0ZGRkZGRjtcXHJcXG4gICAgICAgIGJvcmRlcjogMXB4IGRhc2hlZCAjQUZBRkFGO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAjZHJvcC1hcmVhLmZvY3VzIHtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6ICNGOEY4Rjg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmhvdmVyIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmZvY3VzIC5oaWRlIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZm9jdXMgLmhvdmVyIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgcCB7XFxyXFxuICAgICAgICBtYXJnaW4tdG9wOiAwO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kcm9wLWFyZWE6bm90KC5kcm9wLXNtKSAuZHJvcC1mb3JtIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICB6LWluZGV4OiA1MDtcXHJcXG4gICAgfVxcclxcblxcclxcblxcclxcbiAgICAuZHJvcC1idG4ge1xcclxcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICAgICAgbWluLXdpZHRoOiAxNTBweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcXHJcXG4gICAgICAgIGhlaWdodDogMzVweDtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiAjRjhGOEY4O1xcclxcbiAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcXHJcXG4gICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcXHJcXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAxN3B4O1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxOHB4O1xcclxcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXHJcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcbiAgICAuZHJvcC1zbSAuZHJvcC1idG57XFxyXFxuICAgICAgICBtaW4td2lkdGg6IDEwMCU7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgI2ZpbGVFbGVtIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmZpbGUtZGVzYyB7XFxyXFxuXFxyXFxuICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIycHg7XFxyXFxuICAgICAgICBjb2xvcjogIzRBNEE0QTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZHJvcC1zbSAuZmlsZS1kZXNjIHtcXHJcXG4gICAgICAgIGRpc3BsYXk6IG5vbmVcXHJcXG4gICAgfVxcclxcbiAgICAuZm9ybWF0LWZpbGUtZGVzYyB7XFxyXFxuICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XFxyXFxuICAgICAgICBmb250LXdlaWdodDogNTAwO1xcclxcbiAgICAgICAgZm9udC1zaXplOiAxNHB4O1xcclxcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE5cHg7XFxyXFxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgICAgICBjb2xvcjogI0FGQUZBRjtcXHJcXG4gICAgfVxcclxcbjwvc3R5bGU+XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNpdGUtcGhvdG8tY2FyZFtkYXRhLXYtNTAzZjJhZmJde3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7YmFja2dyb3VuZDojZmZmO2JvcmRlci1yYWRpdXM6OHB4O292ZXJmbG93OmhpZGRlbn0uc2l0ZS1waG90by1jYXJkLmZpbGxlZFtkYXRhLXYtNTAzZjJhZmJde2JhY2tncm91bmQtY29sb3I6I2Y4ZjhmOH0uc2l0ZS1waG90by1jYXJkLmZvY3VzZWRbZGF0YS12LTUwM2YyYWZiXSwuc2l0ZS1waG90by1jYXJkW2RhdGEtdi01MDNmMmFmYl06aG92ZXJ7Ym94LXNoYWRvdzowIDAgOXB4IGhzbGEoMCwwJSw1NC45JSwuNDkpO2JvcmRlci1yYWRpdXM6OHB4fS5zaXRlLXBob3RvLWNhcmRbZGF0YS12LTUwM2YyYWZiXTphZnRlcntjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7cGFkZGluZy1ib3R0b206NTYlfS5zaXRlLXBob3RvLWNhcmQtYWN0aW9uc1tkYXRhLXYtNTAzZjJhZmJde3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OjA7Y3Vyc29yOnBvaW50ZXJ9LnNpdGUtcGhvdG8tY2FyZC1jb250ZW50W2RhdGEtdi01MDNmMmFmYl17cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Y3Vyc29yOnBvaW50ZXJ9LmVkaXQtcGhvdG8taWNvbltkYXRhLXYtNTAzZjJhZmJde21hcmdpbi1sZWZ0OjhweH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9FZGl0UGhvdG9DYXJkLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFvSkEsa0NBQ0EsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsZUFBQSxDQUdBLGlCQUFBLENBQ0EsZUFDQSxDQUVBLHlDQUNBLHdCQUNBLENBRUEsa0ZBQ0EsdUNBQUEsQ0FDQSxpQkFDQSxDQUVBLHdDQUNBLFVBQUEsQ0FDQSxhQUFBLENBQ0Esa0JBQ0EsQ0FFQSwwQ0FDQSxpQkFBQSxDQUNBLE9BQUEsQ0FDQSxjQUNBLENBRUEsMENBQ0EsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLHFCQUFBLENBQ0EsY0FDQSxDQUVBLGtDQUNBLGVBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJzaXRlLXBob3RvLWNhcmRcXFwiXFxyXFxuICAgICAgICAgOmNsYXNzPVxcXCJ7Zm9jdXNlZDogZm9jdXMsIGZpbGxlZH1cXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2l0ZS1waG90by1jYXJkLWNvbnRlbnRcXFwiIHN0eWxlPVxcXCJ6LWluZGV4OiAxO1xcXCI+XFxyXFxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cXFwiZGVmYXVsdFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDx2LWltZyB2LWlmPVxcXCJsb2FkZWQgJiYgc3JjXFxcIiA6c3JjPVxcXCJzcmNcXFwiIGNvdmVyXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ9XFxcIjEwMCVcXFwiIEBjbGljaz1cXFwiJGVtaXQoJ2NsaWNrJywgJGF0dHJzWyd2YWx1ZSddKTsgb3Blbj10cnVlXFxcIi8+XFxyXFxuICAgICAgICAgICAgICAgIDx2LXJvdyB2LWVsc2UtaWY9XFxcIiFsb2FkZWQgJiYgIWVycm9yXFxcIiB4cz1cXFwiMTJcXFwiIGNsYXNzPVxcXCJwYS04XFxcIiBzdHlsZT1cXFwiYWxpZ24taXRlbXM6IGNlbnRlclxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8cHJvZ3Jlc3MtYmFyIDpwcm9ncmVzcz1cXFwicHJvZ3Jlc3NcXFwiLz5cXHJcXG4gICAgICAgICAgICAgICAgPC92LXJvdz5cXHJcXG4gICAgICAgICAgICA8L3Nsb3Q+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNpdGUtcGhvdG8tY2FyZC1hY3Rpb25zXFxcIiBzdHlsZT1cXFwiei1pbmRleDogMjtcXFwiPlxcclxcbiAgICAgICAgICAgIDxzbG90IG5hbWU9XFxcImFjdGlvbnNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICA8di1yb3cgeHM9XFxcIjEyXFxcIiBjbGFzcz1cXFwicGwtNSBwci01IHB0LTIganVzdGlmeS1lbmRcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPHYtYnRuIGZhYlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVxcXCIkZW1pdCgnZGVsZXRlJylcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcIm1yLTNcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LWljb24+bWRpLWRlbGV0ZTwvdi1pY29uPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj5cXHJcXG4gICAgICAgICAgICAgICAgPC92LXJvdz5cXHJcXG4gICAgICAgICAgICA8L3Nsb3Q+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPVxcXCJvcGVuXFxcIiB2LWlmPVxcXCJvcGVuXFxcIiBjb250ZW50LWNsYXNzPVxcXCJzbS1waG90by1kaWFsb2dcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgOmZ1bGxzY3JlZW49XFxcInRydWVcXFwiPlxcclxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImRpYWxvZy1pbWFnZVxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDx2LWltZyB2LWlmPVxcXCJsb2FkZWQgJiYgc3JjXFxcIiA6c3JjPVxcXCJzcmNcXFwiIG1heC1oZWlnaHQ9XFxcIjkwdmhcXFwiIGNvbnRhaW4vPlxcclxcbiAgICAgICAgICAgICAgICA8di1idG4gaWNvbiBAY2xpY2s9XFxcIiRlbWl0KCdmb2N1c091dCcpOyBvcGVuPWZhbHNlO1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgIGNvbG9yPVxcXCJncmF5XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XFxcImNsb3NlLWJ0blxcXCIgPjx2LWljb24+bWRpLWNsb3NlPC92LWljb24+PC92LWJ0bj5cXHJcXG4gICAgICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDwvdi1kaWFsb2c+XFxyXFxuICAgIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuXFxyXFxuPHNjcmlwdD5cXHJcXG4gICAgaW1wb3J0IHtiNjRUb0Jsb2IsIGNvbXByZXNzfSBmcm9tIFxcXCIuLi8uLi9pbWFnZVxcXCI7XFxyXFxuICAgIGltcG9ydCBQcm9ncmVzc0JhciBmcm9tIFxcXCIuL1Byb2dyZXNzQmFyXFxcIjtcXHJcXG5cXHJcXG4gICAgZXhwb3J0IGRlZmF1bHQge1xcclxcbiAgICAgICAgbmFtZTogXFxcIkVkaXRQaG90b0NhcmRcXFwiLFxcclxcbiAgICAgICAgY29tcG9uZW50czoge1Byb2dyZXNzQmFyfSxcXHJcXG4gICAgICAgIHByb3BzOiB7XFxyXFxuICAgICAgICAgICAgZm9jdXM6IHt0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSx9LFxcclxcbiAgICAgICAgICAgIHByZWxvYWQ6IHt0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiB0cnVlLH0sXFxyXFxuICAgICAgICAgICAgY292ZXI6IHt0eXBlOiBTdHJpbmcsIGRlZmF1bHQ6IFxcXCJcXFwifSxcXHJcXG4gICAgICAgICAgICBmaWxsZWQ6IHt0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZX0sXFxyXFxuICAgICAgICAgICAgZmlsZToge3R5cGU6IEZpbGUgfCBTdHJpbmd9XFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgZGF0YTogKHZtKSA9PiAoe1xcclxcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxcclxcbiAgICAgICAgICAgIGZvY3VzZWQ6ICEhdm0uJGF0dHJzWydmb2N1cyddLFxcclxcbiAgICAgICAgICAgIHNyYzogJycsXFxyXFxuICAgICAgICAgICAgbG9hZGVkOiBmYWxzZSxcXHJcXG4gICAgICAgICAgICBlcnJvcjogZmFsc2UsXFxyXFxuICAgICAgICAgICAgcHJvZ3Jlc3M6IDAsXFxyXFxuICAgICAgICAgICAgcm90YXRlVGltZW91dDogbnVsbCxcXHJcXG4gICAgICAgIH0pLFxcclxcbiAgICAgICAgbW91bnRlZCgpIHtcXHJcXG4gICAgICAgICAgICB0aGlzLnVwbG9hZCh0aGlzLmZpbGUpXFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgY29tcHV0ZWQ6IHtcXHJcXG4gICAgICAgICAgICBpc0NvdmVyKCkge1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb3ZlciAmJiB0aGlzLnNyYy5pbmRleE9mKHRoaXMuY292ZXIpICE9PSAtMVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBtZXRob2RzOiB7XFxyXFxuICAgICAgICAgICAgcm90YXRlKCkge1xcclxcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3RhdGVUaW1lb3V0KSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yb3RhdGVUaW1lb3V0KTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm90YXRlVGltZW91dCA9IG51bGw7XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGVUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQgaW1nID0gbmV3IEltYWdlKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBcXFwiYW5vbnltb3VzXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29tcHJlc3NVcmwgPSBjb21wcmVzcyhpbWcsIChjdHgsIGNhbnZhcykgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJvdGF0ZSg5MCAqIE1hdGguUEkgLyAxODApO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKGltZywgLWltZy53aWR0aCAvIDIsIC1pbWcud2lkdGggLyAyKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmxvYiA9IGI2NFRvQmxvYihjb21wcmVzc1VybC5zcGxpdCgnLCcpWzFdLCAnaW1hZ2UvanBlZycpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKGJsb2IsIHRoaXMuc3JjLnNwbGl0KCcvJykucmV2ZXJzZSgpWzBdKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH07XFxyXFxuICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gdGhpcy5zcmM7XFxyXFxuICAgICAgICAgICAgICAgIH0sIDEwMDApXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICByZWFkTG9jYWxTcmMoZmlsZSkge1xcclxcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlIGluc3RhbmNlb2YgQmxvYikge1xcclxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zcmMgPSByZWFkZXIucmVzdWx0O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuc3JjKVxcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB9IGVsc2UgdGhpcy5zcmMgPSBmaWxlO1xcclxcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICB1cGxvYWQoZmlsZSwgY2FudmFzRmlsZU5hbWUpIHtcXHJcXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnByZWxvYWQgfHwgIShmaWxlIGluc3RhbmNlb2YgQmxvYikpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZExvY2FsU3JjKGZpbGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcclxcbiAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxcclxcbiAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xcclxcbiAgICAgICAgICAgICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKVxcclxcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBjYW52YXNGaWxlTmFtZSB8fCBmaWxlLm5hbWUpXFxyXFxuICAgICAgICAgICAgICAgIHhoci5vcGVuKCdQT1NUJywgJy9waG90by91cGxvYWQnLCB0cnVlKVxcclxcbiAgICAgICAgICAgICAgICB4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXFxcInByb2dyZXNzXFxcIiwgKGUpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3MgPSAoZS5sb2FkZWQgKiAxMDAuMCAvIGUudG90YWwpIHx8IDEwMDtcXHJcXG4gICAgICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgICAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3JlYWR5c3RhdGVjaGFuZ2UnLCAoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQgJiYgeGhyLnN0YXR1cyA9PSAyMDApIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IGUudGFyZ2V0LnJlc3BvbnNlLnVybDtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCBlLnRhcmdldC5yZXNwb25zZS51cmwpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHIuc3RhdHVzICE9IDIwMCkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09IDQwMCAmJiAhY2FudmFzRmlsZU5hbWUpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/QlNC70Y8g0YTQsNC50LvQvtCyINGBINCx0LjRgtGL0Lwg0LzQsNC50LzRgtC40L/QvtC8INGA0LjRgdGD0LXQvCDQvdCwINC60LDQvdCy0LUg0Lgg0L7RgtC/0YDQsNCy0LvRj9C10Lwg0YDQtdC30YPQu9GM0YLQsNGCXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb21wcmVzc1VybCA9IGNvbXByZXNzKGltZyk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmxvYiA9IGI2NFRvQmxvYihjb21wcmVzc1VybC5zcGxpdCgnLCcpWzFdLCAnaW1hZ2UvanBlZycpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWQoYmxvYiwgZmlsZS5uYW1lKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTG9jYWxTcmMoZmlsZSlcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gdGhpcy5sb2FkZWQgPSB0cnVlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcblxcclxcbiAgICAgICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgICAgICB4aHIuc2VuZChmb3JtRGF0YSlcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgd2F0Y2g6IHtcXHJcXG4gICAgICAgICAgICBmaWxlKG52KSB7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbnYgPT09ICdzdHJpbmcnKSB0aGlzLnNyYyA9IG52O1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbjwvc2NyaXB0PlxcclxcblxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuICAgIC5zaXRlLXBob3RvLWNhcmQge1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiAjRkZGRkZGO1xcclxcbiAgICAgICAgLyogR3JleSA4MDAgKi9cXHJcXG5cXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNpdGUtcGhvdG8tY2FyZC5maWxsZWQge1xcclxcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0Y4RjhGODtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc2l0ZS1waG90by1jYXJkLmZvY3VzZWQsIC5zaXRlLXBob3RvLWNhcmQ6aG92ZXIge1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogMHB4IDBweCA5cHggcmdiYSgxNDAsIDE0MCwgMTQwLCAwLjQ5KTtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc2l0ZS1waG90by1jYXJkOmFmdGVyIHtcXHJcXG4gICAgICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XFxyXFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogNTYlOyAvKiAxNi85ICovXFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNpdGUtcGhvdG8tY2FyZC1hY3Rpb25zIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHJpZ2h0OiAwO1xcclxcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zaXRlLXBob3RvLWNhcmQtY29udGVudCB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGhlaWdodDogMTAwJTtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLmVkaXQtcGhvdG8taWNvbiB7XFxyXFxuICAgICAgICBtYXJnaW4tbGVmdDogOHB4O1xcclxcbiAgICB9XFxyXFxuPC9zdHlsZT5cXHJcXG48c3R5bGU+XFxyXFxuXFxyXFxuICAgIC5zbS1waG90by1kaWFsb2cgLnBob3RvLWNvdmVyIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHRvcDogMzJweDtcXHJcXG4gICAgICAgIGxlZnQ6IDMycHg7XFxyXFxuICAgICAgICB6LWluZGV4OiAxMDE7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNtLXBob3RvLWRpYWxvZyAuY2xvc2UtYnRuIHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHRvcDogMzJweDtcXHJcXG4gICAgICAgIHJpZ2h0OiAzMnB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zbS1waG90by1kaWFsb2cgLmJvdHRvbSB7XFxyXFxuICAgICAgICByaWdodDogMzJweDtcXHJcXG4gICAgICAgIGJvdHRvbTogMzJweDtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcXHJcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zbS1waG90by1kaWFsb2cge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgei1pbmRleDogMTAwO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMTA1LCAxMDksIDExNiwgMC42KTtcXHJcXG4gICAgICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcXHJcXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZGlhbG9nLWltYWdlIC52LWltYWdle1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICB9XFxyXFxuICAgIC5kaWFsb2ctaW1hZ2Uge1xcclxcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcclxcbiAgICAgICAgaGVpZ2h0OiBmaXQtY29udGVudDtcXHJcXG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDE2cHg7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xcclxcbiAgICB9XFxyXFxuPC9zdHlsZT5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuc20tcGhvdG8tZGlhbG9nIC5waG90by1jb3Zlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MzJweDtsZWZ0OjMycHg7ei1pbmRleDoxMDF9LnNtLXBob3RvLWRpYWxvZyAuY2xvc2UtYnRue3Bvc2l0aW9uOmFic29sdXRlO3RvcDozMnB4O3JpZ2h0OjMycHh9LnNtLXBob3RvLWRpYWxvZyAuYm90dG9te3JpZ2h0OjMycHg7Ym90dG9tOjMycHg7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6LXdlYmtpdC1maXQtY29udGVudDt3aWR0aDotbW96LWZpdC1jb250ZW50O3dpZHRoOmZpdC1jb250ZW50O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3d9LnNtLXBob3RvLWRpYWxvZ3twb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwMDtkaXNwbGF5OmZsZXg7Ym94LXNoYWRvdzpub25lIWltcG9ydGFudDtiYWNrZ3JvdW5kOnJnYmEoMTA1LDEwOSwxMTYsLjYpOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOmJsdXIoMTBweCk7YmFja2Ryb3AtZmlsdGVyOmJsdXIoMTBweCk7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmRpYWxvZy1pbWFnZSwuZGlhbG9nLWltYWdlIC52LWltYWdle2JvcmRlci1yYWRpdXM6OHB4fS5kaWFsb2ctaW1hZ2V7d2lkdGg6LXdlYmtpdC1maXQtY29udGVudDt3aWR0aDotbW96LWZpdC1jb250ZW50O3dpZHRoOmZpdC1jb250ZW50O2hlaWdodDotd2Via2l0LWZpdC1jb250ZW50O2hlaWdodDotbW96LWZpdC1jb250ZW50O2hlaWdodDpmaXQtY29udGVudDttYXgtd2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjE2cHg7b3ZlcmZsb3c6aGlkZGVufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL0VkaXRQaG90b0NhcmQudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQW1NQSw4QkFDQSxpQkFBQSxDQUNBLFFBQUEsQ0FDQSxTQUFBLENBQ0EsV0FDQSxDQUVBLDRCQUNBLGlCQUFBLENBQ0EsUUFBQSxDQUNBLFVBQ0EsQ0FFQSx5QkFDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLGlCQUFBLENBQ0EseUJBQUEsQ0FBQSxzQkFBQSxDQUFBLGlCQUFBLENBQ0EsWUFBQSxDQUNBLGtCQUNBLENBRUEsaUJBQ0EsaUJBQUEsQ0FDQSxXQUFBLENBQ0EsWUFBQSxDQUNBLHlCQUFBLENBQ0EsK0JBQUEsQ0FDQSxrQ0FBQSxDQUFBLDBCQUFBLENBQ0Esa0JBQUEsQ0FDQSxzQkFDQSxDQUtBLHFDQUZBLGlCQVVBLENBUkEsY0FDQSx5QkFBQSxDQUFBLHNCQUFBLENBQUEsaUJBQUEsQ0FDQSwwQkFBQSxDQUFBLHVCQUFBLENBQUEsa0JBQUEsQ0FDQSxjQUFBLENBQ0EsaUJBQUEsQ0FDQSxZQUFBLENBRUEsZUFDQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcInNpdGUtcGhvdG8tY2FyZFxcXCJcXHJcXG4gICAgICAgICA6Y2xhc3M9XFxcIntmb2N1c2VkOiBmb2N1cywgZmlsbGVkfVxcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzaXRlLXBob3RvLWNhcmQtY29udGVudFxcXCIgc3R5bGU9XFxcInotaW5kZXg6IDE7XFxcIj5cXHJcXG4gICAgICAgICAgICA8c2xvdCBuYW1lPVxcXCJkZWZhdWx0XFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHYtaW1nIHYtaWY9XFxcImxvYWRlZCAmJiBzcmNcXFwiIDpzcmM9XFxcInNyY1xcXCIgY292ZXJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cXFwiMTAwJVxcXCIgQGNsaWNrPVxcXCIkZW1pdCgnY2xpY2snLCAkYXR0cnNbJ3ZhbHVlJ10pOyBvcGVuPXRydWVcXFwiLz5cXHJcXG4gICAgICAgICAgICAgICAgPHYtcm93IHYtZWxzZS1pZj1cXFwiIWxvYWRlZCAmJiAhZXJyb3JcXFwiIHhzPVxcXCIxMlxcXCIgY2xhc3M9XFxcInBhLThcXFwiIHN0eWxlPVxcXCJhbGlnbi1pdGVtczogY2VudGVyXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDxwcm9ncmVzcy1iYXIgOnByb2dyZXNzPVxcXCJwcm9ncmVzc1xcXCIvPlxcclxcbiAgICAgICAgICAgICAgICA8L3Ytcm93PlxcclxcbiAgICAgICAgICAgIDwvc2xvdD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2l0ZS1waG90by1jYXJkLWFjdGlvbnNcXFwiIHN0eWxlPVxcXCJ6LWluZGV4OiAyO1xcXCI+XFxyXFxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cXFwiYWN0aW9uc1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDx2LXJvdyB4cz1cXFwiMTJcXFwiIGNsYXNzPVxcXCJwbC01IHByLTUgcHQtMiBqdXN0aWZ5LWVuZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8di1idG4gZmFiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XFxcIiRlbWl0KCdkZWxldGUnKVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwibXItM1xcXCI+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZGVsZXRlPC92LWljb24+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPlxcclxcbiAgICAgICAgICAgICAgICA8L3Ytcm93PlxcclxcbiAgICAgICAgICAgIDwvc2xvdD5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPHYtZGlhbG9nIHYtbW9kZWw9XFxcIm9wZW5cXFwiIHYtaWY9XFxcIm9wZW5cXFwiIGNvbnRlbnQtY2xhc3M9XFxcInNtLXBob3RvLWRpYWxvZ1xcXCJcXHJcXG4gICAgICAgICAgICAgICAgICA6ZnVsbHNjcmVlbj1cXFwidHJ1ZVxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZGlhbG9nLWltYWdlXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPHYtaW1nIHYtaWY9XFxcImxvYWRlZCAmJiBzcmNcXFwiIDpzcmM9XFxcInNyY1xcXCIgbWF4LWhlaWdodD1cXFwiOTB2aFxcXCIgY29udGFpbi8+XFxyXFxuICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uIEBjbGljaz1cXFwiJGVtaXQoJ2ZvY3VzT3V0Jyk7IG9wZW49ZmFsc2U7XFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XFxcImdyYXlcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cXFwiY2xvc2UtYnRuXFxcIiA+PHYtaWNvbj5tZGktY2xvc2U8L3YtaWNvbj48L3YtYnRuPlxcclxcbiAgICAgICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPC92LWRpYWxvZz5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbiAgICBpbXBvcnQge2I2NFRvQmxvYiwgY29tcHJlc3N9IGZyb20gXFxcIi4uLy4uL2ltYWdlXFxcIjtcXHJcXG4gICAgaW1wb3J0IFByb2dyZXNzQmFyIGZyb20gXFxcIi4vUHJvZ3Jlc3NCYXJcXFwiO1xcclxcblxcclxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxyXFxuICAgICAgICBuYW1lOiBcXFwiRWRpdFBob3RvQ2FyZFxcXCIsXFxyXFxuICAgICAgICBjb21wb25lbnRzOiB7UHJvZ3Jlc3NCYXJ9LFxcclxcbiAgICAgICAgcHJvcHM6IHtcXHJcXG4gICAgICAgICAgICBmb2N1czoge3R5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlLH0sXFxyXFxuICAgICAgICAgICAgcHJlbG9hZDoge3R5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IHRydWUsfSxcXHJcXG4gICAgICAgICAgICBjb3Zlcjoge3R5cGU6IFN0cmluZywgZGVmYXVsdDogXFxcIlxcXCJ9LFxcclxcbiAgICAgICAgICAgIGZpbGxlZDoge3R5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlfSxcXHJcXG4gICAgICAgICAgICBmaWxlOiB7dHlwZTogRmlsZSB8IFN0cmluZ31cXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBkYXRhOiAodm0pID0+ICh7XFxyXFxuICAgICAgICAgICAgb3BlbjogZmFsc2UsXFxyXFxuICAgICAgICAgICAgZm9jdXNlZDogISF2bS4kYXR0cnNbJ2ZvY3VzJ10sXFxyXFxuICAgICAgICAgICAgc3JjOiAnJyxcXHJcXG4gICAgICAgICAgICBsb2FkZWQ6IGZhbHNlLFxcclxcbiAgICAgICAgICAgIGVycm9yOiBmYWxzZSxcXHJcXG4gICAgICAgICAgICBwcm9ncmVzczogMCxcXHJcXG4gICAgICAgICAgICByb3RhdGVUaW1lb3V0OiBudWxsLFxcclxcbiAgICAgICAgfSksXFxyXFxuICAgICAgICBtb3VudGVkKCkge1xcclxcbiAgICAgICAgICAgIHRoaXMudXBsb2FkKHRoaXMuZmlsZSlcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBjb21wdXRlZDoge1xcclxcbiAgICAgICAgICAgIGlzQ292ZXIoKSB7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvdmVyICYmIHRoaXMuc3JjLmluZGV4T2YodGhpcy5jb3ZlcikgIT09IC0xXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIG1ldGhvZHM6IHtcXHJcXG4gICAgICAgICAgICByb3RhdGUoKSB7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvdGF0ZVRpbWVvdXQpIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJvdGF0ZVRpbWVvdXQpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3RhdGVUaW1lb3V0ID0gbnVsbDtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICB0aGlzLnJvdGF0ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGltZy5jcm9zc09yaWdpbiA9IFxcXCJhbm9ueW1vdXNcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb21wcmVzc1VybCA9IGNvbXByZXNzKGltZywgKGN0eCwgY2FudmFzKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoY2FudmFzLndpZHRoIC8gMiwgY2FudmFzLmhlaWdodCAvIDIpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucm90YXRlKDkwICogTWF0aC5QSSAvIDE4MCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAtaW1nLndpZHRoIC8gMiwgLWltZy53aWR0aCAvIDIpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibG9iID0gYjY0VG9CbG9iKGNvbXByZXNzVXJsLnNwbGl0KCcsJylbMV0sICdpbWFnZS9qcGVnJyk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWQoYmxvYiwgdGhpcy5zcmMuc3BsaXQoJy8nKS5yZXZlcnNlKClbMF0pO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSB0aGlzLnNyYztcXHJcXG4gICAgICAgICAgICAgICAgfSwgMTAwMClcXHJcXG4gICAgICAgICAgICB9LFxcclxcbiAgICAgICAgICAgIHJlYWRMb2NhbFNyYyhmaWxlKSB7XFxyXFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbGUgaW5zdGFuY2VvZiBCbG9iKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IHJlYWRlci5yZXN1bHQ7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5zcmMpXFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLnNyYyA9IGZpbGU7XFxyXFxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcXHJcXG4gICAgICAgICAgICB9LFxcclxcbiAgICAgICAgICAgIHVwbG9hZChmaWxlLCBjYW52YXNGaWxlTmFtZSkge1xcclxcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJlbG9hZCB8fCAhKGZpbGUgaW5zdGFuY2VvZiBCbG9iKSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTG9jYWxTcmMoZmlsZSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXFxyXFxuICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XFxyXFxuICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXFxyXFxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUsIGNhbnZhc0ZpbGVOYW1lIHx8IGZpbGUubmFtZSlcXHJcXG4gICAgICAgICAgICAgICAgeGhyLm9wZW4oJ1BPU1QnLCAnL3Bob3RvL3VwbG9hZCcsIHRydWUpXFxyXFxuICAgICAgICAgICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcXFwicHJvZ3Jlc3NcXFwiLCAoZSkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IChlLmxvYWRlZCAqIDEwMC4wIC8gZS50b3RhbCkgfHwgMTAwO1xcclxcbiAgICAgICAgICAgICAgICB9KVxcclxcbiAgICAgICAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIChlKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHIuc3RhdHVzID09IDIwMCkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3JjID0gZS50YXJnZXQucmVzcG9uc2UudXJsO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIGUudGFyZ2V0LnJlc3BvbnNlLnVybCk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4aHIucmVhZHlTdGF0ZSA9PSA0ICYmIHhoci5zdGF0dXMgIT0gMjAwKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT0gNDAwICYmICFjYW52YXNGaWxlTmFtZSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL9CU0LvRjyDRhNCw0LnQu9C+0LIg0YEg0LHQuNGC0YvQvCDQvNCw0LnQvNGC0LjQv9C+0Lwg0YDQuNGB0YPQtdC8INC90LAg0LrQsNC90LLQtSDQuCDQvtGC0L/RgNCw0LLQu9GP0LXQvCDRgNC10LfRg9C70YzRgtCw0YJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSgpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gKCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXByZXNzVXJsID0gY29tcHJlc3MoaW1nKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibG9iID0gYjY0VG9CbG9iKGNvbXByZXNzVXJsLnNwbGl0KCcsJylbMV0sICdpbWFnZS9qcGVnJyk7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZChibG9iLCBmaWxlLm5hbWUpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlYWRMb2NhbFNyYyhmaWxlKVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSB0aGlzLmxvYWRlZCA9IHRydWU7XFxyXFxuICAgICAgICAgICAgICAgICAgICB9XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKVxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICB3YXRjaDoge1xcclxcbiAgICAgICAgICAgIGZpbGUobnYpIHtcXHJcXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudiA9PT0gJ3N0cmluZycpIHRoaXMuc3JjID0gbnY7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4gICAgLnNpdGUtcGhvdG8tY2FyZCB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7XFxyXFxuICAgICAgICAvKiBHcmV5IDgwMCAqL1xcclxcblxcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc2l0ZS1waG90by1jYXJkLmZpbGxlZCB7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRjhGOEY4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zaXRlLXBob3RvLWNhcmQuZm9jdXNlZCwgLnNpdGUtcGhvdG8tY2FyZDpob3ZlciB7XFxyXFxuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDlweCByZ2JhKDE0MCwgMTQwLCAxNDAsIDAuNDkpO1xcclxcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5zaXRlLXBob3RvLWNhcmQ6YWZ0ZXIge1xcclxcbiAgICAgICAgY29udGVudDogXFxcIlxcXCI7XFxyXFxuICAgICAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA1NiU7IC8qIDE2LzkgKi9cXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc2l0ZS1waG90by1jYXJkLWFjdGlvbnMge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgcmlnaHQ6IDA7XFxyXFxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNpdGUtcGhvdG8tY2FyZC1jb250ZW50IHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuZWRpdC1waG90by1pY29uIHtcXHJcXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA4cHg7XFxyXFxuICAgIH1cXHJcXG48L3N0eWxlPlxcclxcbjxzdHlsZT5cXHJcXG5cXHJcXG4gICAgLnNtLXBob3RvLWRpYWxvZyAucGhvdG8tY292ZXIge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgdG9wOiAzMnB4O1xcclxcbiAgICAgICAgbGVmdDogMzJweDtcXHJcXG4gICAgICAgIHotaW5kZXg6IDEwMTtcXHJcXG4gICAgfVxcclxcblxcclxcbiAgICAuc20tcGhvdG8tZGlhbG9nIC5jbG9zZS1idG4ge1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgdG9wOiAzMnB4O1xcclxcbiAgICAgICAgcmlnaHQ6IDMycHg7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNtLXBob3RvLWRpYWxvZyAuYm90dG9tIHtcXHJcXG4gICAgICAgIHJpZ2h0OiAzMnB4O1xcclxcbiAgICAgICAgYm90dG9tOiAzMnB4O1xcclxcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxyXFxuICAgIH1cXHJcXG5cXHJcXG4gICAgLnNtLXBob3RvLWRpYWxvZyB7XFxyXFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgICAgICB6LWluZGV4OiAxMDA7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogcmdiYSgxMDUsIDEwOSwgMTE2LCAwLjYpO1xcclxcbiAgICAgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpO1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICB9XFxyXFxuXFxyXFxuICAgIC5kaWFsb2ctaW1hZ2UgLnYtaW1hZ2V7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XFxyXFxuICAgIH1cXHJcXG4gICAgLmRpYWxvZy1pbWFnZSB7XFxyXFxuICAgICAgICB3aWR0aDogZml0LWNvbnRlbnQ7XFxyXFxuICAgICAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xcclxcbiAgICAgICAgbWF4LXdpZHRoOiAxMDAlO1xcclxcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICAgICAgcGFkZGluZzogMTZweDtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXHJcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxyXFxuICAgIH1cXHJcXG48L3N0eWxlPlxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5mdWxsW2RhdGEtdi02ZWJmNGVhYV17d2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kOiNlMWUxZTF9LmFjdGl2ZVtkYXRhLXYtNmViZjRlYWFdLC5mdWxsW2RhdGEtdi02ZWJmNGVhYV17aGVpZ2h0OjRweDtib3JkZXItcmFkaXVzOjJweH0uYWN0aXZlW2RhdGEtdi02ZWJmNGVhYV17YmFja2dyb3VuZDojMmUzZTRlIWltcG9ydGFudH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9Qcm9ncmVzc0Jhci52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBZ0JBLHVCQUNBLFVBQUEsQ0FDQSxpQkFBQSxDQUVBLGtCQUVBLENBQ0EsZ0RBSkEsVUFBQSxDQUVBLGlCQU1BLENBSkEseUJBRUEsNEJBRUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgICA8di1yb3cgY2xhc3M9XFxcIm1hLTBcXFwiPlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwiZnVsbFxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYWN0aXZlXFxcIiA6c3R5bGU9XFxcInt3aWR0aDogcHJvZ3Jlc3MrJyUnfVxcXCIvPlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvdi1yb3c+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxyXFxuICAgICAgICBwcm9wczogWydwcm9ncmVzcyddLFxcclxcbiAgICAgICAgbmFtZTogXFxcIlByb2dyZXNzQmFyXFxcIlxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4gICAgLmZ1bGx7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgICAgIGhlaWdodDogNHB4O1xcclxcbiAgICAgICAgYmFja2dyb3VuZDogI0UxRTFFMTtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDtcXHJcXG4gICAgfVxcclxcbiAgICAuYWN0aXZle1xcclxcbiAgICAgICAgaGVpZ2h0OiA0cHg7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kOiAjMmUzZTRlICFpbXBvcnRhbnQ7XFxyXFxuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XFxyXFxuICAgIH1cXHJcXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5waG90by1pbnB1dFtkYXRhLXYtNzEwMTMwYTJde3Bvc2l0aW9uOmFic29sdXRlO3Zpc2liaWxpdHk6aGlkZGVufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3Bob3RvLWxvYWRlci52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBMkhBLDhCQUNBLGlCQUFBLENBQ0EsaUJBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgICA8di1jYXJkIGNsYXNzPVxcXCJkLWZsZXggZmxleC1jb2x1bW4gcHQtNCBwYi00XFxcIiBqdXN0aWZ5LWNlbnRlciBhbGlnbi1jZW50ZXIgZWxldmF0aW9uPVxcXCIwXFxcIj5cXHJcXG4gICAgICAgIDxkaXYgdi1pZj1cXFwib25lICYmIGxvYWRlZFBob3Rvcy5sZW5ndGhcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+e3tsb2FkZWRQaG90b3NbMF0ubmFtZX19PC9kaXY+XFxyXFxuICAgICAgICA8di1yb3cgdi1pZj1cXFwiIW9uZVxcXCIgY2xhc3M9XFxcIlxcXCI+XFxyXFxuICAgICAgICAgICAgPHYtY29sIHhzPVxcXCI2XFxcIiBtZD1cXFwiM1xcXCIgc209XFxcIjZcXFwiIHYtZm9yPVxcXCIocGhvdG8sIGkpIGluIGNhcm91c2VsUGhvdG9zXFxcIiA6a2V5PVxcXCJpXFxcIiB2LWlmPVxcXCIhIWNhcm91c2VsUGhvdG9zW2ldXFxcIj5cXHJcXG4gICAgICAgICAgICAgICAgPGVkaXQtcGhvdG8tY2FyZFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDpwcmVsb2FkPVxcXCJwcmVsb2FkXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIDpmaWxsZWQ9XFxcInRydWVcXFwiXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgOmZpbGU9XFxcInBob3RvXFxcIlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIEBkZWxldGU9XFxcIigpID0+IGRlbGV0ZVBob3RvKHBob3RvLCBpKVxcXCJcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWluXFxyXFxuICAgICAgICAgICAgICAgIC8+XFxyXFxuICAgICAgICAgICAgPC92LWNvbD5cXHJcXG4gICAgICAgICAgICA8di1jb2wgeHM9XFxcIjZcXFwiIG1kPVxcXCIzXFxcIiBzbT1cXFwiNlxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxlZGl0LXBob3RvLWNhcmRcXHJcXG4gICAgICAgICAgICAgICAgICAgIEBjbGljaz1cXFwiKCkgPT4gJHJlZnMuYnRuLmNsaWNrKClcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGRyb3AtYXJlYSBAY2hhbmdlPVxcXCJhZGRQaG90b1xcXCIgOnlldD1cXFwiY2Fyb3VzZWxQaG90b3MubGVuZ3RoXFxcIi8+XFxyXFxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGlvbnM+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaGlkZGVuXFxcIj48L2Rpdj5cXHJcXG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XFxyXFxuICAgICAgICAgICAgICAgIDwvZWRpdC1waG90by1jYXJkPlxcclxcbiAgICAgICAgICAgIDwvdi1jb2w+XFxyXFxuICAgICAgICA8L3Ytcm93PlxcclxcbiAgICA8L3YtY2FyZD5cXHJcXG48L3RlbXBsYXRlPlxcclxcblxcclxcbjxzY3JpcHQ+XFxyXFxuXFxyXFxuICAgIGltcG9ydCBFZGl0UGhvdG9DYXJkIGZyb20gXFxcIi4vRWRpdFBob3RvQ2FyZFxcXCI7XFxyXFxuICAgIGltcG9ydCBEcm9wQXJlYSBmcm9tIFxcXCIuL0Ryb3BBcmVhXFxcIjtcXHJcXG5cXHJcXG4gICAgZXhwb3J0IGRlZmF1bHQge1xcclxcbiAgICAgICAgbmFtZTogJ3Bob3RvLWxvYWRlcicsXFxyXFxuICAgICAgICBwcm9wczoge1xcclxcbiAgICAgICAgICAgIHJhZGl1czoge1xcclxcbiAgICAgICAgICAgICAgICB0eXBlOiBOdW1iZXIsXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBvbmU6IHtcXHJcXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcXHJcXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UsXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBwaG90b3M6IHtcXHJcXG4gICAgICAgICAgICAgICAgdHlwZTogQXJyYXksXFxyXFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IChbXSksXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBwcmVsb2FkOiB7XFxyXFxuICAgICAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXFxyXFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBjb21wb25lbnRzOiB7RHJvcEFyZWEsIEVkaXRQaG90b0NhcmR9LFxcclxcbiAgICAgICAgZGF0YTogKHZtKSA9PiAoe1xcclxcbiAgICAgICAgICAgICAgICBuOiAwLFxcclxcbiAgICAgICAgICAgICAgICBwaG90bzogJycsXFxyXFxuICAgICAgICAgICAgICAgIGxvYWRlZFBob3RvczogW10sXFxyXFxuICAgICAgICAgICAgICAgIGRlbGV0ZWQ6IFtdLFxcclxcbiAgICAgICAgICAgICAgICBjYXJvdXNlbFBob3Rvczogdm0ucGhvdG9zLFxcclxcbiAgICAgICAgICAgICAgICBmaWxlSW1nOiBudWxsLFxcclxcbiAgICAgICAgfSksXFxyXFxuICAgICAgICB1cGRhdGVkKCkge1xcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIG1ldGhvZHM6IHtcXHJcXG4gICAgICAgICAgICBkZWxldGVQaG90byhwaG90bywgY3BpKSB7XFxyXFxuICAgICAgICAgICAgICAgIGlmIChwaG90by5uYW1lKSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZFBob3Rvcy5mb3JFYWNoKChmaWxlLCBpKSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUubmFtZSA9PT0gcGhvdG8ubmFtZSkgZGVsZXRlIHRoaXMubG9hZGVkUGhvdG9zW2ldO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxyXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZWQucHVzaCh0aGlzLnBob3Rvc1tjcGldLmlkKTtcXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jYXJvdXNlbFBob3Rvc1tjcGldO1xcclxcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsUGhvdG9zID0gWy4uLnRoaXMuY2Fyb3VzZWxQaG90b3NdO1xcclxcbiAgICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgICAgZ2V0UGhvdG9zKCkge1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWRQaG90b3MuY29uY2F0KHRoaXMuZGVsZXRlZCk7XFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBnZXRGaXJzdCgpIHtcXHJcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVkUGhvdG9zWzBdO1xcclxcbiAgICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgICAgcmV0dXJuRm9ybURhdGEodmFsKSB7XFxyXFxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NhdmUtcGhvdG8nLCB2YWwpXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICB1cGRhdGVQaG90byh2YWwpIHtcXHJcXG4gICAgICAgICAgICAgICAgdGhpcy5waG90byA9IHZhbFxcclxcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dDcm9wcGVyRGlhbG9nID0gZmFsc2VcXHJcXG4gICAgICAgICAgICB9LFxcclxcbiAgICAgICAgICAgIGNsaWNrT25JbnB1dCgpIHtcXHJcXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVzJykuZmlsZXMgPSAobmV3IERhdGFUcmFuc2ZlcigpKS5maWxlcztcXHJcXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZpbGVzJykuY2xpY2soKVxcclxcblxcclxcbiAgICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgICAgYWRkUGhvdG8oZXZlbnQpIHtcXHJcXG4gICAgICAgICAgICAgICAgWy4uLmV2ZW50LnRhcmdldC5maWxlc10uZm9yRWFjaCgocGhvdG8pID0+IHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsZUltZyA9IHBob3RvO1xcclxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsZUltZy5zaXplID4gNTAyNDAwMCkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyVGV4dCA9ICfQoNCw0LfQvNC10YAg0YTQsNC50LvQsCDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0LHQvtC70YzRiNC1IDXQnNCRJ1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyID0gdHJ1ZVxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvYWRlZFBob3Rvcy5sZW5ndGggPiAxMCkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyVGV4dCA9ICfQktGLINC90LUg0LzQvtC20LXRgtC1INC30LDQs9GA0YPQt9C40YLRjCDQsdC+0LvRjNGI0LUgMTAg0YTQvtGC0L7Qs9GA0LDRhNC40LknXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXIgPSB0cnVlXFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcclxcbiAgICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbFBob3RvcyA9IFtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmNhcm91c2VsUGhvdG9zLFxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJlbG9hZCA/IFVSTC5jcmVhdGVPYmplY3RVUkwodGhpcy5maWxlSW1nKSA6IHRoaXMuZmlsZUltZ1xcclxcbiAgICAgICAgICAgICAgICAgICAgXTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkUGhvdG9zLnB1c2godGhpcy5maWxlSW1nKVxcclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sb2FkZWRQaG90b3MubGVuZ3RoIC0gMVxcclxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlSW1nID0gbnVsbDtcXHJcXG4gICAgICAgICAgICAgICAgfSlcXHJcXG4gICAgICAgICAgICB9LFxcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIHdhdGNoOiB7XFxyXFxuICAgICAgICAgICAgcGhvdG9zKG52KSB7XFxyXFxuICAgICAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWxQaG90b3MgPSBudi5tYXAoKGZpbGUpID0+IGZpbGUuZmlsZSk7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4gICAgLnBob3RvLWlucHV0IHtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXHJcXG4gICAgfVxcclxcbjwvc3R5bGU+XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiAoKSB7dmFyIF92bT10aGlzO3ZhciBfaD1fdm0uJGNyZWF0ZUVsZW1lbnQ7dmFyIF9jPV92bS5fc2VsZi5fY3x8X2g7cmV0dXJuIF9jKCd2LWNhcmQnLHtzdGF0aWNDbGFzczpcImQtZmxleCBmbGV4LWNvbHVtbiBwdC00IHBiLTRcIixhdHRyczp7XCJqdXN0aWZ5LWNlbnRlclwiOlwiXCIsXCJhbGlnbi1jZW50ZXJcIjpcIlwiLFwiZWxldmF0aW9uXCI6XCIwXCJ9fSxbKF92bS5vbmUgJiYgX3ZtLmxvYWRlZFBob3Rvcy5sZW5ndGgpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtY2VudGVyXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5sb2FkZWRQaG90b3NbMF0ubmFtZSkpXSk6X3ZtLl9lKCksX3ZtLl92KFwiIFwiKSwoIV92bS5vbmUpP19jKCd2LXJvdycse30sW192bS5fbCgoX3ZtLmNhcm91c2VsUGhvdG9zKSxmdW5jdGlvbihwaG90byxpKXtyZXR1cm4gKCEhX3ZtLmNhcm91c2VsUGhvdG9zW2ldKT9fYygndi1jb2wnLHtrZXk6aSxhdHRyczp7XCJ4c1wiOlwiNlwiLFwibWRcIjpcIjNcIixcInNtXCI6XCI2XCJ9fSxbX2MoJ2VkaXQtcGhvdG8tY2FyZCcse2F0dHJzOntcInByZWxvYWRcIjpfdm0ucHJlbG9hZCxcImZpbGxlZFwiOnRydWUsXCJmaWxlXCI6cGhvdG8sXCJjb250YWluXCI6XCJcIn0sb246e1wiZGVsZXRlXCI6ZnVuY3Rpb24gKCkgeyByZXR1cm4gX3ZtLmRlbGV0ZVBob3RvKHBob3RvLCBpKTsgfX19KV0sMSk6X3ZtLl9lKCl9KSxfdm0uX3YoXCIgXCIpLF9jKCd2LWNvbCcse2F0dHJzOntcInhzXCI6XCI2XCIsXCJtZFwiOlwiM1wiLFwic21cIjpcIjZcIn19LFtfYygnZWRpdC1waG90by1jYXJkJyx7b246e1wiY2xpY2tcIjpmdW5jdGlvbiAoKSB7IHJldHVybiBfdm0uJHJlZnMuYnRuLmNsaWNrKCk7IH19LHNjb3BlZFNsb3RzOl92bS5fdShbe2tleTpcImFjdGlvbnNcIixmbjpmdW5jdGlvbigpe3JldHVybiBbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiaGlkZGVuXCJ9KV19LHByb3h5OnRydWV9XSxudWxsLGZhbHNlLDgxMDAyMTE3MCl9LFtfYygnZHJvcC1hcmVhJyx7YXR0cnM6e1wieWV0XCI6X3ZtLmNhcm91c2VsUGhvdG9zLmxlbmd0aH0sb246e1wiY2hhbmdlXCI6X3ZtLmFkZFBob3RvfX0pXSwxKV0sMSldLDIpOl92bS5fZSgpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiXHJcbmV4cG9ydCBjb25zdCBjb21wcmVzcyA9IChpbWcsIG1vZGlmeUNvbnRleHQpID0+IHtcclxuICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxyXG4gICAgbGV0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxyXG4gICAgbGV0IHdpZHRoID0gaW1nLndpZHRoXHJcbiAgICBsZXQgaGVpZ2h0ID0gaW1nLmhlaWdodFxyXG4gICAgLy8gbG9nKGltZy53aWR0aCwgaW1nLmhlaWdodClcclxuICAgIC8vIGxvZyh3aWR0aCwgaGVpZ2h0KVxyXG4gICAgY2FudmFzLndpZHRoID0gd2lkdGhcclxuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHRcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXHJcbiAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodClcclxuICAgIGlmIChtb2RpZnlDb250ZXh0KSBtb2RpZnlDb250ZXh0KGNvbnRleHQsIGNhbnZhcyk7XHJcbiAgICBlbHNlIGNvbnRleHQuZHJhd0ltYWdlKGltZywgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxyXG4gICAgbGV0IGJhc2U2NERhdGEgPSBjYW52YXMudG9EYXRhVVJMKCdpbWFnZS9qcGVnJywgMC40KVxyXG4gICAgY2FudmFzID0gY29udGV4dCA9IG51bGxcclxuICAgIC8vIGxvZyhiYXNlNjREYXRhLmxlbmd0aClcclxuICAgIGltZyA9IG51bGxcclxuICAgIHJldHVybiBiYXNlNjREYXRhXHJcbn1cclxuXHJcbi8vIGJhc2U2NCBpcyBjb252ZXJ0ZWQgdG8gYmluYXJ5IGZpbGVcclxuZXhwb3J0IGNvbnN0IGI2NFRvQmxvYiA9IChiNjREYXRhLCBjb250ZW50VHlwZSkgPT4ge1xyXG4gICAgY29udGVudFR5cGUgPSBjb250ZW50VHlwZSB8fCAnJ1xyXG5cclxuICAgIGxldCBieXRlQ2hhcmFjdGVycyA9IGF0b2IoYjY0RGF0YSkgLy8gRGVjb2RlIGJhc2U2NCBkYXRhIGFzIGEgYmluYXJ5IHN0cmluZ1xyXG4gICAgbGV0IGJ1ZmZlciA9IFtdIC8vIE5vdGUgdGhhdCB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIGJsb2IgbXVzdCBiZSBhbiBhcnJheVxyXG5cclxuICAgIC8vIHR5cGUgYXJyYXkgaXMgdXNlZCB0byBwcm9jZXNzIGJpbmFyeSBmaWxlc1xyXG4gICAgbGV0IGFCdWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZUNoYXJhY3RlcnMubGVuZ3RoKVxyXG4gICAgbGV0IHVCdWZmZXIgPSBuZXcgVWludDhBcnJheShhQnVmZmVyKVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlQ2hhcmFjdGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHVCdWZmZXJbaV0gPSBieXRlQ2hhcmFjdGVycy5jaGFyQ29kZUF0KGkpIC8vIGdldCBVbmljb2RlIGVuY29kaW5nLCBzdG9yZSBpbiB0eXBlIGFycmF5XHJcbiAgICB9XHJcbiAgICBidWZmZXIucHVzaCh1QnVmZmVyKVxyXG4gICAgLy8gT3JkaW5hcnkgYXJyYXkgaXMgdW5hYmxlIHRvIGdlbmVyYXRlIGJpbmFyeSBmaWxlc1xyXG4gICAgcmV0dXJuIG5ldyBCbG9iKGJ1ZmZlciwgeyAvLyBnZW5lcmF0ZSBhIGJpbmFyeSBmaWxlXHJcbiAgICAgICAgdHlwZTogY29udGVudFR5cGVcclxuICAgIH0pXHJcbn1cclxuIiwiPHRlbXBsYXRlPlxyXG4gICAgPHYtcm93IGNsYXNzPVwibWEtMFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmdWxsXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhY3RpdmVcIiA6c3R5bGU9XCJ7d2lkdGg6IHByb2dyZXNzKyclJ31cIi8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L3Ytcm93PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBwcm9wczogWydwcm9ncmVzcyddLFxyXG4gICAgICAgIG5hbWU6IFwiUHJvZ3Jlc3NCYXJcIlxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQ+XHJcbiAgICAuZnVsbHtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgaGVpZ2h0OiA0cHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI0UxRTFFMTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICB9XHJcbiAgICAuYWN0aXZle1xyXG4gICAgICAgIGhlaWdodDogNHB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICMyZTNlNGUgIWltcG9ydGFudDtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Byb2dyZXNzQmFyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Byb2dyZXNzQmFyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vUHJvZ3Jlc3NCYXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZlYmY0ZWFhJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1Byb2dyZXNzQmFyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUHJvZ3Jlc3NCYXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1Byb2dyZXNzQmFyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZlYmY0ZWFhJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI2ZWJmNGVhYVwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNVswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9FZGl0UGhvdG9DYXJkLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0VkaXRQaG90b0NhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cInNpdGUtcGhvdG8tY2FyZFwiXHJcbiAgICAgICAgIDpjbGFzcz1cIntmb2N1c2VkOiBmb2N1cywgZmlsbGVkfVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzaXRlLXBob3RvLWNhcmQtY29udGVudFwiIHN0eWxlPVwiei1pbmRleDogMTtcIj5cclxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cImRlZmF1bHRcIj5cclxuICAgICAgICAgICAgICAgIDx2LWltZyB2LWlmPVwibG9hZGVkICYmIHNyY1wiIDpzcmM9XCJzcmNcIiBjb3ZlclxyXG4gICAgICAgICAgICAgICAgICAgICAgIGhlaWdodD1cIjEwMCVcIiBAY2xpY2s9XCIkZW1pdCgnY2xpY2snLCAkYXR0cnNbJ3ZhbHVlJ10pOyBvcGVuPXRydWVcIi8+XHJcbiAgICAgICAgICAgICAgICA8di1yb3cgdi1lbHNlLWlmPVwiIWxvYWRlZCAmJiAhZXJyb3JcIiB4cz1cIjEyXCIgY2xhc3M9XCJwYS04XCIgc3R5bGU9XCJhbGlnbi1pdGVtczogY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHByb2dyZXNzLWJhciA6cHJvZ3Jlc3M9XCJwcm9ncmVzc1wiLz5cclxuICAgICAgICAgICAgICAgIDwvdi1yb3c+XHJcbiAgICAgICAgICAgIDwvc2xvdD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwic2l0ZS1waG90by1jYXJkLWFjdGlvbnNcIiBzdHlsZT1cInotaW5kZXg6IDI7XCI+XHJcbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJhY3Rpb25zXCI+XHJcbiAgICAgICAgICAgICAgICA8di1yb3cgeHM9XCIxMlwiIGNsYXNzPVwicGwtNSBwci01IHB0LTIganVzdGlmeS1lbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8di1idG4gZmFiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cIiRlbWl0KCdkZWxldGUnKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibXItM1wiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj5cclxuICAgICAgICAgICAgICAgICAgICA8L3YtYnRuPlxyXG4gICAgICAgICAgICAgICAgPC92LXJvdz5cclxuICAgICAgICAgICAgPC9zbG90PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDx2LWRpYWxvZyB2LW1vZGVsPVwib3BlblwiIHYtaWY9XCJvcGVuXCIgY29udGVudC1jbGFzcz1cInNtLXBob3RvLWRpYWxvZ1wiXHJcbiAgICAgICAgICAgICAgICAgIDpmdWxsc2NyZWVuPVwidHJ1ZVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZGlhbG9nLWltYWdlXCI+XHJcbiAgICAgICAgICAgICAgICA8di1pbWcgdi1pZj1cImxvYWRlZCAmJiBzcmNcIiA6c3JjPVwic3JjXCIgbWF4LWhlaWdodD1cIjkwdmhcIiBjb250YWluLz5cclxuICAgICAgICAgICAgICAgIDx2LWJ0biBpY29uIEBjbGljaz1cIiRlbWl0KCdmb2N1c091dCcpOyBvcGVuPWZhbHNlO1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9XCJncmF5XCJcclxuICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsb3NlLWJ0blwiID48di1pY29uPm1kaS1jbG9zZTwvdi1pY29uPjwvdi1idG4+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvdi1kaWFsb2c+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBpbXBvcnQge2I2NFRvQmxvYiwgY29tcHJlc3N9IGZyb20gXCIuLi8uLi9pbWFnZVwiO1xyXG4gICAgaW1wb3J0IFByb2dyZXNzQmFyIGZyb20gXCIuL1Byb2dyZXNzQmFyXCI7XHJcblxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwiRWRpdFBob3RvQ2FyZFwiLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHtQcm9ncmVzc0Jhcn0sXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZm9jdXM6IHt0eXBlOiBCb29sZWFuLCBkZWZhdWx0OiBmYWxzZSx9LFxyXG4gICAgICAgICAgICBwcmVsb2FkOiB7dHlwZTogQm9vbGVhbiwgZGVmYXVsdDogdHJ1ZSx9LFxyXG4gICAgICAgICAgICBjb3Zlcjoge3R5cGU6IFN0cmluZywgZGVmYXVsdDogXCJcIn0sXHJcbiAgICAgICAgICAgIGZpbGxlZDoge3R5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlfSxcclxuICAgICAgICAgICAgZmlsZToge3R5cGU6IEZpbGUgfCBTdHJpbmd9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRhOiAodm0pID0+ICh7XHJcbiAgICAgICAgICAgIG9wZW46IGZhbHNlLFxyXG4gICAgICAgICAgICBmb2N1c2VkOiAhIXZtLiRhdHRyc1snZm9jdXMnXSxcclxuICAgICAgICAgICAgc3JjOiAnJyxcclxuICAgICAgICAgICAgbG9hZGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICBwcm9ncmVzczogMCxcclxuICAgICAgICAgICAgcm90YXRlVGltZW91dDogbnVsbCxcclxuICAgICAgICB9KSxcclxuICAgICAgICBtb3VudGVkKCkge1xyXG4gICAgICAgICAgICB0aGlzLnVwbG9hZCh0aGlzLmZpbGUpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgICBpc0NvdmVyKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY292ZXIgJiYgdGhpcy5zcmMuaW5kZXhPZih0aGlzLmNvdmVyKSAhPT0gLTFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICByb3RhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3RhdGVUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucm90YXRlVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3RhdGVUaW1lb3V0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucm90YXRlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWcuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiXHJcbiAgICAgICAgICAgICAgICAgICAgaW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXByZXNzVXJsID0gY29tcHJlc3MoaW1nLCAoY3R4LCBjYW52YXMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKGNhbnZhcy53aWR0aCAvIDIsIGNhbnZhcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5yb3RhdGUoOTAgKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAtaW1nLndpZHRoIC8gMiwgLWltZy53aWR0aCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBibG9iID0gYjY0VG9CbG9iKGNvbXByZXNzVXJsLnNwbGl0KCcsJylbMV0sICdpbWFnZS9qcGVnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKGJsb2IsIHRoaXMuc3JjLnNwbGl0KCcvJykucmV2ZXJzZSgpWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGltZy5zcmMgPSB0aGlzLnNyYztcclxuICAgICAgICAgICAgICAgIH0sIDEwMDApXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlYWRMb2NhbFNyYyhmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlIGluc3RhbmNlb2YgQmxvYikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3JjID0gcmVhZGVyLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5zcmMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHRoaXMuc3JjID0gZmlsZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBsb2FkKGZpbGUsIGNhbnZhc0ZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJlbG9hZCB8fCAhKGZpbGUgaW5zdGFuY2VvZiBCbG9iKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVhZExvY2FsU3JjKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxyXG4gICAgICAgICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdqc29uJztcclxuICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpXHJcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlLCBjYW52YXNGaWxlTmFtZSB8fCBmaWxlLm5hbWUpXHJcbiAgICAgICAgICAgICAgICB4aHIub3BlbignUE9TVCcsICcvcGhvdG8vdXBsb2FkJywgdHJ1ZSlcclxuICAgICAgICAgICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzcyA9IChlLmxvYWRlZCAqIDEwMC4wIC8gZS50b3RhbCkgfHwgMTAwO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHIuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNyYyA9IGUudGFyZ2V0LnJlc3BvbnNlLnVybDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgZS50YXJnZXQucmVzcG9uc2UudXJsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiB4aHIuc3RhdHVzICE9IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PSA0MDAgJiYgIWNhbnZhc0ZpbGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL9CU0LvRjyDRhNCw0LnQu9C+0LIg0YEg0LHQuNGC0YvQvCDQvNCw0LnQvNGC0LjQv9C+0Lwg0YDQuNGB0YPQtdC8INC90LAg0LrQsNC90LLQtSDQuCDQvtGC0L/RgNCw0LLQu9GP0LXQvCDRgNC10LfRg9C70YzRgtCw0YJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbXByZXNzVXJsID0gY29tcHJlc3MoaW1nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYmxvYiA9IGI2NFRvQmxvYihjb21wcmVzc1VybC5zcGxpdCgnLCcpWzFdLCAnaW1hZ2UvanBlZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkKGJsb2IsIGZpbGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkTG9jYWxTcmMoZmlsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IHRoaXMubG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKGZvcm1EYXRhKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBmaWxlKG52KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG52ID09PSAnc3RyaW5nJykgdGhpcy5zcmMgPSBudjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLnNpdGUtcGhvdG8tY2FyZCB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7XHJcbiAgICAgICAgLyogR3JleSA4MDAgKi9cclxuXHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICB9XHJcblxyXG4gICAgLnNpdGUtcGhvdG8tY2FyZC5maWxsZWQge1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGOEY4Rjg7XHJcbiAgICB9XHJcblxyXG4gICAgLnNpdGUtcGhvdG8tY2FyZC5mb2N1c2VkLCAuc2l0ZS1waG90by1jYXJkOmhvdmVyIHtcclxuICAgICAgICBib3gtc2hhZG93OiAwcHggMHB4IDlweCByZ2JhKDE0MCwgMTQwLCAxNDAsIDAuNDkpO1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgIH1cclxuXHJcbiAgICAuc2l0ZS1waG90by1jYXJkOmFmdGVyIHtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIHBhZGRpbmctYm90dG9tOiA1NiU7IC8qIDE2LzkgKi9cclxuICAgIH1cclxuXHJcbiAgICAuc2l0ZS1waG90by1jYXJkLWFjdGlvbnMge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICByaWdodDogMDtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLnNpdGUtcGhvdG8tY2FyZC1jb250ZW50IHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB9XHJcblxyXG4gICAgLmVkaXQtcGhvdG8taWNvbiB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDhweDtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuPHN0eWxlPlxyXG5cclxuICAgIC5zbS1waG90by1kaWFsb2cgLnBob3RvLWNvdmVyIHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAzMnB4O1xyXG4gICAgICAgIGxlZnQ6IDMycHg7XHJcbiAgICAgICAgei1pbmRleDogMTAxO1xyXG4gICAgfVxyXG5cclxuICAgIC5zbS1waG90by1kaWFsb2cgLmNsb3NlLWJ0biB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogMzJweDtcclxuICAgICAgICByaWdodDogMzJweDtcclxuICAgIH1cclxuXHJcbiAgICAuc20tcGhvdG8tZGlhbG9nIC5ib3R0b20ge1xyXG4gICAgICAgIHJpZ2h0OiAzMnB4O1xyXG4gICAgICAgIGJvdHRvbTogMzJweDtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIH1cclxuXHJcbiAgICAuc20tcGhvdG8tZGlhbG9nIHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgei1pbmRleDogMTAwO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMTA1LCAxMDksIDExNiwgMC42KTtcclxuICAgICAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAuZGlhbG9nLWltYWdlIC52LWltYWdle1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICAgIH1cclxuICAgIC5kaWFsb2ctaW1hZ2Uge1xyXG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcclxuICAgICAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xyXG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgcGFkZGluZzogMTZweDtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3Ytcm93Jyx7c3RhdGljQ2xhc3M6XCJtYS0wXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJmdWxsXCJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJhY3RpdmVcIixzdHlsZTooe3dpZHRoOiBfdm0ucHJvZ3Jlc3MrJyUnfSl9KV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRWRpdFBob3RvQ2FyZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NTAzZjJhZmImc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRWRpdFBob3RvQ2FyZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0VkaXRQaG90b0NhcmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0VkaXRQaG90b0NhcmQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NTAzZjJhZmImc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcbmltcG9ydCBzdHlsZTEgZnJvbSBcIi4vRWRpdFBob3RvQ2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNTAzZjJhZmJcIixcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJzaXRlLXBob3RvLWNhcmRcIixjbGFzczp7Zm9jdXNlZDogX3ZtLmZvY3VzLCBmaWxsZWQ6IF92bS5maWxsZWR9fSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic2l0ZS1waG90by1jYXJkLWNvbnRlbnRcIixzdGF0aWNTdHlsZTp7XCJ6LWluZGV4XCI6XCIxXCJ9fSxbX3ZtLl90KFwiZGVmYXVsdFwiLGZ1bmN0aW9uKCl7cmV0dXJuIFsoX3ZtLmxvYWRlZCAmJiBfdm0uc3JjKT9fYygndi1pbWcnLHthdHRyczp7XCJzcmNcIjpfdm0uc3JjLFwiY292ZXJcIjpcIlwiLFwiaGVpZ2h0XCI6XCIxMDAlXCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ2NsaWNrJywgX3ZtLiRhdHRyc1sndmFsdWUnXSk7IF92bS5vcGVuPXRydWV9fX0pOighX3ZtLmxvYWRlZCAmJiAhX3ZtLmVycm9yKT9fYygndi1yb3cnLHtzdGF0aWNDbGFzczpcInBhLThcIixzdGF0aWNTdHlsZTp7XCJhbGlnbi1pdGVtc1wiOlwiY2VudGVyXCJ9LGF0dHJzOntcInhzXCI6XCIxMlwifX0sW19jKCdwcm9ncmVzcy1iYXInLHthdHRyczp7XCJwcm9ncmVzc1wiOl92bS5wcm9ncmVzc319KV0sMSk6X3ZtLl9lKCldfSldLDIpLF92bS5fdihcIiBcIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwic2l0ZS1waG90by1jYXJkLWFjdGlvbnNcIixzdGF0aWNTdHlsZTp7XCJ6LWluZGV4XCI6XCIyXCJ9fSxbX3ZtLl90KFwiYWN0aW9uc1wiLGZ1bmN0aW9uKCl7cmV0dXJuIFtfYygndi1yb3cnLHtzdGF0aWNDbGFzczpcInBsLTUgcHItNSBwdC0yIGp1c3RpZnktZW5kXCIsYXR0cnM6e1wieHNcIjpcIjEyXCJ9fSxbX2MoJ3YtYnRuJyx7c3RhdGljQ2xhc3M6XCJtci0zXCIsYXR0cnM6e1wiZmFiXCI6XCJcIixcInNtYWxsXCI6XCJcIn0sb246e1wiY2xpY2tcIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJGVtaXQoJ2RlbGV0ZScpfX19LFtfYygndi1pY29uJyxbX3ZtLl92KFwibWRpLWRlbGV0ZVwiKV0pXSwxKV0sMSldfSldLDIpLF92bS5fdihcIiBcIiksKF92bS5vcGVuKT9fYygndi1kaWFsb2cnLHthdHRyczp7XCJjb250ZW50LWNsYXNzXCI6XCJzbS1waG90by1kaWFsb2dcIixcImZ1bGxzY3JlZW5cIjp0cnVlfSxtb2RlbDp7dmFsdWU6KF92bS5vcGVuKSxjYWxsYmFjazpmdW5jdGlvbiAoJCR2KSB7X3ZtLm9wZW49JCR2fSxleHByZXNzaW9uOlwib3BlblwifX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImRpYWxvZy1pbWFnZVwifSxbKF92bS5sb2FkZWQgJiYgX3ZtLnNyYyk/X2MoJ3YtaW1nJyx7YXR0cnM6e1wic3JjXCI6X3ZtLnNyYyxcIm1heC1oZWlnaHRcIjpcIjkwdmhcIixcImNvbnRhaW5cIjpcIlwifX0pOl92bS5fZSgpLF92bS5fdihcIiBcIiksX2MoJ3YtYnRuJyx7c3RhdGljQ2xhc3M6XCJjbG9zZS1idG5cIixhdHRyczp7XCJpY29uXCI6XCJcIixcImNvbG9yXCI6XCJncmF5XCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uJGVtaXQoJ2ZvY3VzT3V0Jyk7IF92bS5vcGVuPWZhbHNlO319fSxbX2MoJ3YtaWNvbicsW192bS5fdihcIm1kaS1jbG9zZVwiKV0pXSwxKV0sMSldKTpfdm0uX2UoKV0sMSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgaWQ9XCJkcm9wLWFyZWFcIiBjbGFzcz1cImRyb3AtYXJlYVwiIDpjbGFzcz1cIiR2dWV0aWZ5LmJyZWFrcG9pbnQuc21BbmREb3duID8gWydkcm9wLXNtJ10gOiBbXVwiPlxyXG4gICAgICAgIDxmb3JtIGNsYXNzPVwiZHJvcC1mb3JtXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIGlkPVwiZmlsZUVsZW1cIiBtdWx0aXBsZSBhY2NlcHQ9XCJpbWFnZS8qXCJcclxuICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9XCIoZSkgPT4gJGVtaXQoJ2NoYW5nZScsIGUpXCIgY2xhc3M9XCJoaWRlXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImRyb3AtYnRuXCIgZm9yPVwiZmlsZUVsZW1cIj57eyF5ZXQgPyAn0JfQsNCz0YDRg9C30LjRgtGMINGE0L7RgtC+JyA6ICfQl9Cw0LPRgNGD0LfQuNGC0Ywg0LXRidC1J319PC9sYWJlbD5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJmb3JtYXQtZmlsZS1kZXNjXCI+0KTQvtGA0LzQsNGCIOKAkyBqcGcsIHBuZzwvcD5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJmaWxlLWRlc2MgaG92ZXJcIj7QntGC0L/Rg9GB0YLQuNGC0LUg0YTQvtGC0L7Qs9GA0LDRhNC40Y4g0YHRjtC00LA8L3A+XHJcbiAgICAgICAgPC9mb3JtPlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwiRHJvcEFyZWFcIixcclxuICAgICAgICBkYXRhOiAodm0pID0+ICh7dm19KSxcclxuICAgICAgICBwcm9wczogWyd5ZXQnXSxcclxuICAgICAgICBtb3VudGVkKHZtKSB7XHJcbiAgICAgICAgICAgIGxldCBkcm9wQXJlYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkcm9wLWFyZWEnKTtcclxuICAgICAgICAgICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInLCAnZHJhZ2xlYXZlJywgJ2Ryb3AnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgcHJldmVudERlZmF1bHRzLCBmYWxzZSlcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0cyhlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZm9jdXMsIGZhbHNlKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgWydkcmFnbGVhdmUnLCAnZHJvcCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcclxuICAgICAgICAgICAgICAgIGRyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmZvY3VzLCBmYWxzZSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBmb2N1cyhlKSB7XHJcbiAgICAgICAgICAgICAgICBkcm9wQXJlYS5jbGFzc0xpc3QuYWRkKCdmb2N1cycpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHVuZm9jdXMoZSkge1xyXG4gICAgICAgICAgICAgICAgZHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBoYW5kbGVEcm9wID0gKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkdCA9IGUuZGF0YVRyYW5zZmVyXHJcbiAgICAgICAgICAgICAgICBsZXQgZmlsZXMgPSBkdC5maWxlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVGaWxlcyhmaWxlcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCwgZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBoYW5kbGVGaWxlcyhmaWxlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywge3RhcmdldDp7ZmlsZXN9fSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAgIC5kcm9wLWFyZWE6bm90KC5kcm9wLXNtKSB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBoZWlnaHQ6IDIwMHB4O1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7XHJcbiAgICAgICAgYm9yZGVyOiAxcHggZGFzaGVkICNBRkFGQUY7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xyXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICB9XHJcblxyXG4gICAgI2Ryb3AtYXJlYS5mb2N1cyB7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI0Y4RjhGODtcclxuICAgIH1cclxuXHJcbiAgICAuaG92ZXIge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgLmZvY3VzIC5oaWRlIHtcclxuICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgLmZvY3VzIC5ob3ZlciB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcclxuICAgIH1cclxuXHJcbiAgICBwIHtcclxuICAgICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgfVxyXG5cclxuICAgIC5kcm9wLWFyZWE6bm90KC5kcm9wLXNtKSAuZHJvcC1mb3JtIHtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICAgIHotaW5kZXg6IDUwO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAuZHJvcC1idG4ge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgbWluLXdpZHRoOiAxNTBweDtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICAgICAgaGVpZ2h0OiAzNXB4O1xyXG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICAgICAgYmFja2dyb3VuZDogI0Y4RjhGODtcclxuICAgICAgICBmb250LXdlaWdodDogNDAwO1xyXG4gICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcclxuICAgICAgICBsaW5lLWhlaWdodDogMTdweDtcclxuICAgICAgICBmb250LXNpemU6IDE4cHg7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbiAgICAuZHJvcC1zbSAuZHJvcC1idG57XHJcbiAgICAgICAgbWluLXdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG5cclxuICAgICNmaWxlRWxlbSB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAuZmlsZS1kZXNjIHtcclxuXHJcbiAgICAgICAgZm9udC1zdHlsZTogbm9ybWFsO1xyXG4gICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiAyMnB4O1xyXG4gICAgICAgIGNvbG9yOiAjNEE0QTRBO1xyXG4gICAgfVxyXG5cclxuICAgIC5kcm9wLXNtIC5maWxlLWRlc2Mge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmVcclxuICAgIH1cclxuICAgIC5mb3JtYXQtZmlsZS1kZXNjIHtcclxuICAgICAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICAgICAgICBmb250LXNpemU6IDE0cHg7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDE5cHg7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGNvbG9yOiAjQUZBRkFGO1xyXG4gICAgfVxyXG48L3N0eWxlPlxyXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTVbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRHJvcEFyZWEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTVbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRHJvcEFyZWEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Ecm9wQXJlYS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZWU0ZmVkMGMmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRHJvcEFyZWEudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Ecm9wQXJlYS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vRHJvcEFyZWEudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZWU0ZmVkMGMmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImVlNGZlZDBjXCIsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiZHJvcC1hcmVhXCIsY2xhc3M6X3ZtLiR2dWV0aWZ5LmJyZWFrcG9pbnQuc21BbmREb3duID8gWydkcm9wLXNtJ10gOiBbXSxhdHRyczp7XCJpZFwiOlwiZHJvcC1hcmVhXCJ9fSxbX2MoJ2Zvcm0nLHtzdGF0aWNDbGFzczpcImRyb3AtZm9ybVwifSxbX2MoJ2lucHV0Jyx7c3RhdGljQ2xhc3M6XCJoaWRlXCIsYXR0cnM6e1widHlwZVwiOlwiZmlsZVwiLFwiaWRcIjpcImZpbGVFbGVtXCIsXCJtdWx0aXBsZVwiOlwiXCIsXCJhY2NlcHRcIjpcImltYWdlLypcIn0sb246e1wiY2hhbmdlXCI6ZnVuY3Rpb24gKGUpIHsgcmV0dXJuIF92bS4kZW1pdCgnY2hhbmdlJywgZSk7IH19fSksX3ZtLl92KFwiIFwiKSxfYygnbGFiZWwnLHtzdGF0aWNDbGFzczpcImRyb3AtYnRuXCIsYXR0cnM6e1wiZm9yXCI6XCJmaWxlRWxlbVwifX0sW192bS5fdihfdm0uX3MoIV92bS55ZXQgPyAn0JfQsNCz0YDRg9C30LjRgtGMINGE0L7RgtC+JyA6ICfQl9Cw0LPRgNGD0LfQuNGC0Ywg0LXRidC1JykpXSksX3ZtLl92KFwiIFwiKSxfYygncCcse3N0YXRpY0NsYXNzOlwiZm9ybWF0LWZpbGUtZGVzY1wifSxbX3ZtLl92KFwi0KTQvtGA0LzQsNGCIOKAkyBqcGcsIHBuZ1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ3AnLHtzdGF0aWNDbGFzczpcImZpbGUtZGVzYyBob3ZlclwifSxbX3ZtLl92KFwi0J7RgtC/0YPRgdGC0LjRgtC1INGE0L7RgtC+0LPRgNCw0YTQuNGOINGB0Y7QtNCwXCIpXSldKV0pfVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8di1jYXJkIGNsYXNzPVwiZC1mbGV4IGZsZXgtY29sdW1uIHB0LTQgcGItNFwiIGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlciBlbGV2YXRpb249XCIwXCI+XHJcbiAgICAgICAgPGRpdiB2LWlmPVwib25lICYmIGxvYWRlZFBob3Rvcy5sZW5ndGhcIiBjbGFzcz1cInRleHQtY2VudGVyXCI+e3tsb2FkZWRQaG90b3NbMF0ubmFtZX19PC9kaXY+XHJcbiAgICAgICAgPHYtcm93IHYtaWY9XCIhb25lXCIgY2xhc3M9XCJcIj5cclxuICAgICAgICAgICAgPHYtY29sIHhzPVwiNlwiIG1kPVwiM1wiIHNtPVwiNlwiIHYtZm9yPVwiKHBob3RvLCBpKSBpbiBjYXJvdXNlbFBob3Rvc1wiIDprZXk9XCJpXCIgdi1pZj1cIiEhY2Fyb3VzZWxQaG90b3NbaV1cIj5cclxuICAgICAgICAgICAgICAgIDxlZGl0LXBob3RvLWNhcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgOnByZWxvYWQ9XCJwcmVsb2FkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmZpbGxlZD1cInRydWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6ZmlsZT1cInBob3RvXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgQGRlbGV0ZT1cIigpID0+IGRlbGV0ZVBob3RvKHBob3RvLCBpKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgIDwvdi1jb2w+XHJcbiAgICAgICAgICAgIDx2LWNvbCB4cz1cIjZcIiBtZD1cIjNcIiBzbT1cIjZcIj5cclxuICAgICAgICAgICAgICAgIDxlZGl0LXBob3RvLWNhcmRcclxuICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCIoKSA9PiAkcmVmcy5idG4uY2xpY2soKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkcm9wLWFyZWEgQGNoYW5nZT1cImFkZFBob3RvXCIgOnlldD1cImNhcm91c2VsUGhvdG9zLmxlbmd0aFwiLz5cclxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmFjdGlvbnM+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoaWRkZW5cIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgICAgICAgICAgPC9lZGl0LXBob3RvLWNhcmQ+XHJcbiAgICAgICAgICAgIDwvdi1jb2w+XHJcbiAgICAgICAgPC92LXJvdz5cclxuICAgIDwvdi1jYXJkPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHJcbiAgICBpbXBvcnQgRWRpdFBob3RvQ2FyZCBmcm9tIFwiLi9FZGl0UGhvdG9DYXJkXCI7XHJcbiAgICBpbXBvcnQgRHJvcEFyZWEgZnJvbSBcIi4vRHJvcEFyZWFcIjtcclxuXHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogJ3Bob3RvLWxvYWRlcicsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgcmFkaXVzOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwaG90b3M6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IEFycmF5LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogKCkgPT4gKFtdKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHJlbG9hZDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wb25lbnRzOiB7RHJvcEFyZWEsIEVkaXRQaG90b0NhcmR9LFxyXG4gICAgICAgIGRhdGE6ICh2bSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIG46IDAsXHJcbiAgICAgICAgICAgICAgICBwaG90bzogJycsXHJcbiAgICAgICAgICAgICAgICBsb2FkZWRQaG90b3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlZDogW10sXHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbFBob3Rvczogdm0ucGhvdG9zLFxyXG4gICAgICAgICAgICAgICAgZmlsZUltZzogbnVsbCxcclxuICAgICAgICB9KSxcclxuICAgICAgICB1cGRhdGVkKCkge1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICBkZWxldGVQaG90byhwaG90bywgY3BpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGhvdG8ubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkUGhvdG9zLmZvckVhY2goKGZpbGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUubmFtZSA9PT0gcGhvdG8ubmFtZSkgZGVsZXRlIHRoaXMubG9hZGVkUGhvdG9zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZWQucHVzaCh0aGlzLnBob3Rvc1tjcGldLmlkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNhcm91c2VsUGhvdG9zW2NwaV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsUGhvdG9zID0gWy4uLnRoaXMuY2Fyb3VzZWxQaG90b3NdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRQaG90b3MoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWRQaG90b3MuY29uY2F0KHRoaXMuZGVsZXRlZCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdldEZpcnN0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZGVkUGhvdG9zWzBdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXR1cm5Gb3JtRGF0YSh2YWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3NhdmUtcGhvdG8nLCB2YWwpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVwZGF0ZVBob3RvKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waG90byA9IHZhbFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93Q3JvcHBlckRpYWxvZyA9IGZhbHNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNsaWNrT25JbnB1dCgpIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaWxlcycpLmZpbGVzID0gKG5ldyBEYXRhVHJhbnNmZXIoKSkuZmlsZXM7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmlsZXMnKS5jbGljaygpXHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhZGRQaG90byhldmVudCkge1xyXG4gICAgICAgICAgICAgICAgWy4uLmV2ZW50LnRhcmdldC5maWxlc10uZm9yRWFjaCgocGhvdG8pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVJbWcgPSBwaG90bztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxlSW1nLnNpemUgPiA1MDI0MDAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyVGV4dCA9ICfQoNCw0LfQvNC10YAg0YTQsNC50LvQsCDQvdC1INC80L7QttC10YIg0LHRi9GC0Ywg0LHQvtC70YzRiNC1IDXQnNCRJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRjaGlsZHJlblswXS5zbmFja2JhciA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sb2FkZWRQaG90b3MubGVuZ3RoID4gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXJUZXh0ID0gJ9CS0Ysg0L3QtSDQvNC+0LbQtdGC0LUg0LfQsNCz0YDRg9C30LjRgtGMINCx0L7Qu9GM0YjQtSAxMCDRhNC+0YLQvtCz0YDQsNGE0LjQuSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXIgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbFBob3RvcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5jYXJvdXNlbFBob3RvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVsb2FkID8gVVJMLmNyZWF0ZU9iamVjdFVSTCh0aGlzLmZpbGVJbWcpIDogdGhpcy5maWxlSW1nXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZFBob3Rvcy5wdXNoKHRoaXMuZmlsZUltZylcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm4gPSB0aGlzLmxvYWRlZFBob3Rvcy5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlSW1nID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBwaG90b3MobnYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWxQaG90b3MgPSBudi5tYXAoKGZpbGUpID0+IGZpbGUuZmlsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAgIC5waG90by1pbnB1dCB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgIH1cclxuPC9zdHlsZT5cclxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC01WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3Bob3RvLWxvYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNVswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9waG90by1sb2FkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9waG90by1sb2FkZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTcxMDEzMGEyJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3Bob3RvLWxvYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3Bob3RvLWxvYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vcGhvdG8tbG9hZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxMDEzMGEyJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI3MTAxMzBhMlwiLFxuICBudWxsXG4gIFxuKVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgICA8di1jb250YWluZXIgY2xhc3M9XCJjb3ZlclwiPlxuICAgICAgICA8di10b29sYmFyLXRpdGxlIGFsaWduPVwiY2VudGVyXCIganVzdGlmeT1cImNlbnRlclwiIGNsYXNzPVwibWItMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgdi10ZXh0PVwiJHJvdXRlLnBhcmFtcy51c2VyX2lkID4gMCA/ICfQpNCw0LnQu9GLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjycgOiAn0JzQvtC4INGE0LDQudC70YsnXCI+XG4gICAgICAgIDwvdi10b29sYmFyLXRpdGxlPlxuICAgICAgICA8ZGl2IHYtaWY9XCJmaWxlcy5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICA8di1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPHYtY2FyZCAgdi1mb3I9XCIoZW50cnksIGluZGV4KSBpbiBmaWxlc1wiIDprZXk9XCJpbmRleFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibWEtMlwiXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGV2YXRpb249XCIwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImQtZmxleCBjcnVkXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgcmlnaHQ6IDVweDsgdG9wOiAtMTBweDsgZm9udC1zaXplOiAxMHB4XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9XCJyZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhYlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZGVsZXRlX2lkID0gZW50cnkuaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibXItM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFyaz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1pY29uPm1kaS1kZWxldGU8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9XCJncmVlblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJkb3dubG9hZChlbnRyeS5pZClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhcms+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtaWNvbj5tZGktZG93bmxvYWQ8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1idG4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8aDQgc3R5bGU9XCJtYXgtd2lkdGg6IDYwJVwiPnt7IGVudHJ5LnRpdGxlIH19PC9oND5cbiAgICAgICAgICAgICAgICA8L3YtY2FyZD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXIgeHMtMTJcIiB2LWlmPVwibCA+IDFcIj5cbiAgICAgICAgICAgICAgICAgICAgPHYtcGFnaW5hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpsZW5ndGg9XCJsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dG90YWwtdmlzaWJsZT1cIjNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJwYWdlXCJcbiAgICAgICAgICAgICAgICAgICAgPjwvdi1wYWdpbmF0aW9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC92LWNvbnRhaW5lcj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgdi1lbHNlPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyIG15LTNcIj7QpNCw0LnQu9C+0LIg0L/QvtC60LAg0L3QtdGCPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDx2LWJ0biBjbGFzcz1cInNhdmUtYnRuXCJcbiAgICAgICAgICAgICAgIGNvbG9yPVwic3VjY2Vzc1wiXG4gICAgICAgICAgICAgICBmYWJcbiAgICAgICAgICAgICAgIEBjbGljaz1cIm9wZW5EaWFsb2dcIlxuICAgICAgICAgICAgICAgZGFyaz5cbiAgICAgICAgICAgIDx2LWljb24+bWRpLXBhcGVyY2xpcDwvdi1pY29uPlxuICAgICAgICA8L3YtYnRuPlxuICAgICAgICA8di1kaWFsb2dcbiAgICAgICAgICAgICAgICB2LWlmPVwic2hvd1wiXG4gICAgICAgICAgICAgICAgOnZhbHVlPVwic2hvd1wiXG4gICAgICAgICAgICAgICAgQGNsb3NlPVwiY2xvc2VEaWFsb2dcIlxuICAgICAgICAgICAgICAgIDpmdWxsc2NyZWVuPVwiJHZ1ZXRpZnkuYnJlYWtwb2ludC5tb2JpbGVcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8dGVtcGxhdGUgc2xvdDpkZWZhdWx0PlxuICAgICAgICAgICAgICAgIDx2LWNhcmQ+XG5cbiAgICAgICAgICAgICAgICAgICAgPHYtdG9vbGJhciAgY2xhc3M9XCJjb250YWluZXIgcHktMSBteS0wIGp1c3RpZnktc3BhY2UtYmV0d2VlblwiIGVsZXZhdGlvbj1cIjFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJoZWFkbGluZVwiPtCX0LDQs9GA0YPQt9C60LAg0YTQsNC50LvQsDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sYmFyLXRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtc3BhY2VyLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx2LXRvb2xiYXItdGl0bGU+PHYtaWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZsZXgtZ3Jvdy0wXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjbG9zZURpYWxvZ1wiPlg8L3YtaWNvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdi10b29sYmFyLXRpdGxlPlxuICAgICAgICAgICAgICAgICAgICA8L3YtdG9vbGJhcj5cbiAgICAgICAgICAgICAgICAgICAgPHYtY2FyZC10ZXh0PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHYtY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWNvbD5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkLXRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQktGL0LHQtdGA0LjRgtC1INGE0LDQudC7INC00LvRjyDQt9Cw0LPRgNGD0LfQutC4LCDQuCDQvtCx0L7Qt9C90LDRh9GC0LUg0LXQs9C+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkLXRleHQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2LWZvcm0gQGtleXVwLm5hdGl2ZS5lbnRlcj1cInVwbG9hZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHYtdGV4dC1maWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwiZmlsZS50aXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPVwi0J7QsdC+0LfQvdCw0YfQtdC90LjQtSjQmNC90L0sINC/0LDRgdC/0L7RgNGCKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDplcnJvci1tZXNzYWdlcz1cInRpdGxlRXJyb3JcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPVwidGl0bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGhvdG8tbG9hZGVyIDpvbmU9XCJ0cnVlXCIgcmVmPVwibG9hZGVyXCI+PC9waG90by1sb2FkZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1jYXJkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZC1mbGV4IGp1c3RpZnktY2VudGVyIGFsaWduLWNlbnRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0PVwiYXV0b1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8di1idG4gY29sb3I9XCJkYXJrXCIgQGNsaWNrPVwidXBsb2FkXCIgOmRpc2FibGVkPVwiZmlsZS50aXRsZSA9PSAnJ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDQn9C+0LTRgtCy0LXRgNC00LjRgtGMXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC92LWJ0bj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdi1jYXJkPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtZm9ybT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3YtY29sPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC92LWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPC92LWNhcmQtdGV4dD5cbiAgICAgICAgICAgICAgICA8L3YtY2FyZD5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvdi1kaWFsb2c+XG4gICAgPC92LWNvbnRhaW5lcj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IFBob3RvTG9hZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL3Bob3RvLWxvYWRlclwiO1xuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgICAgbmFtZTogXCJGaWxlc1wiLFxuICAgICAgICBjb21wb25lbnRzOiB7UGhvdG9Mb2FkZXJ9LFxuICAgICAgICBkYXRhOiAodm0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbDogMSxcbiAgICAgICAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgZmlsZTogbnVsbCxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZpbGVzOiBbXSxcbiAgICAgICAgICAgICAgICBwYWdlOiAxLFxuICAgICAgICAgICAgICAgIGRlbGV0ZV9pZDogMCxcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aXRsZUVycm9yOiAnJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW91bnRlZCgpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0UGFnZSgpO1xuICAgICAgICB9LFxuICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICBvcGVuRGlhbG9nKCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdyA9IHRydWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjbG9zZURpYWxvZygpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRQYWdlKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy5heGlvcy5nZXQoJ2ZpbGU/Jywge3BhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogdGhpcy5wYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogKHRoaXMuJHJvdXRlLnBhcmFtcy51c2VyX2lkID4gMCA/IHRoaXMuJHJvdXRlLnBhcmFtcy51c2VyX2lkIDogbnVsbClcbiAgICAgICAgICAgICAgICB9fSkudGhlbigocikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVzID0gci5kYXRhLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubCA9IHIuZGF0YS5sYXN0X3BhZ2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHVwbG9hZCgpIHtcbiAgICAgICAgICAgICAgICBsZXQgbmV3UGhvdG9zID0gW3RoaXMuJHJlZnMubG9hZGVyLmdldEZpcnN0KCldO1xuICAgICAgICAgICAgICAgIGlmIChuZXdQaG90b3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKClcbiAgICAgICAgICAgICAgICAgICAgbmV3UGhvdG9zLmZvckVhY2goKHBob3RvLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBwaG90bywgcGhvdG8ubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd0aXRsZScsIHRoaXMuZmlsZS50aXRsZSlcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5heGlvcy5wb3N0KCcvZmlsZScsIGZvcm1EYXRhKS50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRQYWdlKClcblxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJvb3QuJGNoaWxkcmVuWzBdLnNuYWNrYmFyVGV4dCA9ICBg0J7RiNC40LHQutCwINGB0L7RhdGA0LDQvdC10L3QuNGPINGE0L7RgtC+0LPRgNCw0YTQuNC4YFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZG93bmxvYWQoaWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYXhpb3MuZ2V0KCdmaWxlLycraWQsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAnYmxvYicsXG4gICAgICAgICAgICAgICAgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3Jlc3BvbnNlLmRhdGFdKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaHJlZiA9IHVybDtcbiAgICAgICAgICAgICAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgZGVjb2RlVVJJQ29tcG9uZW50KHJlc3BvbnNlLmhlYWRlcnNbJ2NvbnRlbnQtZGlzcG9zaXRpb24nXS5zcGxpdCgnOycpWzJdLnNwbGl0KFwidXRmLTgnJ1wiKVsxXSkpO1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspO1xuICAgICAgICAgICAgICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVsZXRlKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5heGlvcy5kZWxldGUoJy9maWxlLycrdGhpcy5kZWxldGVfaWQpLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0UGFnZSgpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRyb290LiRjaGlsZHJlblswXS5zbmFja2JhclRleHQgPSAgYNCe0YjQuNCx0LrQsCDRgdC+0YXRgNCw0L3QtdC90LjRjyDRhNC+0YLQvtCz0YDQsNGE0LjQuGBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kcm9vdC4kY2hpbGRyZW5bMF0uc25hY2tiYXIgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3YXRjaDoge1xuICAgICAgICAgICAgcGFnZSgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdldFBhZ2UoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWxldGVfaWQobnYpIHtcbiAgICAgICAgICAgICAgICBpZiAobnYgPiAwKSB0aGlzLmRlbGV0ZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNVswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9GaWxlcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtNVswXS5ydWxlc1swXS51c2VbMF0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9GaWxlcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0ZpbGVzLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNzVjNWIyNCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9GaWxlcy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0ZpbGVzLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3YtY29udGFpbmVyJyx7c3RhdGljQ2xhc3M6XCJjb3ZlclwifSxbX2MoJ3YtdG9vbGJhci10aXRsZScse3N0YXRpY0NsYXNzOlwibWItMlwiLGF0dHJzOntcImFsaWduXCI6XCJjZW50ZXJcIixcImp1c3RpZnlcIjpcImNlbnRlclwifSxkb21Qcm9wczp7XCJ0ZXh0Q29udGVudFwiOl92bS5fcyhfdm0uJHJvdXRlLnBhcmFtcy51c2VyX2lkID4gMCA/ICfQpNCw0LnQu9GLINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjycgOiAn0JzQvtC4INGE0LDQudC70YsnKX19KSxfdm0uX3YoXCIgXCIpLChfdm0uZmlsZXMubGVuZ3RoID4gMCk/X2MoJ2RpdicsW19jKCd2LWNvbnRhaW5lcicsW192bS5fbCgoX3ZtLmZpbGVzKSxmdW5jdGlvbihlbnRyeSxpbmRleCl7cmV0dXJuIF9jKCd2LWNhcmQnLHtrZXk6aW5kZXgsc3RhdGljQ2xhc3M6XCJtYS0yXCIsc3RhdGljU3R5bGU6e1wicG9zaXRpb25cIjpcInJlbGF0aXZlXCJ9LGF0dHJzOntcImVsZXZhdGlvblwiOlwiMFwifX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczpcImQtZmxleCBjcnVkXCIsc3RhdGljU3R5bGU6e1wicG9zaXRpb25cIjpcImFic29sdXRlXCIsXCJyaWdodFwiOlwiNXB4XCIsXCJ0b3BcIjpcIi0xMHB4XCIsXCJmb250LXNpemVcIjpcIjEwcHhcIn19LFtfYygndi1idG4nLHtzdGF0aWNDbGFzczpcIm1yLTNcIixhdHRyczp7XCJjb2xvclwiOlwicmVkXCIsXCJmYWJcIjpcIlwiLFwic21hbGxcIjpcIlwiLFwiZGFya1wiOlwiXCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0uZGVsZXRlX2lkID0gZW50cnkuaWR9fX0sW19jKCd2LWljb24nLFtfdm0uX3YoXCJtZGktZGVsZXRlXCIpXSldLDEpLF92bS5fdihcIiBcIiksX2MoJ3YtYnRuJyx7YXR0cnM6e1wiY29sb3JcIjpcImdyZWVuXCIsXCJmYWJcIjpcIlwiLFwic21hbGxcIjpcIlwiLFwiZGFya1wiOlwiXCJ9LG9uOntcImNsaWNrXCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLmRvd25sb2FkKGVudHJ5LmlkKX19fSxbX2MoJ3YtaWNvbicsW192bS5fdihcIm1kaS1kb3dubG9hZFwiKV0pXSwxKV0sMSksX3ZtLl92KFwiIFwiKSxfYygnaDQnLHtzdGF0aWNTdHlsZTp7XCJtYXgtd2lkdGhcIjpcIjYwJVwifX0sW192bS5fdihfdm0uX3MoZW50cnkudGl0bGUpKV0pXSl9KSxfdm0uX3YoXCIgXCIpLChfdm0ubCA+IDEpP19jKCdkaXYnLHtzdGF0aWNDbGFzczpcInRleHQtY2VudGVyIHhzLTEyXCJ9LFtfYygndi1wYWdpbmF0aW9uJyx7YXR0cnM6e1wibGVuZ3RoXCI6X3ZtLmwsXCJ0b3RhbC12aXNpYmxlXCI6M30sbW9kZWw6e3ZhbHVlOihfdm0ucGFnZSksY2FsbGJhY2s6ZnVuY3Rpb24gKCQkdikge192bS5wYWdlPSQkdn0sZXhwcmVzc2lvbjpcInBhZ2VcIn19KV0sMSk6X3ZtLl9lKCldLDIpXSwxKTpfYygnZGl2JyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidGV4dC1jZW50ZXIgbXktM1wifSxbX3ZtLl92KFwi0KTQsNC50LvQvtCyINC/0L7QutCwINC90LXRglwiKV0pXSksX3ZtLl92KFwiIFwiKSxfYygndi1idG4nLHtzdGF0aWNDbGFzczpcInNhdmUtYnRuXCIsYXR0cnM6e1wiY29sb3JcIjpcInN1Y2Nlc3NcIixcImZhYlwiOlwiXCIsXCJkYXJrXCI6XCJcIn0sb246e1wiY2xpY2tcIjpfdm0ub3BlbkRpYWxvZ319LFtfYygndi1pY29uJyxbX3ZtLl92KFwibWRpLXBhcGVyY2xpcFwiKV0pXSwxKSxfdm0uX3YoXCIgXCIpLChfdm0uc2hvdyk/X2MoJ3YtZGlhbG9nJyx7YXR0cnM6e1widmFsdWVcIjpfdm0uc2hvdyxcImZ1bGxzY3JlZW5cIjpfdm0uJHZ1ZXRpZnkuYnJlYWtwb2ludC5tb2JpbGV9LG9uOntcImNsb3NlXCI6X3ZtLmNsb3NlRGlhbG9nfX0sW1tfYygndi1jYXJkJyxbX2MoJ3YtdG9vbGJhcicse3N0YXRpY0NsYXNzOlwiY29udGFpbmVyIHB5LTEgbXktMCBqdXN0aWZ5LXNwYWNlLWJldHdlZW5cIixhdHRyczp7XCJlbGV2YXRpb25cIjpcIjFcIn19LFtfYygndi10b29sYmFyLXRpdGxlJyxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczpcImhlYWRsaW5lXCJ9LFtfdm0uX3YoXCLQl9Cw0LPRgNGD0LfQutCwINGE0LDQudC70LBcIildKV0pLF92bS5fdihcIiBcIiksX2MoJ3Ytc3BhY2VyJyksX3ZtLl92KFwiIFwiKSxfYygndi10b29sYmFyLXRpdGxlJyxbX2MoJ3YtaWNvbicse3N0YXRpY0NsYXNzOlwiZmxleC1ncm93LTBcIixhdHRyczp7XCJ0ZXh0XCI6XCJcIn0sb246e1wiY2xpY2tcIjpfdm0uY2xvc2VEaWFsb2d9fSxbX3ZtLl92KFwiWFwiKV0pXSwxKV0sMSksX3ZtLl92KFwiIFwiKSxfYygndi1jYXJkLXRleHQnLFtfYygndi1jb250YWluZXInLFtfYygndi1jb2wnLFtfYygndi1jYXJkLXRleHQnLFtfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCS0YvQsdC10YDQuNGC0LUg0YTQsNC50Lsg0LTQu9GPINC30LDQs9GA0YPQt9C60LgsINC4INC+0LHQvtC30L3QsNGH0YLQtSDQtdCz0L5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIpXSksX3ZtLl92KFwiIFwiKSxfYygndi1mb3JtJyx7bmF0aXZlT246e1wia2V5dXBcIjpmdW5jdGlvbigkZXZlbnQpe2lmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmX3ZtLl9rKCRldmVudC5rZXlDb2RlLFwiZW50ZXJcIiwxMywkZXZlbnQua2V5LFwiRW50ZXJcIikpeyByZXR1cm4gbnVsbDsgfXJldHVybiBfdm0udXBsb2FkLmFwcGx5KG51bGwsIGFyZ3VtZW50cyl9fX0sW19jKCd2LXRleHQtZmllbGQnLHthdHRyczp7XCJsYWJlbFwiOlwi0J7QsdC+0LfQvdCw0YfQtdC90LjQtSjQmNC90L0sINC/0LDRgdC/0L7RgNGCKVwiLFwiZXJyb3ItbWVzc2FnZXNcIjpfdm0udGl0bGVFcnJvcixcIm5hbWVcIjpcInRpdGxlXCIsXCJ0eXBlXCI6XCJ0ZXh0XCIsXCJyZXF1aXJlZFwiOlwiXCJ9LG1vZGVsOnt2YWx1ZTooX3ZtLmZpbGUudGl0bGUpLGNhbGxiYWNrOmZ1bmN0aW9uICgkJHYpIHtfdm0uJHNldChfdm0uZmlsZSwgXCJ0aXRsZVwiLCAkJHYpfSxleHByZXNzaW9uOlwiZmlsZS50aXRsZVwifX0pLF92bS5fdihcIiBcIiksX2MoJ3Bob3RvLWxvYWRlcicse3JlZjpcImxvYWRlclwiLGF0dHJzOntcIm9uZVwiOnRydWV9fSksX3ZtLl92KFwiIFwiKSxfYygndi1jYXJkJyx7c3RhdGljQ2xhc3M6XCJkLWZsZXgganVzdGlmeS1jZW50ZXIgYWxpZ24tY2VudGVyXCIsYXR0cnM6e1wiZmxhdFwiOlwiXCIsXCJoZWlnaHRcIjpcImF1dG9cIixcInRpbGVcIjpcIlwifX0sW19jKCd2LWJ0bicse2F0dHJzOntcImNvbG9yXCI6XCJkYXJrXCIsXCJkaXNhYmxlZFwiOl92bS5maWxlLnRpdGxlID09ICcnfSxvbjp7XCJjbGlja1wiOl92bS51cGxvYWR9fSxbX3ZtLl92KFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgINCf0L7QtNGC0LLQtdGA0LTQuNGC0YxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIildKV0sMSldLDEpXSwxKV0sMSldLDEpXSwxKV1dLDIpOl92bS5fZSgpXSwxKX1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTlbMF0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOVswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Ecm9wQXJlYS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lZTRmZWQwYyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMDFlMDliNGNcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05WzBdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTlbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRWRpdFBob3RvQ2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD01MDNmMmFmYiZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzM2YTUzYzNcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05WzBdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTlbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRWRpdFBob3RvQ2FyZC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MSZsYW5nPWNzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMDhjMjc3OGNcIiwgY29udGVudCwgdHJ1ZSwge30pOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05WzBdLnJ1bGVzWzBdLnVzZVsxXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTlbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUHJvZ3Jlc3NCYXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmViZjRlYWEmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjEwZGQ5Y2VlXCIsIGNvbnRlbnQsIHRydWUsIHt9KTsiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtOVswXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC05WzBdLnJ1bGVzWzBdLnVzZVsyXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3Bob3RvLWxvYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03MTAxMzBhMiZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiMTFlYTUwY2VcIiwgY29udGVudCwgdHJ1ZSwge30pOyJdLCJzb3VyY2VSb290IjoiIn0=