(self.webpackChunk=self.webpackChunk||[]).push([[448],{434:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r,o=n(4082),s=function(){return{listeners:[],scriptId:o.uuid("tiny-script"),scriptLoaded:!1}},i=(r=s(),{load:function(t,e,n){r.scriptLoaded?n():(r.listeners.push(n),t.getElementById(r.scriptId)||function(t,e,n,r){var o=e.createElement("script");o.referrerPolicy="origin",o.type="application/javascript",o.id=t,o.src=n;var s=function(){o.removeEventListener("load",s),r()};o.addEventListener("load",s),e.head&&e.head.appendChild(o)}(r.scriptId,t,e,(function(){r.listeners.forEach((function(t){return t()})),r.scriptLoaded=!0})))},reinitialize:function(){r=s()}});e.ScriptLoader=i},8537:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.getTinymce=function(){var t="undefined"!=typeof window?window:n.g;return t&&t.tinymce?t.tinymce:null}},4082:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=["onActivate","onAddUndo","onBeforeAddUndo","onBeforeExecCommand","onBeforeGetContent","onBeforeRenderUI","onBeforeSetContent","onBeforePaste","onBlur","onChange","onClearUndos","onClick","onContextMenu","onCopy","onCut","onDblclick","onDeactivate","onDirty","onDrag","onDragDrop","onDragEnd","onDragGesture","onDragOver","onDrop","onExecCommand","onFocus","onFocusIn","onFocusOut","onGetContent","onHide","onInit","onKeyDown","onKeyPress","onKeyUp","onLoadContent","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onNodeChange","onObjectResizeStart","onObjectResized","onObjectSelected","onPaste","onPostProcess","onPostRender","onPreProcess","onProgressState","onRedo","onRemove","onReset","onSaveContent","onSelectionChange","onSetAttrib","onSetContent","onShow","onSubmit","onUndo","onVisualAid"],r=function(t){return-1!==n.map((function(t){return t.toLowerCase()})).indexOf(t.toLowerCase())};e.isValidKey=r;var o=function(t,e,n){Object.keys(e).filter(r).forEach((function(r){var o=e[r];"function"==typeof o&&("onInit"===r?o(t,n):n.on(r.substring(2),(function(t){return o(t,n)})))}))};e.bindHandlers=o;var s=function(t,e){var n=t.$props.modelEvents?t.$props.modelEvents:null,r=Array.isArray(n)?n.join(" "):n;e.on(r||"change input undo redo",(function(){t.$emit("input",e.getContent({format:t.$props.outputFormat}))}))};e.bindModelHandlers=s;e.initEditor=function(t,e,n){var r=e.$props.value?e.$props.value:"",i=e.$props.initialValue?e.$props.initialValue:"";n.setContent(r||(e.initialized?e.cache:i)),e.$watch("value",(function(t,r){n&&"string"==typeof t&&t!==r&&t!==n.getContent({format:e.$props.outputFormat})&&n.setContent(t)})),e.$listeners.input&&s(e,n),o(t,e.$listeners,n),e.initialized=!0};var i=0;e.uuid=function(t){var e=Date.now();return t+"_"+Math.floor(1e9*Math.random())+ ++i+String(e)};e.isTextarea=function(t){return null!==t&&"textarea"===t.tagName.toLowerCase()};var a=function(t){return void 0===t||""===t?[]:Array.isArray(t)?t:t.split(" ")};e.mergePlugins=function(t,e){return a(t).concat(a(e))};e.isNullOrUndefined=function(t){return null==t}},2282:function(t,e,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var o=n(434),s=n(8537),i=n(4082),a=n(7431),l=function(t){return function(){var e=r(r({},t.$props.init),{readonly:t.$props.disabled,selector:"#"+t.elementId,plugins:i.mergePlugins(t.$props.init&&t.$props.init.plugins,t.$props.plugins),toolbar:t.$props.toolbar||t.$props.init&&t.$props.init.toolbar,inline:t.inlineEditor,setup:function(e){t.editor=e,e.on("init",(function(n){return i.initEditor(n,t,e)})),t.$props.init&&"function"==typeof t.$props.init.setup&&t.$props.init.setup(e)}});i.isTextarea(t.element)&&(t.element.style.visibility="",t.element.style.display=""),s.getTinymce().init(e)}};e.Editor={props:a.editorProps,created:function(){this.elementId=this.$props.id||i.uuid("tiny-vue"),this.inlineEditor=this.$props.init&&this.$props.init.inline||this.$props.inline,this.initialized=!1},watch:{disabled:function(){this.editor.setMode(this.disabled?"readonly":"design")}},mounted:function(){if(this.element=this.$el,null!==s.getTinymce())l(this)();else if(this.element&&this.element.ownerDocument){var t=this.$props.cloudChannel?this.$props.cloudChannel:"5",e=this.$props.apiKey?this.$props.apiKey:"no-api-key",n=i.isNullOrUndefined(this.$props.tinymceScriptSrc)?"https://cdn.tiny.cloud/1/"+e+"/tinymce/"+t+"/tinymce.min.js":this.$props.tinymceScriptSrc;o.ScriptLoader.load(this.element.ownerDocument,n,l(this))}},beforeDestroy:function(){null!==s.getTinymce()&&s.getTinymce().remove(this.editor)},deactivated:function(){var t;this.inlineEditor||(this.cache=this.editor.getContent(),null===(t=s.getTinymce())||void 0===t||t.remove(this.editor))},activated:function(){!this.inlineEditor&&this.initialized&&l(this)()},render:function(t){return this.inlineEditor?function(t,e,n){return t(n||"div",{attrs:{id:e}})}(t,this.elementId,this.$props.tagName):function(t,e){return t("textarea",{attrs:{id:e},style:{visibility:"hidden"}})}(t,this.elementId)}}},7431:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.editorProps={apiKey:String,cloudChannel:String,id:String,init:Object,initialValue:String,inline:Boolean,modelEvents:[String,Array],plugins:[String,Array],tagName:String,toolbar:[String,Array],value:String,disabled:Boolean,tinymceScriptSrc:String,outputFormat:{type:String,validator:function(t){return"html"===t||"text"===t}}}},5846:(t,e,n)=>{"use strict";var r=n(2282);e.Z=r.Editor},4247:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var r=n(4015),o=n.n(r),s=n(3645),i=n.n(s)()(o());i.push([t.id,".photo-input[data-v-595d1e4d]{position:absolute;visibility:hidden}.user-photo[data-v-595d1e4d]{border-radius:200px;width:300px;height:auto;max-height:500px;border:1px solid #01aefe}.user-photo-module[data-v-595d1e4d]{display:flex;flex-direction:column;justify-content:center;align-items:center}","",{version:3,sources:["webpack://./resources/js/components/photo-loader.vue"],names:[],mappings:"AA2FA,8BACA,iBAAA,CACA,iBACA,CAEA,6BACA,mBAAA,CACA,WAAA,CACA,WAAA,CACA,gBAAA,CACA,wBACA,CAEA,oCACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBACA",sourcesContent:['<template>\r\n    <v-card class="d-flex flex-column" justify-center align-center elevation="0">\r\n        <input\r\n                type="file"\r\n                id="files"\r\n                @change="addPhoto"\r\n                class="photo-input"\r\n                placeholder="azaz"\r\n                accept="image/jpeg,image/png,image/jpg"\r\n        />\r\n\r\n        <v-btn class="btn my-2" @click="clickOnInput" v-if="!one || !carouselPhotos.length">Добавить фотографию</v-btn>\r\n        <div v-if="one && loadedPhotos.length" class="text-center">{{loadedPhotos[0].name}}</div>\r\n        <div v-if="!one && carouselPhotos.length" class="user-photo-module">\r\n            <v-carousel v-model="n">\r\n                <v-carousel-item\r\n                        v-for="(photo, i) in carouselPhotos"\r\n                        :key="i"\r\n                        :src="photo"\r\n                        contain\r\n                >\r\n                </v-carousel-item>\r\n            </v-carousel>\r\n        </div>\r\n    </v-card>\r\n</template>\r\n\r\n<script>\r\n\r\n    export default {\r\n        name: \'photo-loader\',\r\n        props: {\r\n            radius: {\r\n                type: Number,\r\n            },\r\n            one: {\r\n                type: Boolean,\r\n                default: false,\r\n            }\r\n        },\r\n        components: {},\r\n        data() {\r\n            return {\r\n                n: 0,\r\n                photo: \'\',\r\n                loadedPhotos: [],\r\n                carouselPhotos:[],\r\n                fileImg: null,\r\n            }\r\n        },\r\n        methods: {\r\n            getPhotos() {\r\n                return this.loadedPhotos;\r\n            },\r\n            getFirst() {\r\n                return this.loadedPhotos[0];\r\n            },\r\n            returnFormData(val) {\r\n                this.$emit(\'save-photo\', val)\r\n            },\r\n            updatePhoto(val) {\r\n                this.photo = val\r\n                this.showCropperDialog = false\r\n            },\r\n            clickOnInput() {\r\n                document.getElementById(\'files\').files = (new DataTransfer()).files;\r\n                document.getElementById(\'files\').click()\r\n\r\n            },\r\n            addPhoto(event) {\r\n                this.fileImg = event.target.files[0]\r\n                if (this.fileImg.size > 5024000) {\r\n                    this.$root.$children[0].snackbarText = \'Размер файла не может быть больше 5МБ\'\r\n                    this.$root.$children[0].snackbar = true\r\n                    return;\r\n                }\r\n                if(this.loadedPhotos.length > 10) {\r\n                    this.$root.$children[0].snackbarText = \'Вы не можете загрузить больше 10 фотографий\'\r\n                    this.$root.$children[0].snackbar = true\r\n                    return;\r\n                }\r\n                this.carouselPhotos.push(URL.createObjectURL(this.fileImg))\r\n                this.loadedPhotos.push(this.fileImg)\r\n                this.n = this.loadedPhotos.length-1\r\n                this.fileImg = null;\r\n            },\r\n        },\r\n    }\r\n<\/script>\r\n\r\n<style scoped>\r\n    .photo-input {\r\n        position: absolute;\r\n        visibility: hidden;\r\n    }\r\n\r\n    .user-photo {\r\n        border-radius: 200px;\r\n        width: 300px;\r\n        height: auto;\r\n        max-height: 500px;\r\n        border: 1px solid #01aefe;\r\n    }\r\n\r\n    .user-photo-module {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n</style>\r\n'],sourceRoot:""}]);const a=i},7979:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>a});var r=n(4015),o=n.n(r),s=n(3645),i=n.n(s)()(o());i.push([t.id,".description.v-text-field>.v-input__control>.v-input__slot:after,.description.v-text-field>.v-input__control>.v-input__slot:before,.description .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/UserPostEdit.vue"],names:[],mappings:"AAsIA,6KAEA,sBACA",sourcesContent:['<template>\r\n    <v-container\r\n            class="cover">\r\n        <v-toolbar-title align="center" justify="center" class="mb-2"\r\n        v-text="$route.params.id  == 0 ? \'Добавление обращения\' :  \'Редактирование обращения\'">\r\n        </v-toolbar-title>\r\n        <v-text-field\r\n            type="text"\r\n            name="title"\r\n            label="Заголовок"\r\n            v-model="post.title"\r\n            :error-messages="messages.title"\r\n            >\r\n        </v-text-field>\r\n        <v-textarea\r\n                name="description"\r\n                label="Описание"\r\n                hint="Hint text"\r\n                :value="\' \'"\r\n                class="description "\r\n                :error-messages="messages.description"\r\n        ></v-textarea>\r\n        <editor\r\n                api-key="kapr0kh0v3vscnkppsxgig98vf6mgitaii8auw3p2pin1c5t"\r\n                class="mt-2"\r\n                v-model="post.description"\r\n        >\r\n        </editor>\r\n        <v-spacer/>\r\n        <photo-loader v-if="$route.params.id > 0" ref="loader"></photo-loader>\r\n        <v-btn class="save-btn"\r\n               v-if="$route.params.id == 0"\r\n               color="success"\r\n               fab\r\n               @click="create"\r\n               :disabled="!(post.description && post.title)"\r\n               dark>\r\n            <v-icon>mdi-plus</v-icon>\r\n        </v-btn>\r\n        <v-btn class="save-btn"\r\n               v-else\r\n               @click="update"\r\n               color="success"\r\n               fab\r\n               dark>\r\n            <v-icon>mdi-check-outline</v-icon>\r\n        </v-btn>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n    import Editor from \'@tinymce/tinymce-vue\';\r\n    import PhotoLoader from \'@/components/photo-loader\'\r\n    export default {\r\n        name: "UserPostEdit",\r\n        components: {\r\n            Editor,\r\n            PhotoLoader\r\n        },\r\n        data: (vm) => {\r\n            return {\r\n                post: {\r\n                    id: vm.$route.params.id,\r\n                    title: \'\',\r\n                    description: \'\',\r\n                },\r\n                messages: {\r\n                    title: \'\',\r\n                    description: \'\',\r\n                }\r\n            }\r\n        },\r\n        mounted() {\r\n            let modelId = this.$route.params.id;\r\n            if (modelId != 0) {\r\n                window.axios.get(\'/user/post/\'+ modelId).then((response) => {\r\n                    this.post = response.data.data;\r\n                }).catch((e) => {\r\n                    console.log(e);\r\n                    this.$root.$children[0].snackbarText = e?.response?.error || \'Произошла ошибка\';\r\n                    this.$root.$children[0].snackbar = true;\r\n                });\r\n            }\r\n        },\r\n        methods: {\r\n            create() {\r\n                window.axios.post(\'/user/post\', this.post)\r\n                    .then((r) => {\r\n                        this.$router.push({name: "upost", params: {id: r.data.data.id}});\r\n                    }).catch((e) => {\r\n                    if (e.response && e.response.status === 422) {\r\n                        let errors = e.response.data.errors\r\n                        Object.keys(this.messages).forEach((k)=> {\r\n                            this.messages[k] = errors[k]?.[0] || \'\';\r\n                        });\r\n                    }\r\n                })\r\n            },\r\n             update() {\r\n                window.axios.put(\'/user/post/\'+ this.post.id, this.post)\r\n                    .then((r) => {\r\n                        let newPhotos = this.$refs.loader.getPhotos();\r\n                        if (newPhotos.length) {\r\n                            const formData = new FormData()\r\n                            newPhotos.forEach((photo, i) => {\r\n                                formData.append(\'post_photos[\'+i+\']\', photo, photo.name)\r\n                            })\r\n                            formData.append(\'_method\', \'PUT\')\r\n                            try {\r\n                                window.axios.post(\'/user/post/\'+this.post.id, formData)\r\n                            } catch (e) {\r\n                                this.$root.$children[0].snackbarText =  `Ошибка сохранения фотографии`\r\n                                this.$root.$children[0].snackbar = true\r\n                            }\r\n                        }\r\n                        this.$router.push({name: "uposts"});\r\n                    }).catch((e) => {\r\n                    console.log(e);\r\n                    if (e.response && e.response.status === 422) {\r\n                        let errors = e.response.data.errors\r\n                        Object.keys(this.messages).forEach((k)=> {\r\n                            this.messages[k] = errors[k]?.[0] || \'\';\r\n                        });\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n    .description .v-text-field__slot textarea {\r\n        display: none !important;\r\n    }\r\n    .description.v-text-field>.v-input__control>.v-input__slot:after ,\r\n    .description.v-text-field>.v-input__control>.v-input__slot:before{\r\n        display: none !important;\r\n    }\r\n</style>'],sourceRoot:""}]);const a=i},7136:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});const r={name:"photo-loader",props:{radius:{type:Number},one:{type:Boolean,default:!1}},components:{},data:function(){return{n:0,photo:"",loadedPhotos:[],carouselPhotos:[],fileImg:null}},methods:{getPhotos:function(){return this.loadedPhotos},getFirst:function(){return this.loadedPhotos[0]},returnFormData:function(t){this.$emit("save-photo",t)},updatePhoto:function(t){this.photo=t,this.showCropperDialog=!1},clickOnInput:function(){document.getElementById("files").files=(new DataTransfer).files,document.getElementById("files").click()},addPhoto:function(t){return this.fileImg=t.target.files[0],this.fileImg.size>5024e3?(this.$root.$children[0].snackbarText="Размер файла не может быть больше 5МБ",void(this.$root.$children[0].snackbar=!0)):this.loadedPhotos.length>10?(this.$root.$children[0].snackbarText="Вы не можете загрузить больше 10 фотографий",void(this.$root.$children[0].snackbar=!0)):(this.carouselPhotos.push(URL.createObjectURL(this.fileImg)),this.loadedPhotos.push(this.fileImg),this.n=this.loadedPhotos.length-1,void(this.fileImg=null))}}};n(8258);const o=(0,n(1900).Z)(r,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-card",{staticClass:"d-flex flex-column",attrs:{"justify-center":"","align-center":"",elevation:"0"}},[n("input",{staticClass:"photo-input",attrs:{type:"file",id:"files",placeholder:"azaz",accept:"image/jpeg,image/png,image/jpg"},on:{change:t.addPhoto}}),t._v(" "),t.one&&t.carouselPhotos.length?t._e():n("v-btn",{staticClass:"btn my-2",on:{click:t.clickOnInput}},[t._v("Добавить фотографию")]),t._v(" "),t.one&&t.loadedPhotos.length?n("div",{staticClass:"text-center"},[t._v(t._s(t.loadedPhotos[0].name))]):t._e(),t._v(" "),!t.one&&t.carouselPhotos.length?n("div",{staticClass:"user-photo-module"},[n("v-carousel",{model:{value:t.n,callback:function(e){t.n=e},expression:"n"}},t._l(t.carouselPhotos,(function(t,e){return n("v-carousel-item",{key:e,attrs:{src:t,contain:""}})})),1)],1):t._e()],1)}),[],!1,null,"595d1e4d",null).exports},1448:(t,e,n)=>{"use strict";n.r(e),n.d(e,{default:()=>i});var r=n(5846),o=n(7136);const s={name:"UserPostEdit",components:{Editor:r.Z,PhotoLoader:o.Z},data:function(t){return{post:{id:t.$route.params.id,title:"",description:""},messages:{title:"",description:""}}},mounted:function(){var t=this,e=this.$route.params.id;0!=e&&window.axios.get("/user/post/"+e).then((function(e){t.post=e.data.data})).catch((function(e){var n;console.log(e),t.$root.$children[0].snackbarText=(null==e||null===(n=e.response)||void 0===n?void 0:n.error)||"Произошла ошибка",t.$root.$children[0].snackbar=!0}))},methods:{create:function(){var t=this;window.axios.post("/user/post",this.post).then((function(e){t.$router.push({name:"upost",params:{id:e.data.data.id}})})).catch((function(e){if(e.response&&422===e.response.status){var n=e.response.data.errors;Object.keys(t.messages).forEach((function(e){var r;t.messages[e]=(null===(r=n[e])||void 0===r?void 0:r[0])||""}))}}))},update:function(){var t=this;window.axios.put("/user/post/"+this.post.id,this.post).then((function(e){var n=t.$refs.loader.getPhotos();if(n.length){var r=new FormData;n.forEach((function(t,e){r.append("post_photos["+e+"]",t,t.name)})),r.append("_method","PUT");try{window.axios.post("/user/post/"+t.post.id,r)}catch(e){t.$root.$children[0].snackbarText="Ошибка сохранения фотографии",t.$root.$children[0].snackbar=!0}}t.$router.push({name:"uposts"})})).catch((function(e){if(console.log(e),e.response&&422===e.response.status){var n=e.response.data.errors;Object.keys(t.messages).forEach((function(e){var r;t.messages[e]=(null===(r=n[e])||void 0===r?void 0:r[0])||""}))}}))}}};n(8448);const i=(0,n(1900).Z)(s,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:t._s(0==t.$route.params.id?"Добавление обращения":"Редактирование обращения")}}),t._v(" "),n("v-text-field",{attrs:{type:"text",name:"title",label:"Заголовок","error-messages":t.messages.title},model:{value:t.post.title,callback:function(e){t.$set(t.post,"title",e)},expression:"post.title"}}),t._v(" "),n("v-textarea",{staticClass:"description ",attrs:{name:"description",label:"Описание",hint:"Hint text",value:" ","error-messages":t.messages.description}}),t._v(" "),n("editor",{staticClass:"mt-2",attrs:{"api-key":"kapr0kh0v3vscnkppsxgig98vf6mgitaii8auw3p2pin1c5t"},model:{value:t.post.description,callback:function(e){t.$set(t.post,"description",e)},expression:"post.description"}}),t._v(" "),n("v-spacer"),t._v(" "),t.$route.params.id>0?n("photo-loader",{ref:"loader"}):t._e(),t._v(" "),0==t.$route.params.id?n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!(t.post.description&&t.post.title),dark:""},on:{click:t.create}},[n("v-icon",[t._v("mdi-plus")])],1):n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",dark:""},on:{click:t.update}},[n("v-icon",[t._v("mdi-check-outline")])],1)],1)}),[],!1,null,null,null).exports},8258:(t,e,n)=>{var r=n(4247);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals);(0,n(5346).Z)("34d8856a",r,!0,{})},8448:(t,e,n)=>{var r=n(7979);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[t.id,r,""]]),r.locals&&(t.exports=r.locals);(0,n(5346).Z)("736126fd",r,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,