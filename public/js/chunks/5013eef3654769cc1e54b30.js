(self.webpackChunk=self.webpackChunk||[]).push([[501],{7592:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>l});var o=e(4015),s=e.n(o),i=e(3645),a=e.n(i)()(s());a.push([t.id,".user-photo-module{height:300px;max-height:300px;overflow-y:hidden}.user-post-description::-webkit-scrollbar{display:none}.user-post-description{overflow-y:scroll!important;height:300px;max-height:300px}","",{version:3,sources:["webpack://./resources/js/pages/Posts.vue"],names:[],mappings:"AA8LA,mBACA,YAAA,CACA,gBAAA,CACA,iBACA,CACA,0CACA,YACA,CACA,uBACA,2BAAA,CACA,YAAA,CACA,gBACA",sourcesContent:['<template>\n    <v-container class="cover">\n        <v-toolbar-title align="center" justify="center" class="mb-2"\n                         v-text="\'Последние новости\'">\n        </v-toolbar-title>\n        <div v-if="posts.length > 0">\n            <v-layout class="d-flex flex-row flex-wrap">\n\n                <v-flex\n                        xs12\n                        sm6\n                        md6\n                        lg4\n                        v-for="(post, y) in posts" :key="y">\n\n                    <v-card\n                            elevation="0"\n                            outlined\n                            style="position: relative;border: thin solid rgb(57 133 165 / 34%);border-radius:16px"\n                            class="ma-1"\n                    >\n                        <div v-if="$store.state.auth.user.role === 1024"\n                             class="d-flex crud" style="position:absolute; right: 5px; top: -10px; font-size: 10px">\n                            <v-btn color="red"\n                                   fab\n                                   small\n                                   @click="delete_id = post.id"\n                                   class="mr-3"\n                                   dark>\n                                <v-icon>mdi-delete</v-icon>\n                            </v-btn>\n                            <v-btn\n                                    color="yellow"\n                                    fab\n                                    small\n                                    @click="$router.push(\'/post/\'+post.id)"\n                                    dark>\n                                <v-icon>mdi-pencil</v-icon>\n                            </v-btn>\n                        </div>\n\n                        <div\n                                v-else\n                                v-text="\'Опубликовано: \'+post.date"\n                                style="position:absolute; right: 15px; top: 5px; font-size: 10px"></div>\n                        <v-container>\n                            <v-spacer></v-spacer>\n                            <v-toolbar-title\n                                class="text-center mt-3 mb-2"\n                                @click="\n                                    dialogPost = post\n                                    show =  true\n                            ">{{post.title}}</v-toolbar-title>\n                            <v-spacer></v-spacer>\n                        </v-container>\n\n                        <v-container class="ma-0 pa-0"\n                             @click="\n                                dialogPost = post\n                                show =  true\n                        ">\n                            <div v-if="post.photos.length" class="user-photo-module">\n                                <v-carousel>\n                                    <v-carousel-item\n                                            v-for="(photo, i) in post.photos"\n                                            :key="i"\n                                            :src="photo.file"\n                                            contain\n                                            min-height="300px"\n                                            max-height="300px"\n                                    >\n                                    </v-carousel-item>\n                                </v-carousel>\n                            </div>\n                            <div v-else class="user-post-description">\n                                <v-container v-html="post.description"></v-container>\n                            </div>\n                        </v-container>\n                    </v-card>\n                </v-flex>\n            </v-layout>\n            <div class="text-center xs-12" v-if="l > 1">\n                <v-pagination\n                        :length="l"\n                        :total-visible="3"\n                        v-model="page"\n                ></v-pagination>\n            </div>\n        </div>\n        <div v-else>\n            <div class="text-center my-3">Новостей пока нет</div>\n        </div>\n\n        <v-btn class="save-btn"\n               v-if="$store.state.auth.user.role === 1024"\n               color="success"\n               fab\n               @click="$router.push(\'/post/0\')"\n               dark>\n            <v-icon>mdi-plus</v-icon>\n        </v-btn>\n        <v-dialog\n                v-if="!!dialogPost"\n                v-model="show"\n                @close="\n                    show = false\n                    dialogPost = null\n                "\n                :fullscreen="$vuetify.breakpoint.mobile"\n        >\n            <template slot:default>\n                <v-container class="px-0 mx-0 pt-0 mt-0 cover" style="background-color: white !important; max-width: 100% !important;">\n                    <v-toolbar-title class="text-center my-3">{{dialogPost.title}}</v-toolbar-title>\n\n                    <div v-if="dialogPost.photos && dialogPost.photos.length > 0" class="container my-2">\n                        <v-carousel>\n                            <v-carousel-item\n                                    v-for="(photo, i) in dialogPost.photos"\n                                    :key="i"\n                                    :src="photo.file"\n                                    contain\n                                    max-height="500px"\n                                    min-height="500px"\n                            >\n                            </v-carousel-item>\n                        </v-carousel>\n                    </div>\n                    <v-container v-html="dialogPost.description"></v-container>\n\n                    <v-toolbar-title class="text-center my-3">\n                        <v-btn color="primary" @click="\n                            show = false\n                            dialogPost = null\n                        ">Закрыть\n                        </v-btn>\n                    </v-toolbar-title>\n\n                </v-container>\n            </template>\n        </v-dialog>\n    </v-container>\n</template>\n\n<script>\n    export default {\n        name: "Posts",\n        data: (vm) => {\n            return {\n                l: 1,\n                posts: [],\n                page: 1,\n                dialogPost: null,\n                delete_id: 0,\n                show: false\n            }\n        },\n        mounted() {\n            this.getPage();\n        },\n        methods: {\n            getPage() {\n                window.axios.get(\'/post/\', {params: {page: this.page, per_page: 10}}).then((response) => {\n                    this.posts = response.data.data;\n                    this.l = response.data.last_page\n                }).catch((e) => {\n                    console.log(e);\n                });\n            },\n            delete() {\n                if (this.delete_id > 0)\n                    window.axios.delete(\'/post/\' + this.delete_id).then((response) => {\n                        this.getPage()\n                        this.delete_id = 0\n                    }).catch((e) => {\n                        console.log(e);\n                    });\n            }\n        },\n        watch: {\n            page() {\n                this.getPage();\n            },\n            delete_id(nv) {\n                if (nv > 0) this.delete()\n            }\n        }\n    }\n<\/script>\n\n<style>\n    .user-photo-module{\n        height: 300px;\n        max-height: 300px;\n        overflow-y: hidden;\n    }\n    .user-post-description::-webkit-scrollbar {\n        display: none;\n    }\n    .user-post-description{\n        overflow-y: scroll !important;\n        height: 300px;\n        max-height: 300px;\n    }\n</style>\n'],sourceRoot:""}]);const l=a},4501:(t,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>s});const o={name:"Posts",data:function(t){return{l:1,posts:[],page:1,dialogPost:null,delete_id:0,show:!1}},mounted:function(){this.getPage()},methods:{getPage:function(){var t=this;window.axios.get("/post/",{params:{page:this.page,per_page:10}}).then((function(n){t.posts=n.data.data,t.l=n.data.last_page})).catch((function(t){console.log(t)}))},delete:function(){var t=this;this.delete_id>0&&window.axios.delete("/post/"+this.delete_id).then((function(n){t.getPage(),t.delete_id=0})).catch((function(t){console.log(t)}))}},watch:{page:function(){this.getPage()},delete_id:function(t){t>0&&this.delete()}}};e(8740);const s=(0,e(1900).Z)(o,(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("v-container",{staticClass:"cover"},[e("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:t._s("Последние новости")}}),t._v(" "),t.posts.length>0?e("div",[e("v-layout",{staticClass:"d-flex flex-row flex-wrap"},t._l(t.posts,(function(n,o){return e("v-flex",{key:o,attrs:{xs12:"",sm6:"",md6:"",lg4:""}},[e("v-card",{staticClass:"ma-1",staticStyle:{position:"relative",border:"thin solid rgb(57 133 165 / 34%)","border-radius":"16px"},attrs:{elevation:"0",outlined:""}},[1024===t.$store.state.auth.user.role?e("div",{staticClass:"d-flex crud",staticStyle:{position:"absolute",right:"5px",top:"-10px","font-size":"10px"}},[e("v-btn",{staticClass:"mr-3",attrs:{color:"red",fab:"",small:"",dark:""},on:{click:function(e){t.delete_id=n.id}}},[e("v-icon",[t._v("mdi-delete")])],1),t._v(" "),e("v-btn",{attrs:{color:"yellow",fab:"",small:"",dark:""},on:{click:function(e){return t.$router.push("/post/"+n.id)}}},[e("v-icon",[t._v("mdi-pencil")])],1)],1):e("div",{staticStyle:{position:"absolute",right:"15px",top:"5px","font-size":"10px"},domProps:{textContent:t._s("Опубликовано: "+n.date)}}),t._v(" "),e("v-container",[e("v-spacer"),t._v(" "),e("v-toolbar-title",{staticClass:"text-center mt-3 mb-2",on:{click:function(e){t.dialogPost=n,t.show=!0}}},[t._v(t._s(n.title))]),t._v(" "),e("v-spacer")],1),t._v(" "),e("v-container",{staticClass:"ma-0 pa-0",on:{click:function(e){t.dialogPost=n,t.show=!0}}},[n.photos.length?e("div",{staticClass:"user-photo-module"},[e("v-carousel",t._l(n.photos,(function(t,n){return e("v-carousel-item",{key:n,attrs:{src:t.file,contain:"","min-height":"300px","max-height":"300px"}})})),1)],1):e("div",{staticClass:"user-post-description"},[e("v-container",{domProps:{innerHTML:t._s(n.description)}})],1)])],1)],1)})),1),t._v(" "),t.l>1?e("div",{staticClass:"text-center xs-12"},[e("v-pagination",{attrs:{length:t.l,"total-visible":3},model:{value:t.page,callback:function(n){t.page=n},expression:"page"}})],1):t._e()],1):e("div",[e("div",{staticClass:"text-center my-3"},[t._v("Новостей пока нет")])]),t._v(" "),1024===t.$store.state.auth.user.role?e("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",dark:""},on:{click:function(n){return t.$router.push("/post/0")}}},[e("v-icon",[t._v("mdi-plus")])],1):t._e(),t._v(" "),t.dialogPost?e("v-dialog",{attrs:{fullscreen:t.$vuetify.breakpoint.mobile},on:{close:function(n){t.show=!1,t.dialogPost=null}},model:{value:t.show,callback:function(n){t.show=n},expression:"show"}},[[e("v-container",{staticClass:"px-0 mx-0 pt-0 mt-0 cover",staticStyle:{"background-color":"white !important","max-width":"100% !important"}},[e("v-toolbar-title",{staticClass:"text-center my-3"},[t._v(t._s(t.dialogPost.title))]),t._v(" "),t.dialogPost.photos&&t.dialogPost.photos.length>0?e("div",{staticClass:"container my-2"},[e("v-carousel",t._l(t.dialogPost.photos,(function(t,n){return e("v-carousel-item",{key:n,attrs:{src:t.file,contain:"","max-height":"500px","min-height":"500px"}})})),1)],1):t._e(),t._v(" "),e("v-container",{domProps:{innerHTML:t._s(t.dialogPost.description)}}),t._v(" "),e("v-toolbar-title",{staticClass:"text-center my-3"},[e("v-btn",{attrs:{color:"primary"},on:{click:function(n){t.show=!1,t.dialogPost=null}}},[t._v("Закрыть\n                    ")])],1)],1)]],2):t._e()],1)}),[],!1,null,null,null).exports},8740:(t,n,e)=>{var o=e(7592);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[t.id,o,""]]),o.locals&&(t.exports=o.locals);(0,e(5346).Z)("1e2943ce",o,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,