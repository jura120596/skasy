(self.webpackChunk=self.webpackChunk||[]).push([[785],{518:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var s=n(4015),o=n.n(s),a=n(3645),r=n.n(a)()(o());r.push([e.id,".place.v-text-field>.v-input__control>.v-input__slot:after,.place.v-text-field>.v-input__control>.v-input__slot:before,.place .v-text-field__slot textarea{display:none!important}","",{version:3,sources:["webpack://./resources/js/pages/DistrictEdit.vue"],names:[],mappings:"AAuEA,2JAEA,sBACA",sourcesContent:['<template>\n    <v-container\n            class="cover">\n        <v-toolbar-title align="center" justify="center" class="mb-2"\n        v-text="\'Добавление района\'">\n        </v-toolbar-title>\n        <v-text-field\n            type="text"\n            name="title"\n            label="Название"\n            v-model="model.name"\n            :error-messages="messages.name"\n            >\n        </v-text-field>\n        <v-spacer/>\n        <v-btn class="save-btn"\n               color="success"\n               fab\n               @click="create"\n               :disabled="!(model.name)"\n               dark>\n            <v-icon>mdi-plus</v-icon>\n        </v-btn>\n    </v-container>\n</template>\n\n<script>\n    export default {\n        name: "PostAdd",\n        components: {\n        },\n        data: (vm) => {\n            let p =  vm.$route.query.parent_district_id;\n            return {\n                model: {\n                    id: vm.$route.params.id,\n                    region_id: vm.$route.params.region,\n                    parent_district_id: p ? p : null,\n                    level: vm.$route.query.level,\n                    name: \'\',\n                },\n                messages: {\n                    name: \'\',\n                }\n            }\n        },\n        mounted() {\n        },\n        methods: {\n            create() {\n                window.axios.post(\'/district\', this.model)\n                    .then((r) => {\n                        this.$router.go(-1);\n                    }).catch((e) => {\n                        console.log(e);\n                    if (e.response && e.response.status === 422) {\n                        let errors = e.response.data.errors\n                        Object.keys(this.messages).forEach((k)=> {\n                            this.messages[k] = errors[k]?.[0] || \'\';\n                        });\n                    }\n                })\n            },\n        }\n    }\n<\/script>\n\n<style>\n    .place .v-text-field__slot textarea {\n        display: none !important;\n    }\n    .place.v-text-field>.v-input__control>.v-input__slot:after ,\n    .place.v-text-field>.v-input__control>.v-input__slot:before{\n        display: none !important;\n    }\n</style>\n'],sourceRoot:""}]);const l=r},4785:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const s={name:"PostAdd",components:{},data:function(e){var t=e.$route.query.parent_district_id;return{model:{id:e.$route.params.id,region_id:e.$route.params.region,parent_district_id:t||null,level:e.$route.query.level,name:""},messages:{name:""}}},mounted:function(){},methods:{create:function(){var e=this;window.axios.post("/district",this.model).then((function(t){e.$router.go(-1)})).catch((function(t){if(console.log(t),t.response&&422===t.response.status){var n=t.response.data.errors;Object.keys(e.messages).forEach((function(t){var s;e.messages[t]=(null===(s=n[t])||void 0===s?void 0:s[0])||""}))}}))}}};n(6255);const o=(0,n(1900).Z)(s,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("v-container",{staticClass:"cover"},[n("v-toolbar-title",{staticClass:"mb-2",attrs:{align:"center",justify:"center"},domProps:{textContent:e._s("Добавление района")}}),e._v(" "),n("v-text-field",{attrs:{type:"text",name:"title",label:"Название","error-messages":e.messages.name},model:{value:e.model.name,callback:function(t){e.$set(e.model,"name",t)},expression:"model.name"}}),e._v(" "),n("v-spacer"),e._v(" "),n("v-btn",{staticClass:"save-btn",attrs:{color:"success",fab:"",disabled:!e.model.name,dark:""},on:{click:e.create}},[n("v-icon",[e._v("mdi-plus")])],1)],1)}),[],!1,null,null,null).exports},6255:(e,t,n)=>{var s=n(518);s.__esModule&&(s=s.default),"string"==typeof s&&(s=[[e.id,s,""]]),s.locals&&(e.exports=s.locals);(0,n(5346).Z)("29343f1d",s,!0,{})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,